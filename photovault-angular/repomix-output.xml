This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
scripts/
  fix-angular-naming.sh
  fix-remaining-issues.sh
  fix-standalone-components.sh
  project code base.xml
  rename-components.js
  suggestedfix.txt
src/
  app/
    components/
      image-card/
        image-card.component.html
        image-card.component.scss
        image-card.component.ts
        image-card.spec.ts
      image-thumbnail/
        image-thumbnail.component.html
        image-thumbnail.component.scss
        image-thumbnail.component.ts
        image-thumbnail.spec.ts
      image-upload/
        image-upload.component.html
        image-upload.component.scss
        image-upload.component.ts
        image-upload.spec.ts
    core/
      core.module.ts
    features/
      features.module.ts
    models/
      image.ts
    pages/
      archive/
        archive.component.html
        archive.component.scss
        archive.component.ts
        archive.spec.ts
      favorites/
        favorites.component.html
        favorites.component.scss
        favorites.component.ts
        favorites.spec.ts
      home/
        home.component.html
        home.component.scss
        home.component.ts
        home.spec.ts
      trash/
        trash.component.html
        trash.component.scss
        trash.component.ts
        trash.spec.ts
    services/
      auth.service.ts
      auth.spec.ts
      image.service.ts
      image.spec.ts
    shared/
      shared.module.ts
    app.component.html
    app.component.scss
    app.component.ts
    app.config.server.ts
    app.config.ts
    app.routes.server.ts
    app.routes.ts
    app.spec.ts
  environments/
    environment.prod.ts
    environment.ts
  custom-theme.scss
  custom-theme.scss.backup
  index.html
  main.server.ts
  main.ts
  server.ts
  styles.css
.editorconfig
.gitignore
angular.json
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="scripts/fix-angular-naming.sh">
#!/bin/bash
# fix-angular-naming.sh

echo "🚀 Starting comprehensive Angular naming convention fixes..."

# Create missing SCSS files
create_missing_files() {
    echo "📁 Creating missing SCSS files..."

    local scss_files=(
        "src/app/components/image-card/image-card.component.scss"
        "src/app/components/image-thumbnail/image-thumbnail.component.scss"
        "src/app/components/image-upload/image-upload.component.scss"
        "src/app/pages/archive/archive.component.scss"
        "src/app/pages/favorites/favorites.component.scss"
        "src/app/pages/home/home.component.scss"
        "src/app/pages/trash/trash.component.scss"
        "src/app/app.component.scss"
    )

    for file in "${scss_files[@]}"; do
        if [ ! -f "$file" ]; then
            mkdir -p "$(dirname "$file")"
            echo "/* Component styles */" > "$file"
            echo "✅ Created: $file"
        fi
    done
}

# Fix component files
fix_component_files() {
    echo "🔧 Fixing component files..."

    # Fix image-thumbnail component
    if [ -f "src/app/components/image-thumbnail/image-thumbnail.component.ts" ]; then
        sed -i 's/export class ImageThumbnail/export class ImageThumbnailComponent/g' \
            "src/app/components/image-thumbnail/image-thumbnail.component.ts"
        sed -i "s/styleUrl:/styleUrls:/g" \
            "src/app/components/image-thumbnail/image-thumbnail.component.ts"
        sed -i "s/'\.\/image-thumbnail\.component\.scss'/['\.\/image-thumbnail\.component\.scss']/g" \
            "src/app/components/image-thumbnail/image-thumbnail.component.ts"
        echo "✅ Fixed: image-thumbnail.component.ts"
    fi

    # Fix image-upload component
    if [ -f "src/app/components/image-upload/image-upload.component.ts" ]; then
        sed -i 's/export class ImageUpload/export class ImageUploadComponent/g' \
            "src/app/components/image-upload/image-upload.component.ts"
        sed -i "s/styleUrl:/styleUrls:/g" \
            "src/app/components/image-upload/image-upload.component.ts"
        sed -i "s/'\.\/image-upload\.component\.scss'/['\.\/image-upload\.component\.scss']/g" \
            "src/app/components/image-upload/image-upload.component.ts"
        echo "✅ Fixed: image-upload.component.ts"
    fi

    # Fix page components
    for component in "archive" "favorites" "trash"; do
        file="src/app/pages/$component/$component.component.ts"
        if [ -f "$file" ]; then
            # Capitalize first letter and add Component suffix
            class_name="$(tr '[:lower:]' '[:upper:]' <<< ${component:0:1})${component:1}Component"
            sed -i "s/export class ${component^}/export class $class_name/g" "$file"
            sed -i "s/styleUrl:/styleUrls:/g" "$file"
            sed -i "s/'\.\/.*\.scss'/['.\/$component.component.scss']/g" "$file"
            echo "✅ Fixed: $file"
        fi
    done

    # Fix app component (remove duplicate class)
    if [ -f "src/app/app.component.ts" ]; then
        # Remove the duplicate AppComponentComponent class
        sed -i '/export class AppComponentComponent/,/^}/d' "src/app/app.component.ts"
        sed -i "s/styleUrl:/styleUrls:/g" "src/app/app.component.ts"
        echo "✅ Fixed: app.component.ts"
    fi
}

# Fix test files
fix_test_files() {
    echo "🧪 Fixing test files..."

    # Define test file mappings
    declare -A test_mappings=(
        ["src/app/components/image-thumbnail/image-thumbnail.component.spec.ts"]="ImageThumbnailComponent"
        ["src/app/components/image-upload/image-upload.component.spec.ts"]="ImageUploadComponent"
        ["src/app/pages/archive/archive.component.spec.ts"]="ArchiveComponent"
        ["src/app/pages/favorites/favorites.component.spec.ts"]="FavoritesComponent"
        ["src/app/pages/trash/trash.component.spec.ts"]="TrashComponent"
    )

    for test_file in "${!test_mappings[@]}"; do
        if [ -f "$test_file" ]; then
            component_name="${test_mappings[$test_file]}"
            # Extract the original wrong name from the file
            wrong_name=$(grep -o "import { [^}]* }" "$test_file" | sed "s/import { \([^}]*\) }/\1/")

            # Fix import statement
            sed -i "s/import { .* } from/import { $component_name } from/g" "$test_file"
            sed -i "s/\.component';/.component';/g" "$test_file"

            # Fix component references
            sed -i "s/let component: [^;]*/let component: $component_name/g" "$test_file"
            sed -i "s/ComponentFixture<[^>]*>/ComponentFixture<$component_name>/g" "$test_file"
            sed -i "s/TestBed\.createComponent([^)]*)/TestBed.createComponent($component_name)/g" "$test_file"
            sed -i "s/imports: \[[^\]]*\]/imports: [$component_name]/g" "$test_file"

            echo "✅ Fixed: $test_file"
        fi
    done
}

# Fix service files
fix_services() {
    echo "🔧 Fixing service files..."

    if [ -f "src/app/services/auth.service.ts" ]; then
        sed -i 's/export class Auth/export class AuthService/g' "src/app/services/auth.service.ts"
        echo "✅ Fixed: auth.service.ts"
    fi

    # Fix service test files
    if [ -f "src/app/services/auth.service.spec.ts" ]; then
        sed -i "s/import { Auth }/import { AuthService }/g" "src/app/services/auth.service.spec.ts"
        sed -i "s/let service: Auth/let service: AuthService/g" "src/app/services/auth.service.spec.ts"
        sed -i "s/TestBed\.inject(Auth)/TestBed.inject(AuthService)/g" "src/app/services/auth.service.spec.ts"
        echo "✅ Fixed: auth.service.spec.ts"
    fi
}

# Fix main bootstrap files
fix_bootstrap_files() {
    echo "🚀 Fixing bootstrap files..."

    # Fix main.ts
    if [ -f "src/main.ts" ]; then
        sed -i "s/import { App }/import { AppComponent }/g" "src/main.ts"
        sed -i "s/bootstrapApplication(App,/bootstrapApplication(AppComponent,/g" "src/main.ts"
        echo "✅ Fixed: main.ts"
    fi

    # Fix main.server.ts
    if [ -f "src/main.server.ts" ]; then
        sed -i "s/import { App }/import { AppComponent }/g" "src/main.server.ts"
        sed -i "s/bootstrapApplication(App,/bootstrapApplication(AppComponent,/g" "src/main.server.ts"
        echo "✅ Fixed: main.server.ts"
    fi
}

# Update app.module.ts with correct component names
fix_app_module() {
    echo "📦 Fixing app.module.ts..."

    if [ -f "src/app/app.module.ts" ]; then
        # Add missing imports
        cat > "src/app/app.module.ts" << 'EOF'
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HttpClientModule } from '@angular/common/http';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';

// Material imports
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatDialogModule } from '@angular/material/dialog';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatGridListModule } from '@angular/material/grid-list';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

// Import components with correct names
import { ImageCardComponent } from './components/image-card/image-card.component';
import { ImageThumbnailComponent } from './components/image-thumbnail/image-thumbnail.component';
import { ImageUploadComponent } from './components/image-upload/image-upload.component';
import { HomeComponent } from './pages/home/home.component';
import { ArchiveComponent } from './pages/archive/archive.component';
import { FavoritesComponent } from './pages/favorites/favorites.component';
import { TrashComponent } from './pages/trash/trash.component';

@NgModule({
  declarations: [
    AppComponent,
    ImageCardComponent,
    ImageThumbnailComponent,
    ImageUploadComponent,
    HomeComponent,
    ArchiveComponent,
    FavoritesComponent,
    TrashComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    HttpClientModule,
    ReactiveFormsModule,
    FormsModule,
    // Material modules
    MatToolbarModule,
    MatButtonModule,
    MatCardModule,
    MatIconModule,
    MatInputModule,
    MatProgressSpinnerModule,
    MatDialogModule,
    MatSnackBarModule,
    MatGridListModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
EOF
        echo "✅ Fixed: app.module.ts"
    fi
}

# Update routing module
fix_routing() {
    echo "🛣️ Fixing routing..."

    if [ -f "src/app/app-routing.module.ts" ]; then
        cat > "src/app/app-routing.module.ts" << 'EOF'
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './pages/home/home.component';
import { FavoritesComponent } from './pages/favorites/favorites.component';
import { ArchiveComponent } from './pages/archive/archive.component';
import { TrashComponent } from './pages/trash/trash.component';

const routes: Routes = [
  { path: '', redirectTo: '/home', pathMatch: 'full' },
  { path: 'home', component: HomeComponent },
  { path: 'favorites', component: FavoritesComponent },
  { path: 'archive', component: ArchiveComponent },
  { path: 'trash', component: TrashComponent },
  { path: '**', redirectTo: '/home' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
EOF
        echo "✅ Fixed: app-routing.module.ts"
    fi
}

# Run all fixes
main() {
    create_missing_files
    fix_component_files
    fix_test_files
    fix_services
    fix_bootstrap_files
    fix_app_module
    fix_routing

    echo ""
    echo "🎉 All naming convention fixes completed!"
    echo ""
    echo "📋 Summary of changes:"
    echo "  • Fixed component class names (added 'Component' suffix)"
    echo "  • Updated styleUrl to styleUrls arrays"
    echo "  • Created missing SCSS files"
    echo "  • Fixed all test file imports and references"
    echo "  • Updated service class names"
    echo "  • Fixed bootstrap file imports"
    echo "  • Updated app.module.ts with correct imports"
    echo "  • Fixed routing with proper component references"
    echo ""
    echo "🚦 Next steps:"
    echo "  1. Run: ng build --dry-run (to check for compilation errors)"
    echo "  2. Run: ng test (to verify tests pass)"
    echo "  3. Run: ng serve (to start development server)"
    echo ""
}

main
</file>

<file path="scripts/fix-remaining-issues.sh">
#!/bin/bash
# fix-remaining-issues.sh

echo "🔧 Fixing remaining Angular issues..."

# Fix the styleUrls double array issue
fix_double_arrays() {
    echo "📐 Fixing double array styleUrls..."

    find src/app -name "*.component.ts" -type f -exec sed -i 's/styleUrls: \[\[\(.*\)\]\]/styleUrls: [\1]/g' {} \;

    echo "✅ Fixed styleUrls arrays"
}

# Fix component exports by regenerating them properly
regenerate_components() {
    echo "🔄 Regenerating component files with correct names..."

    # Image Thumbnail Component
    cat > "src/app/components/image-thumbnail/image-thumbnail.component.ts" << 'EOF'
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-image-thumbnail',
  templateUrl: './image-thumbnail.component.html',
  styleUrls: ['./image-thumbnail.component.scss']
})
export class ImageThumbnailComponent {
  @Input() imageId!: number;
  @Input() alt: string = '';
  @Input() width: number = 150;
  @Input() height: number = 150;

  get thumbnailUrl(): string {
    return `http://localhost:8080/images/${this.imageId}/thumbnail?width=${this.width}&height=${this.height}`;
  }
}
EOF

    # Image Upload Component
    cat > "src/app/components/image-upload/image-upload.component.ts" << 'EOF'
import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-image-upload',
  templateUrl: './image-upload.component.html',
  styleUrls: ['./image-upload.component.scss']
})
export class ImageUploadComponent {
  @Output() filesSelected = new EventEmitter<FileList>();

  onFileSelected(event: any): void {
    const files = event.target.files;
    if (files && files.length > 0) {
      this.filesSelected.emit(files);
    }
  }

  onDragOver(event: DragEvent): void {
    event.preventDefault();
  }

  onDrop(event: DragEvent): void {
    event.preventDefault();
    const files = event.dataTransfer?.files;
    if (files && files.length > 0) {
      this.filesSelected.emit(files);
    }
  }
}
EOF

    # Archive Component
    cat > "src/app/pages/archive/archive.component.ts" << 'EOF'
import { Component, OnInit } from '@angular/core';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-archive',
  templateUrl: './archive.component.html',
  styleUrls: ['./archive.component.scss']
})
export class ArchiveComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadArchivedImages();
  }

  loadArchivedImages(): void {
    // TODO: Implement archived images loading
    this.loading = false;
  }
}
EOF

    # Favorites Component
    cat > "src/app/pages/favorites/favorites.component.ts" << 'EOF'
import { Component, OnInit } from '@angular/core';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-favorites',
  templateUrl: './favorites.component.html',
  styleUrls: ['./favorites.component.scss']
})
export class FavoritesComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadFavoriteImages();
  }

  loadFavoriteImages(): void {
    // TODO: Implement favorite images loading
    this.loading = false;
  }
}
EOF

    # Trash Component
    cat > "src/app/pages/trash/trash.component.ts" << 'EOF'
import { Component, OnInit } from '@angular/core';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-trash',
  templateUrl: './trash.component.html',
  styleUrls: ['./trash.component.scss']
})
export class TrashComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadTrashedImages();
  }

  loadTrashedImages(): void {
    // TODO: Implement trashed images loading
    this.loading = false;
  }
}
EOF

    echo "✅ Regenerated component files"
}

# Create missing template files
create_templates() {
    echo "📄 Creating component templates..."

    # Image Thumbnail Template
    cat > "src/app/components/image-thumbnail/image-thumbnail.component.html" << 'EOF'
<img [src]="thumbnailUrl"
     [alt]="alt"
     [style.width.px]="width"
     [style.height.px]="height"
     style="object-fit: cover; border-radius: 4px;">
EOF

    # Image Upload Template
    cat > "src/app/components/image-upload/image-upload.component.html" << 'EOF'
<div class="upload-area"
     (dragover)="onDragOver($event)"
     (drop)="onDrop($event)">
  <input type="file"
         multiple
         accept="image/*"
         (change)="onFileSelected($event)"
         #fileInput>
  <div class="upload-content">
    <mat-icon>cloud_upload</mat-icon>
    <p>Drag and drop images here or click to select</p>
    <button mat-raised-button color="primary" (click)="fileInput.click()">
      Choose Files
    </button>
  </div>
</div>
EOF

    # Archive Template
    cat > "src/app/pages/archive/archive.component.html" << 'EOF'
<div class="container">
  <h1>Archived Images</h1>

  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
    <p>Loading archived images...</p>
  </div>

  <div *ngIf="error" class="error">
    <p>{{error}}</p>
  </div>

  <div *ngIf="!loading && !error" class="image-grid">
    <app-image-card
      *ngFor="let image of images"
      [image]="image">
    </app-image-card>
  </div>
</div>
EOF

    # Favorites Template
    cat > "src/app/pages/favorites/favorites.component.html" << 'EOF'
<div class="container">
  <h1>Favorite Images</h1>

  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
    <p>Loading favorite images...</p>
  </div>

  <div *ngIf="error" class="error">
    <p>{{error}}</p>
  </div>

  <div *ngIf="!loading && !error" class="image-grid">
    <app-image-card
      *ngFor="let image of images"
      [image]="image">
    </app-image-card>
  </div>
</div>
EOF

    # Trash Template
    cat > "src/app/pages/trash/trash.component.html" << 'EOF'
<div class="container">
  <h1>Trash</h1>

  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
    <p>Loading trashed images...</p>
  </div>

  <div *ngIf="error" class="error">
    <p>{{error}}</p>
  </div>

  <div *ngIf="!loading && !error" class="image-grid">
    <app-image-card
      *ngFor="let image of images"
      [image]="image">
    </app-image-card>
  </div>
</div>
EOF

    echo "✅ Created component templates"
}

# Fix the Material theme SCSS issue
fix_material_theme() {
    echo "🎨 Fixing Material theme..."

    # Backup existing theme
    if [ -f "src/custom-theme.scss" ]; then
        cp "src/custom-theme.scss" "src/custom-theme.scss.backup"
    fi

    # Create clean theme file
    cat > "src/custom-theme.scss" << 'EOF'
@use '@angular/material' as mat;

@include mat.core();

$my-primary: mat.define-palette(mat.$indigo-palette);
$my-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);
$my-warn: mat.define-palette(mat.$red-palette);

$my-theme: mat.define-light-theme((
  color: (
    primary: $my-primary,
    accent: $my-accent,
    warn: $my-warn,
  )
));

@include mat.all-component-themes($my-theme);

/* Custom styles */
html, body {
  height: 100%;
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

.spacer {
  flex: 1 1 auto;
}

.container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.image-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
  gap: 20px;
}

.error {
  color: #f44336;
  text-align: center;
  margin-top: 20px;
  padding: 20px;
  background-color: #ffebee;
  border-radius: 4px;
}

.upload-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px;
  text-align: center;
  margin: 20px 0;
  transition: border-color 0.3s ease;
}

.upload-area:hover {
  border-color: #3f51b5;
}

.upload-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

.image-card {
  max-width: 250px;
  margin: 10px;
}

.image-card img {
  width: 100%;
  height: 200px;
  object-fit: cover;
}
EOF

    echo "✅ Fixed Material theme"
}

# Update main.ts to use module-based bootstrap
fix_main_bootstrap() {
    echo "🚀 Fixing main.ts bootstrap..."

    cat > "src/main.ts" << 'EOF'
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
EOF

    echo "✅ Fixed main.ts"
}

# Add SCSS styles to component files
add_component_styles() {
    echo "🎨 Adding component styles..."

    # Image Upload styles
    cat > "src/app/components/image-upload/image-upload.component.scss" << 'EOF'
.upload-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px;
  text-align: center;
  margin: 20px 0;
  transition: border-color 0.3s ease;
  cursor: pointer;
}

.upload-area:hover {
  border-color: #3f51b5;
}

.upload-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

input[type="file"] {
  display: none;
}
EOF

    echo "✅ Added component styles"
}

# Run all fixes
main() {
    fix_double_arrays
    regenerate_components
    create_templates
    fix_material_theme
    fix_main_bootstrap
    add_component_styles

    echo ""
    echo "🎉 All remaining issues fixed!"
    echo ""
    echo "📋 What was fixed:"
    echo "  • Fixed double array styleUrls issue"
    echo "  • Regenerated all component files with correct exports"
    echo "  • Created missing component templates"
    echo "  • Fixed Material theme SCSS structure"
    echo "  • Updated main.ts to use AppModule"
    echo "  • Added component-specific styles"
    echo ""
    echo "🚦 Now try:"
    echo "  ng serve"
    echo ""
}

main
</file>

<file path="scripts/fix-standalone-components.sh">
#!/bin/bash
# fix-standalone-components.sh

echo "🚀 Fixing standalone components setup..."

# First, let's install the missing dependency
install_dependencies() {
    echo "📦 Installing missing dependencies..."
    npm install @angular/platform-browser-dynamic --save
    echo "✅ Dependencies installed"
}

# Convert to standalone app (recommended for new Angular projects)
create_standalone_app() {
    echo "🔄 Converting to standalone app architecture..."

    # Update main.ts for standalone bootstrap
    cat > "src/main.ts" << 'EOF'
import { bootstrapApplication } from '@angular/platform-browser';
import { importProvidersFrom } from '@angular/core';
import { RouterModule } from '@angular/router';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app/app.component';
import { routes } from './app/app.routes';

bootstrapApplication(AppComponent, {
  providers: [
    importProvidersFrom(
      RouterModule.forRoot(routes),
      BrowserAnimationsModule,
      HttpClientModule
    )
  ]
}).catch((err: any) => console.error(err));
EOF

    # Create app.routes.ts
    cat > "src/app/app.routes.ts" << 'EOF'
import { Routes } from '@angular/router';
import { HomeComponent } from './pages/home/home.component';
import { FavoritesComponent } from './pages/favorites/favorites.component';
import { ArchiveComponent } from './pages/archive/archive.component';
import { TrashComponent } from './pages/trash/trash.component';

export const routes: Routes = [
  { path: '', redirectTo: '/home', pathMatch: 'full' },
  { path: 'home', component: HomeComponent },
  { path: 'favorites', component: FavoritesComponent },
  { path: 'archive', component: ArchiveComponent },
  { path: 'trash', component: TrashComponent },
  { path: '**', redirectTo: '/home' }
];
EOF

    echo "✅ Created standalone app structure"
}

# Update AppComponent to be properly standalone
fix_app_component() {
    echo "🔧 Fixing AppComponent..."

    cat > "src/app/app.component.ts" << 'EOF'
import { Component } from '@angular/core';
import { RouterOutlet, RouterLink } from '@angular/router';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatButtonModule } from '@angular/material/button';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet,
    RouterLink,
    MatToolbarModule,
    MatButtonModule
  ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'photovault-angular';
}
EOF

    echo "✅ Fixed AppComponent"
}

# Update all components to be properly standalone
fix_all_components() {
    echo "🔧 Fixing all components to be standalone..."

    # ImageCardComponent
    cat > "src/app/components/image-card/image-card.component.ts" << 'EOF'
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { ImageThumbnailComponent } from '../image-thumbnail/image-thumbnail.component';
import { Image } from '../../models/image';

@Component({
  selector: 'app-image-card',
  standalone: true,
  imports: [
    CommonModule,
    MatCardModule,
    MatButtonModule,
    MatIconModule,
    ImageThumbnailComponent
  ],
  templateUrl: './image-card.component.html',
  styleUrls: ['./image-card.component.scss']
})
export class ImageCardComponent {
  @Input() image!: Image;
  @Output() toggleFavorite = new EventEmitter<number>();
  @Output() toggleArchive = new EventEmitter<number>();
  @Output() downloadImage = new EventEmitter<{id: number, filename: string}>();
  @Output() deleteImage = new EventEmitter<number>();

  onToggleFavorite(): void {
    this.toggleFavorite.emit(this.image.id);
  }

  onToggleArchive(): void {
    this.toggleArchive.emit(this.image.id);
  }

  onDownload(): void {
    this.downloadImage.emit({
      id: this.image.id,
      filename: this.image.originalFilename
    });
  }

  onDelete(): void {
    this.deleteImage.emit(this.image.id);
  }
}
EOF

    # ImageThumbnailComponent
    cat > "src/app/components/image-thumbnail/image-thumbnail.component.ts" << 'EOF'
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-image-thumbnail',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './image-thumbnail.component.html',
  styleUrls: ['./image-thumbnail.component.scss']
})
export class ImageThumbnailComponent {
  @Input() imageId!: number;
  @Input() alt: string = '';
  @Input() width: number = 150;
  @Input() height: number = 150;

  get thumbnailUrl(): string {
    return `http://localhost:8080/images/${this.imageId}/thumbnail?width=${this.width}&height=${this.height}`;
  }
}
EOF

    # ImageUploadComponent
    cat > "src/app/components/image-upload/image-upload.component.ts" << 'EOF'
import { Component, EventEmitter, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';

@Component({
  selector: 'app-image-upload',
  standalone: true,
  imports: [
    CommonModule,
    MatButtonModule,
    MatIconModule
  ],
  templateUrl: './image-upload.component.html',
  styleUrls: ['./image-upload.component.scss']
})
export class ImageUploadComponent {
  @Output() filesSelected = new EventEmitter<FileList>();

  onFileSelected(event: any): void {
    const files = event.target.files;
    if (files && files.length > 0) {
      this.filesSelected.emit(files);
    }
  }

  onDragOver(event: DragEvent): void {
    event.preventDefault();
  }

  onDrop(event: DragEvent): void {
    event.preventDefault();
    const files = event.dataTransfer?.files;
    if (files && files.length > 0) {
      this.filesSelected.emit(files);
    }
  }
}
EOF

    # HomeComponent
    cat > "src/app/pages/home/home.component.ts" << 'EOF'
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { ImageCardComponent } from '../../components/image-card/image-card.component';
import { ImageUploadComponent } from '../../components/image-upload/image-upload.component';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [
    CommonModule,
    MatProgressSpinnerModule,
    ImageCardComponent,
    ImageUploadComponent
  ],
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadImages();
  }

  loadImages(): void {
    // TODO: Implement image loading
    this.loading = false;
  }
}
EOF

    # FavoritesComponent
    cat > "src/app/pages/favorites/favorites.component.ts" << 'EOF'
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { ImageCardComponent } from '../../components/image-card/image-card.component';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-favorites',
  standalone: true,
  imports: [
    CommonModule,
    MatProgressSpinnerModule,
    ImageCardComponent
  ],
  templateUrl: './favorites.component.html',
  styleUrls: ['./favorites.component.scss']
})
export class FavoritesComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadFavoriteImages();
  }

  loadFavoriteImages(): void {
    // TODO: Implement favorite images loading
    this.loading = false;
  }
}
EOF

    # ArchiveComponent
    cat > "src/app/pages/archive/archive.component.ts" << 'EOF'
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { ImageCardComponent } from '../../components/image-card/image-card.component';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-archive',
  standalone: true,
  imports: [
    CommonModule,
    MatProgressSpinnerModule,
    ImageCardComponent
  ],
  templateUrl: './archive.component.html',
  styleUrls: ['./archive.component.scss']
})
export class ArchiveComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadArchivedImages();
  }

  loadArchivedImages(): void {
    // TODO: Implement archived images loading
    this.loading = false;
  }
}
EOF

    # TrashComponent
    cat > "src/app/pages/trash/trash.component.ts" << 'EOF'
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { ImageCardComponent } from '../../components/image-card/image-card.component';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-trash',
  standalone: true,
  imports: [
    CommonModule,
    MatProgressSpinnerModule,
    ImageCardComponent
  ],
  templateUrl: './trash.component.html',
  styleUrls: ['./trash.component.scss']
})
export class TrashComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadTrashedImages();
  }

  loadTrashedImages(): void {
    // TODO: Implement trashed images loading
    this.loading = false;
  }
}
EOF

    echo "✅ Fixed all components to be standalone"
}

# Fix Material theme with proper function calls
fix_material_theme_functions() {
    echo "🎨 Fixing Material theme functions..."

    cat > "src/custom-theme.scss" << 'EOF'
@use '@angular/material' as mat;

@include mat.core();

$photovault-primary: mat.m2-define-palette(mat.$m2-indigo-palette);
$photovault-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);
$photovault-warn: mat.m2-define-palette(mat.$m2-red-palette);

$photovault-theme: mat.m2-define-light-theme((
  color: (
    primary: $photovault-primary,
    accent: $photovault-accent,
    warn: $photovault-warn,
  ),
  typography: mat.m2-define-typography-config(),
  density: 0,
));

@include mat.all-component-themes($photovault-theme);

/* Custom styles */
html, body {
  height: 100%;
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

.spacer {
  flex: 1 1 auto;
}

.container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.image-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
  gap: 20px;
}

.error {
  color: #f44336;
  text-align: center;
  margin-top: 20px;
  padding: 20px;
  background-color: #ffebee;
  border-radius: 4px;
}

.upload-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px;
  text-align: center;
  margin: 20px 0;
  transition: border-color 0.3s ease;
  cursor: pointer;
}

.upload-area:hover {
  border-color: #3f51b5;
}

.upload-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

.image-card {
  max-width: 250px;
  margin: 10px;
}

.image-card img {
  width: 100%;
  height: 200px;
  object-fit: cover;
}
EOF

    echo "✅ Fixed Material theme functions"
}

# Remove the old NgModule files since we're going standalone
cleanup_old_files() {
    echo "🧹 Cleaning up old module files..."

    # Remove app.module.ts since we're using standalone
    if [ -f "src/app/app.module.ts" ]; then
        rm "src/app/app.module.ts"
        echo "✅ Removed old app.module.ts"
    fi

    # Remove app-routing.module.ts since we're using app.routes.ts
    if [ -f "src/app/app-routing.module.ts" ]; then
        rm "src/app/app-routing.module.ts"
        echo "✅ Removed old app-routing.module.ts"
    fi
}

# Run all fixes
main() {
    install_dependencies
    create_standalone_app
    fix_app_component
    fix_all_components
    fix_material_theme_functions
    cleanup_old_files

    echo ""
    echo "🎉 Standalone components setup completed!"
    echo ""
    echo "📋 What was done:"
    echo "  • Installed missing @angular/platform-browser-dynamic"
    echo "  • Converted to standalone app architecture (modern Angular)"
    echo "  • Updated all components to be standalone with proper imports"
    echo "  • Fixed Material theme with correct function names"
    echo "  • Cleaned up old NgModule files"
    echo "  • Created proper routing with app.routes.ts"
    echo ""
    echo "🚦 Your app is now using the modern Angular standalone approach!"
    echo ""
    echo "Next: ng serve"
    echo ""
}

main
</file>

<file path="scripts/project code base.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  app/
    components/
      image-card/
        image-card.component.html
        image-card.component.ts
        image-card.spec.ts
      image-thumbnail/
        image-thumbnail.component.html
        image-thumbnail.component.scss
        image-thumbnail.component.ts
        image-thumbnail.spec.ts
      image-upload/
        image-upload.component.html
        image-upload.component.scss
        image-upload.component.ts
        image-upload.spec.ts
    core/
      core.module.ts
    features/
      features.module.ts
    models/
      image.ts
    pages/
      archive/
        archive.component.html
        archive.component.scss
        archive.component.ts
        archive.spec.ts
      favorites/
        favorites.component.html
        favorites.component.scss
        favorites.component.ts
        favorites.spec.ts
      home/
        home.component.html
        home.component.ts
        home.spec.ts
      trash/
        trash.component.html
        trash.component.scss
        trash.component.ts
        trash.spec.ts
    services/
      auth.service.ts
      auth.spec.ts
      image.service.ts
      image.spec.ts
    shared/
      shared.module.ts
    app-routing.module.ts
    app.component.html
    app.component.scss
    app.component.ts
    app.config.server.ts
    app.config.ts
    app.module.ts
    app.routes.server.ts
    app.routes.ts
    app.spec.ts
  environments/
    environment.ts
  custom-theme.scss
  index.html
  main.server.ts
  main.ts
  server.ts
  styles.css
.editorconfig
.gitignore
angular.json
package.json
README.md
rename-components.js
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/app/components/image-card/image-card.component.html">
<mat-card class="image-card">
  <app-image-thumbnail
    [imageId]="image.id"
    [alt]="image.originalFilename"
    width="200"
    height="200">
  </app-image-thumbnail>

  <mat-card-actions>
    <button mat-icon-button
            (click)="onToggleFavorite()"
            [color]="image.isFavorite ? 'warn' : 'primary'">
      <mat-icon>{{image.isFavorite ? 'favorite' : 'favorite_border'}}</mat-icon>
    </button>

    <button mat-icon-button (click)="onDownload()">
      <mat-icon>download</mat-icon>
    </button>

    <button mat-icon-button (click)="onToggleArchive()">
      <mat-icon>archive</mat-icon>
    </button>

    <button mat-icon-button (click)="onDelete()">
      <mat-icon>delete</mat-icon>
    </button>
  </mat-card-actions>
</mat-card>
</file>

<file path="src/app/components/image-card/image-card.component.ts">
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Image } from '../../models/image';

@Component({
  selector: 'app-image-card',
  templateUrl: './image-card.component.html',
  styleUrls: ['./image-card.component.scss']
})
export class ImageCardComponent {
  @Input() image!: Image;
  @Output() toggleFavorite = new EventEmitter<number>();
  @Output() toggleArchive = new EventEmitter<number>();
  @Output() downloadImage = new EventEmitter<{id: number, filename: string}>();
  @Output() deleteImage = new EventEmitter<number>();

  onToggleFavorite(): void {
    this.toggleFavorite.emit(this.image.id);
  }

  onToggleArchive(): void {
    this.toggleArchive.emit(this.image.id);
  }

  onDownload(): void {
    this.downloadImage.emit({
      id: this.image.id,
      filename: this.image.originalFilename
    });
  }

  onDelete(): void {
    this.deleteImage.emit(this.image.id);
  }
}
</file>

<file path="src/app/components/image-card/image-card.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ImageCardComponent } from './image-card.component';

describe('ImageCard', () => {
  let component: ImageCardComponent;
  let fixture: ComponentFixture<ImageCardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ImageCardComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ImageCardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/image-thumbnail/image-thumbnail.component.html">
<p>image-thumbnail works!</p>
</file>

<file path="src/app/components/image-thumbnail/image-thumbnail.component.scss">
/* Component styles */
</file>

<file path="src/app/components/image-thumbnail/image-thumbnail.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-image-thumbnail',
  imports: [],
  templateUrl: './image-thumbnail.component.html',
  styleUrls: ['./image-thumbnail.component.scss']
})
export class ImageThumbnailComponent {

}
</file>

<file path="src/app/components/image-thumbnail/image-thumbnail.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ImageThumbnailComponent } from './image-thumbnail.component';

describe('ImageThumbnail', () => {
  let component: ImageThumbnailComponent;
  let fixture: ComponentFixture<ImageThumbnailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ImageThumbnailComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ImageThumbnailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/image-upload/image-upload.component.html">
<p>image-upload works!</p>
</file>

<file path="src/app/components/image-upload/image-upload.component.scss">
/* Component styles */
</file>

<file path="src/app/components/image-upload/image-upload.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-image-upload',
  imports: [],
  templateUrl: './image-upload.component.html',
  styleUrls: ['./image-upload.component.scss']
})
export class ImageUploadComponent {

}
</file>

<file path="src/app/components/image-upload/image-upload.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ImageUploadComponent } from './image-upload.component';

describe('ImageUpload', () => {
  let component: ImageUploadComponent;
  let fixture: ComponentFixture<ImageUploadComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ImageUploadComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ImageUploadComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/core.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';



@NgModule({
  declarations: [],
  imports: [
    CommonModule
  ]
})
export class CoreModule { }
</file>

<file path="src/app/features/features.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';



@NgModule({
  declarations: [],
  imports: [
    CommonModule
  ]
})
export class FeaturesModule { }
</file>

<file path="src/app/models/image.ts">
export interface Image {
  id: number;
  filename: string;
  storedFilename: string;
  originalFilename: string;
  filePath: string;
  fileSize: number;
  contentType: string;
  uploadDate: string;
  isFavorite: boolean;
  isArchived: boolean;
  isDeleted: boolean;
}

export interface ImageStats {
  totalImages: number;
  favorites: number;
  archived: number;
  trash: number;
}
</file>

<file path="src/app/pages/archive/archive.component.html">
<p>archive works!</p>
</file>

<file path="src/app/pages/archive/archive.component.scss">
/* Component styles */
</file>

<file path="src/app/pages/archive/archive.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-archive',
  imports: [],
  templateUrl: './archive.component.html',
  styleUrls: ['./archive.component.scss']
})
export class ArchiveComponent {

}
</file>

<file path="src/app/pages/archive/archive.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Archive } from './archive';

describe('Archive', () => {
  let component: Archive;
  let fixture: ComponentFixture<Archive>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Archive]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Archive);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/pages/favorites/favorites.component.html">
<p>favorites works!</p>
</file>

<file path="src/app/pages/favorites/favorites.component.scss">
/* Component styles */
</file>

<file path="src/app/pages/favorites/favorites.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-favorites',
  imports: [],
  templateUrl: './favorites.component.html',
  styleUrls: ['./favorites.component.scss']
})
export class FavoritesComponent {

}
</file>

<file path="src/app/pages/favorites/favorites.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Favorites } from './favorites';

describe('Favorites', () => {
  let component: Favorites;
  let fixture: ComponentFixture<Favorites>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Favorites]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Favorites);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/pages/home/home.component.html">
<p>home works!</p>
</file>

<file path="src/app/pages/home/home.component.ts">
import { Component, OnInit, OnDestroy } from '@angular/core';
import { Subject, debounceTime, distinctUntilChanged, takeUntil } from 'rxjs';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent implements OnInit, OnDestroy {
  images: Image[] = [];
  filteredImages: Image[] = [];
  loading = true;
  error: string | null = null;
  searchQuery = '';
  uploadDialogOpen = false;

  private destroy$ = new Subject<void>();
  private searchSubject = new Subject<string>();

  constructor(private imageService: ImageService) {
    // Setup debounced search
    this.searchSubject.pipe(
      debounceTime(300),
      distinctUntilChanged(),
      takeUntil(this.destroy$)
    ).subscribe(query => {
      this.filterImages(query);
    });
  }

  ngOnInit(): void {
    this.loadImages();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  loadImages(): void {
    this.loading = true;
    this.imageService.getAllImages().subscribe({
      next: (response) => {
        this.images = response.data.content || response.data;
        this.filteredImages = [...this.images];
        this.loading = false;
      },
      error: (err) => {
        this.error = err.response?.data?.error || 'Failed to load images';
        this.loading = false;
      }
    });
  }

  onSearchChange(query: string): void {
    this.searchSubject.next(query);
  }

  private filterImages(query: string): void {
    if (!query.trim()) {
      this.filteredImages = [...this.images];
    } else {
      this.filteredImages = this.images.filter(image =>
        image.originalFilename.toLowerCase().includes(query.toLowerCase())
      );
    }
  }

  onToggleFavorite(imageId: number): void {
    this.imageService.toggleFavorite(imageId).subscribe({
      next: () => this.loadImages(),
      error: (err) => this.error = 'Failed to update favorite'
    });
  }

  // Add other event handlers...
}
</file>

<file path="src/app/pages/home/home.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Home } from './home';

describe('Home', () => {
  let component: Home;
  let fixture: ComponentFixture<Home>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Home]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Home);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/pages/trash/trash.component.html">
<p>trash works!</p>
</file>

<file path="src/app/pages/trash/trash.component.scss">
/* Component styles */
</file>

<file path="src/app/pages/trash/trash.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-trash',
  imports: [],
  templateUrl: './trash.component.html',
  styleUrls: ['./trash.component.scss']
})
export class TrashComponent {

}
</file>

<file path="src/app/pages/trash/trash.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Trash } from './trash';

describe('Trash', () => {
  let component: Trash;
  let fixture: ComponentFixture<Trash>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Trash]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Trash);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/services/auth.service.ts">
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  
}
</file>

<file path="src/app/services/auth.spec.ts">
import { TestBed } from '@angular/core/testing';

import { Auth } from './auth';

describe('Auth', () => {
  let service: Auth;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(Auth);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/services/image.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';
import { Image, ImageStats } from '../models/image';

@Injectable({
  providedIn: 'root'
})
export class ImageService {
  private apiUrl = environment.apiUrl || 'http://localhost:8080';

  constructor(private http: HttpClient) {}

  testConnection(): Observable<string> {
    return this.http.get<string>(`${this.apiUrl}/health`);
  }

  uploadImage(file: File): Observable<any> {
    const formData = new FormData();
    formData.append('file', file);
    return this.http.post(`${this.apiUrl}/images/upload`, formData);
  }

  getAllImages(page = 0, size = 10): Observable<any> {
    return this.http.get(`${this.apiUrl}/images?page=${page}&size=${size}`);
  }

  downloadImage(id: number): Observable<Blob> {
    return this.http.get(`${this.apiUrl}/images/${id}/download`, {
      responseType: 'blob'
    });
  }

  toggleFavorite(id: number): Observable<any> {
    return this.http.put(`${this.apiUrl}/images/${id}/favorite`, {});
  }

  deleteImage(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/images/${id}`);
  }

  getStats(): Observable<ImageStats> {
    return this.http.get<ImageStats>(`${this.apiUrl}/images/stats`);
  }

  // Add other methods...
}
</file>

<file path="src/app/services/image.spec.ts">
import { TestBed } from '@angular/core/testing';

import { ImageService } from './image.service';

describe('Image', () => {
  let service: ImageService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ImageService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/shared/shared.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';



@NgModule({
  declarations: [],
  imports: [
    CommonModule
  ]
})
export class SharedModule { }
</file>

<file path="src/app/app-routing.module.ts">
// photovault-angular/src/app/app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  // Define your routes here
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
</file>

<file path="src/app/app.component.html">
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->
<!-- * * * * * * * to get started with your project! * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->

<style>
  :host {
    --bright-blue: oklch(51.01% 0.274 263.83);
    --electric-violet: oklch(53.18% 0.28 296.97);
    --french-violet: oklch(47.66% 0.246 305.88);
    --vivid-pink: oklch(69.02% 0.277 332.77);
    --hot-red: oklch(61.42% 0.238 15.34);
    --orange-red: oklch(63.32% 0.24 31.68);

    --gray-900: oklch(19.37% 0.006 300.98);
    --gray-700: oklch(36.98% 0.014 302.71);
    --gray-400: oklch(70.9% 0.015 304.04);

    --red-to-pink-to-purple-vertical-gradient: linear-gradient(
      180deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(
      90deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --pill-accent: var(--bright-blue);

    font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1 {
    font-size: 3.125rem;
    color: var(--gray-900);
    font-weight: 500;
    line-height: 100%;
    letter-spacing: -0.125rem;
    margin: 0;
    font-family: "Inter Tight", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
  }

  p {
    margin: 0;
    color: var(--gray-700);
  }

  main {
    width: 100%;
    min-height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    box-sizing: inherit;
    position: relative;
  }

  .angular-logo {
    max-width: 9.2rem;
  }

  .content {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 700px;
    margin-bottom: 3rem;
  }

  .content h1 {
    margin-top: 1.75rem;
  }

  .content p {
    margin-top: 1.5rem;
  }

  .divider {
    width: 1px;
    background: var(--red-to-pink-to-purple-vertical-gradient);
    margin-inline: 0.5rem;
  }

  .pill-group {
    display: flex;
    flex-direction: column;
    align-items: start;
    flex-wrap: wrap;
    gap: 1.25rem;
  }

  .pill {
    display: flex;
    align-items: center;
    --pill-accent: var(--bright-blue);
    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);
    color: var(--pill-accent);
    padding-inline: 0.75rem;
    padding-block: 0.375rem;
    border-radius: 2.75rem;
    border: 0;
    transition: background 0.3s ease;
    font-family: var(--inter-font);
    font-size: 0.875rem;
    font-style: normal;
    font-weight: 500;
    line-height: 1.4rem;
    letter-spacing: -0.00875rem;
    text-decoration: none;
    white-space: nowrap;
  }

  .pill:hover {
    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);
  }

  .pill-group .pill:nth-child(6n + 1) {
    --pill-accent: var(--bright-blue);
  }
  .pill-group .pill:nth-child(6n + 2) {
    --pill-accent: var(--electric-violet);
  }
  .pill-group .pill:nth-child(6n + 3) {
    --pill-accent: var(--french-violet);
  }

  .pill-group .pill:nth-child(6n + 4),
  .pill-group .pill:nth-child(6n + 5),
  .pill-group .pill:nth-child(6n + 6) {
    --pill-accent: var(--hot-red);
  }

  .pill-group svg {
    margin-inline-start: 0.25rem;
  }

  .social-links {
    display: flex;
    align-items: center;
    gap: 0.73rem;
    margin-top: 1.5rem;
  }

  .social-links path {
    transition: fill 0.3s ease;
    fill: var(--gray-400);
  }

  .social-links a:hover svg path {
    fill: var(--gray-900);
  }

  @media screen and (max-width: 650px) {
    .content {
      flex-direction: column;
      width: max-content;
    }

    .divider {
      height: 1px;
      width: 100%;
      background: var(--red-to-pink-to-purple-horizontal-gradient);
      margin-block: 1.5rem;
    }
  }
</style>

<main class="main">
  <div class="content">
    <div class="left-side">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 982 239"
        fill="none"
        class="angular-logo"
      >
        <g clip-path="url(#a)">
          <path
            fill="url(#b)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
          <path
            fill="url(#c)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
        </g>
        <defs>
          <radialGradient
            id="c"
            cx="0"
            cy="0"
            r="1"
            gradientTransform="rotate(118.122 171.182 60.81) scale(205.794)"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#FF41F8" />
            <stop offset=".707" stop-color="#FF41F8" stop-opacity=".5" />
            <stop offset="1" stop-color="#FF41F8" stop-opacity="0" />
          </radialGradient>
          <linearGradient
            id="b"
            x1="0"
            x2="982"
            y1="192"
            y2="192"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#F0060B" />
            <stop offset="0" stop-color="#F0070C" />
            <stop offset=".526" stop-color="#CC26D5" />
            <stop offset="1" stop-color="#7702FF" />
          </linearGradient>
          <clipPath id="a"><path fill="#fff" d="M0 0h982v239H0z" /></clipPath>
        </defs>
      </svg>
      <h1>Hello, {{ title() }}</h1>
      <p>Congratulations! Your app is running. 🎉</p>
    </div>
    <div class="divider" role="separator" aria-label="Divider"></div>
    <div class="right-side">
      <div class="pill-group">
        @for (item of [
          { title: 'Explore the Docs', link: 'https://angular.dev' },
          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },
          { title: 'Prompt and best practices for AI', link: 'https://angular.dev/ai/develop-with-ai'},
          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },
          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },
          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },
        ]; track item.title) {
          <a
            class="pill"
            [href]="item.link"
            target="_blank"
            rel="noopener"
          >
            <span>{{ item.title }}</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="14"
              viewBox="0 -960 960 960"
              width="14"
              fill="currentColor"
            >
              <path
                d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z"
              />
            </svg>
          </a>
        }
      </div>
      <div class="social-links">
        <a
          href="https://github.com/angular/angular"
          aria-label="Github"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="25"
            height="24"
            viewBox="0 0 25 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Github"
          >
            <path
              d="M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z"
            />
          </svg>
        </a>
        <a
          href="https://twitter.com/angular"
          aria-label="Twitter"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Twitter"
          >
            <path
              d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
            />
          </svg>
        </a>
        <a
          href="https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw"
          aria-label="Youtube"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="29"
            height="20"
            viewBox="0 0 29 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Youtube"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z"
            />
          </svg>
        </a>
      </div>
    </div>
  </div>
</main>

<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->


<router-outlet />
</file>

<file path="src/app/app.component.scss">
/* Component styles */
</file>

<file path="src/app/app.component.ts">
import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  protected readonly title = signal('photovault-angular');
}

export class AppComponentComponent {
  title = 'photovault-angular';
}
</file>

<file path="src/app/app.config.server.ts">
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering, withRoutes } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(withRoutes(serverRoutes))
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);
</file>

<file path="src/app/app.config.ts">
import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZonelessChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';

export const appConfig: ApplicationConfig = {
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZonelessChangeDetection(),
    provideRouter(routes), provideClientHydration(withEventReplay())
  ]
};
</file>

<file path="src/app/app.module.ts">
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HttpClientModule } from '@angular/common/http';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';

// Material imports
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatDialogModule } from '@angular/material/dialog';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatGridListModule } from '@angular/material/grid-list';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [

    // Add your components here
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    HttpClientModule,
    ReactiveFormsModule,
    FormsModule,
    // Material modules
    MatToolbarModule,
    MatButtonModule,
    MatCardModule,
    MatIconModule,
    MatInputModule,
    MatProgressSpinnerModule,
    MatDialogModule,
    MatSnackBarModule,
    MatGridListModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
</file>

<file path="src/app/app.routes.server.ts">
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];
</file>

<file path="src/app/app.routes.ts">
import { Routes } from '@angular/router';

export const routes: Routes = [];
</file>

<file path="src/app/app.spec.ts">
import { provideZonelessChangeDetection } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { App } from './app';

describe('App', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [App],
      providers: [provideZonelessChangeDetection()]
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(App);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(App);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, photovault-angular');
  });
});
</file>

<file path="src/environments/environment.ts">
export const environment = {
  production: false,
  apiUrl: 'http://localhost:8080'
};
</file>

<file path="src/custom-theme.scss">
// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: (
      primary: mat.$azure-palette,
      tertiary: mat.$blue-palette,
    ),
    typography: Roboto,
    density: 0,
  ));

  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);
}
// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: (
      primary: mat.$azure-palette,
      tertiary: mat.$blue-palette,
    ),
    typography: Roboto,
    density: 0,
  ));

  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);
}
</file>

<file path="src/index.html">
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>PhotovaultAngular</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <app-root></app-root>
</body>
</html>
</file>

<file path="src/main.server.ts">
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { config } from './app/app.config.server';

const bootstrap = () => bootstrapApplication(AppComponent, config);

export default bootstrap;
</file>

<file path="src/main.ts">
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));
</file>

<file path="src/server.ts">
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { join } from 'node:path';

const browserDistFolder = join(import.meta.dirname, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/{*splat}', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use((req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, (error) => {
    if (error) {
      throw error;
    }

    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);
</file>

<file path="src/styles.css">
/* You can add global styles to this file, and also import other style files */

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }
</file>

<file path=".editorconfig">
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false
</file>

<file path=".gitignore">
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db
</file>

<file path="angular.json">
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "photovault-angular": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular/build:application",
          "options": {
            "browser": "src/main.ts",
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/custom-theme.scss",
              "src/styles.css"
            ],
            "server": "src/main.server.ts",
            "outputMode": "server",
            "ssr": {
              "entry": "src/server.ts"
            }
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular/build:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "photovault-angular:build:production"
            },
            "development": {
              "buildTarget": "photovault-angular:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular/build:extract-i18n"
        },
        "test": {
          "builder": "@angular/build:karma",
          "options": {
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ]
          }
        }
      }
    }
  }
}
</file>

<file path="package.json">
{
  "name": "photovault-angular",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "serve:ssr:photovault-angular": "node dist/photovault-angular/server/server.mjs"
  },
  "prettier": {
    "overrides": [
      {
        "files": "*.html",
        "options": {
          "parser": "angular"
        }
      }
    ]
  },
  "private": true,
  "dependencies": {
    "@angular/cdk": "^20.1.3",
    "@angular/common": "^20.1.0",
    "@angular/compiler": "^20.1.0",
    "@angular/core": "^20.1.0",
    "@angular/forms": "^20.1.0",
    "@angular/material": "^20.1.3",
    "@angular/platform-browser": "^20.1.0",
    "@angular/platform-server": "^20.1.0",
    "@angular/router": "^20.1.0",
    "@angular/ssr": "^20.1.2",
    "axios": "^1.11.0",
    "express": "^5.1.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0"
  },
  "devDependencies": {
    "@angular/build": "^20.1.2",
    "@angular/cli": "^20.1.2",
    "@angular/compiler-cli": "^20.1.0",
    "@types/express": "^5.0.1",
    "@types/jasmine": "~5.1.0",
    "@types/node": "^20.17.19",
    "jasmine-core": "~5.8.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.8.2"
  }
}
</file>

<file path="README.md">
# PhotovaultAngular

This project was generated using [Angular CLI](https://github.com/angular/angular-cli) version 20.1.2.

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.
</file>

<file path="rename-components.js">
const fs = require('fs');
const path = require('path');

// Define the correct file mappings
const fileMappings = [
  // Models (remove .component)
  {
    from: 'src/app/models/image.component.ts',
    to: 'src/app/models/image.ts'
  },

  // Services (fix naming)
  {
    from: 'src/app/services/auth.component.ts',
    to: 'src/app/services/auth.service.ts'
  },

  // Config files (remove .component)
  {
    from: 'src/app/app.config.component.ts',
    to: 'src/app/app.config.ts'
  },
  {
    from: 'src/app/app.config.server.component.ts',
    to: 'src/app/app.config.server.ts'
  },
  {
    from: 'src/app/app.routes.component.ts',
    to: 'src/app/app.routes.ts'
  },
  {
    from: 'src/app/app.routes.server.component.ts',
    to: 'src/app/app.routes.server.ts'
  },

  // Modules (fix naming)
  {
    from: 'src/app/core/core-module.component.ts',
    to: 'src/app/core/core.module.ts'
  },
  {
    from: 'src/app/features/features-module.component.ts',
    to: 'src/app/features/features.module.ts'
  },
  {
    from: 'src/app/shared/shared-module.component.ts',
    to: 'src/app/shared/shared.module.ts'
  },

  // HTML files (add .component)
  {
    from: 'src/app/components/image-card/image-card.html',
    to: 'src/app/components/image-card/image-card.component.html'
  },
  {
    from: 'src/app/components/image-thumbnail/image-thumbnail.html',
    to: 'src/app/components/image-thumbnail/image-thumbnail.component.html'
  },
  {
    from: 'src/app/components/image-upload/image-upload.html',
    to: 'src/app/components/image-upload/image-upload.component.html'
  },
  {
    from: 'src/app/pages/archive/archive.html',
    to: 'src/app/pages/archive/archive.component.html'
  },
  {
    from: 'src/app/pages/favorites/favorites.html',
    to: 'src/app/pages/favorites/favorites.component.html'
  },
  {
    from: 'src/app/pages/home/home.html',
    to: 'src/app/pages/home/home.component.html'
  },
  {
    from: 'src/app/pages/trash/trash.html',
    to: 'src/app/pages/trash/trash.component.html'
  },
  {
    from: 'src/app/app.html',
    to: 'src/app/app.component.html'
  }
];

// Content replacements for fixing class names and references
const contentReplacements = [
  // Fix class names
  {
    file: 'src/app/components/image-thumbnail/image-thumbnail.component.ts',
    replacements: [
      { from: 'export class ImageThumbnail', to: 'export class ImageThumbnailComponent' },
      { from: "templateUrl: './image-thumbnail.html'", to: "templateUrl: './image-thumbnail.component.html'" },
      { from: "styleUrl: './image-thumbnail.css'", to: "styleUrls: ['./image-thumbnail.component.scss']" }
    ]
  },
  {
    file: 'src/app/components/image-upload/image-upload.component.ts',
    replacements: [
      { from: 'export class ImageUpload', to: 'export class ImageUploadComponent' },
      { from: "templateUrl: './image-upload.html'", to: "templateUrl: './image-upload.component.html'" },
      { from: "styleUrl: './image-upload.css'", to: "styleUrls: ['./image-upload.component.scss']" }
    ]
  },
  {
    file: 'src/app/pages/archive/archive.component.ts',
    replacements: [
      { from: 'export class Archive', to: 'export class ArchiveComponent' },
      { from: "templateUrl: './archive.html'", to: "templateUrl: './archive.component.html'" },
      { from: "styleUrl: './archive.css'", to: "styleUrls: ['./archive.component.scss']" }
    ]
  },
  {
    file: 'src/app/pages/favorites/favorites.component.ts',
    replacements: [
      { from: 'export class Favorites', to: 'export class FavoritesComponent' },
      { from: "templateUrl: './favorites.html'", to: "templateUrl: './favorites.component.html'" },
      { from: "styleUrl: './favorites.css'", to: "styleUrls: ['./favorites.component.scss']" }
    ]
  },
  {
    file: 'src/app/pages/home/home.component.ts',
    replacements: [
      { from: "templateUrl: './home.component.html'", to: "templateUrl: './home.component.html'" },
      { from: "styleUrls: ['./home.component.scss']", to: "styleUrls: ['./home.component.scss']" }
    ]
  },
  {
    file: 'src/app/pages/trash/trash.component.ts',
    replacements: [
      { from: 'export class Trash', to: 'export class TrashComponent' },
      { from: "templateUrl: './trash.html'", to: "templateUrl: './trash.component.html'" },
      { from: "styleUrl: './trash.css'", to: "styleUrls: ['./trash.component.scss']" }
    ]
  },
  {
    file: 'src/app/services/auth.service.ts',
    replacements: [
      { from: 'export class Auth', to: 'export class AuthService' }
    ]
  },
  {
    file: 'src/app/app.component.ts',
    replacements: [
      { from: 'export class App', to: 'export class AppComponent' },
      { from: "templateUrl: './app.component.html'", to: "templateUrl: './app.component.html'" },
      { from: "styleUrl: './app.css'", to: "styleUrls: ['./app.component.scss']" }
    ]
  }
];

// Test file updates
const testFileUpdates = [
  {
    file: 'src/app/components/image-card/image-card.spec.ts',
    replacements: [
      { from: "import { ImageCard } from './image-card';", to: "import { ImageCardComponent } from './image-card.component';" },
      { from: 'let component: ImageCard;', to: 'let component: ImageCardComponent;' },
      { from: 'let fixture: ComponentFixture<ImageCard>;', to: 'let fixture: ComponentFixture<ImageCardComponent>;' },
      { from: 'imports: [ImageCard]', to: 'imports: [ImageCardComponent]' },
      { from: 'fixture = TestBed.createComponent(ImageCard);', to: 'fixture = TestBed.createComponent(ImageCardComponent);' }
    ]
  },
  {
    file: 'src/app/components/image-thumbnail/image-thumbnail.spec.ts',
    replacements: [
      { from: "import { ImageThumbnail } from './image-thumbnail';", to: "import { ImageThumbnailComponent } from './image-thumbnail.component';" },
      { from: 'let component: ImageThumbnail;', to: 'let component: ImageThumbnailComponent;' },
      { from: 'let fixture: ComponentFixture<ImageThumbnail>;', to: 'let fixture: ComponentFixture<ImageThumbnailComponent>;' },
      { from: 'imports: [ImageThumbnail]', to: 'imports: [ImageThumbnailComponent]' },
      { from: 'fixture = TestBed.createComponent(ImageThumbnail);', to: 'fixture = TestBed.createComponent(ImageThumbnailComponent);' }
    ]
  },
  {
    file: 'src/app/components/image-upload/image-upload.spec.ts',
    replacements: [
      { from: "import { ImageUpload } from './image-upload';", to: "import { ImageUploadComponent } from './image-upload.component';" },
      { from: 'let component: ImageUpload;', to: 'let component: ImageUploadComponent;' },
      { from: 'let fixture: ComponentFixture<ImageUpload>;', to: 'let fixture: ComponentFixture<ImageUploadComponent>;' },
      { from: 'imports: [ImageUpload]', to: 'imports: [ImageUploadComponent]' },
      { from: 'fixture = TestBed.createComponent(ImageUpload);', to: 'fixture = TestBed.createComponent(ImageUploadComponent);' }
    ]
  }
  // Add similar patterns for other test files...
];

function renameFiles() {
  console.log('🔄 Starting file renames...\n');

  fileMappings.forEach(mapping => {
    if (fs.existsSync(mapping.from)) {
      // Create directory if it doesn't exist
      const dir = path.dirname(mapping.to);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      fs.renameSync(mapping.from, mapping.to);
      console.log(`✅ Renamed: ${mapping.from} → ${mapping.to}`);
    } else {
      console.log(`⚠️  File not found: ${mapping.from}`);
    }
  });
}

function updateFileContents() {
  console.log('\n🔄 Updating file contents...\n');

  contentReplacements.forEach(fileUpdate => {
    if (fs.existsSync(fileUpdate.file)) {
      let content = fs.readFileSync(fileUpdate.file, 'utf8');
      let changed = false;

      fileUpdate.replacements.forEach(replacement => {
        if (content.includes(replacement.from)) {
          content = content.replace(new RegExp(replacement.from, 'g'), replacement.to);
          changed = true;
        }
      });

      if (changed) {
        fs.writeFileSync(fileUpdate.file, content);
        console.log(`✅ Updated content: ${fileUpdate.file}`);
      }
    } else {
      console.log(`⚠️  File not found: ${fileUpdate.file}`);
    }
  });
}

function updateTestFiles() {
  console.log('\n🔄 Updating test files...\n');

  testFileUpdates.forEach(fileUpdate => {
    if (fs.existsSync(fileUpdate.file)) {
      let content = fs.readFileSync(fileUpdate.file, 'utf8');
      let changed = false;

      fileUpdate.replacements.forEach(replacement => {
        if (content.includes(replacement.from)) {
          content = content.replace(new RegExp(replacement.from.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), replacement.to);
          changed = true;
        }
      });

      if (changed) {
        fs.writeFileSync(fileUpdate.file, content);
        console.log(`✅ Updated test file: ${fileUpdate.file}`);
      }
    } else {
      console.log(`⚠️  Test file not found: ${fileUpdate.file}`);
    }
  });
}

function createMissingStyleFiles() {
  console.log('\n🔄 Creating missing SCSS files...\n');

  const scssFiles = [
    'src/app/components/image-thumbnail/image-thumbnail.component.scss',
    'src/app/components/image-upload/image-upload.component.scss',
    'src/app/pages/archive/archive.component.scss',
    'src/app/pages/favorites/favorites.component.scss',
    'src/app/pages/trash/trash.component.scss',
    'src/app/app.component.scss'
  ];

  scssFiles.forEach(file => {
    if (!fs.existsSync(file)) {
      const dir = path.dirname(file);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      fs.writeFileSync(file, '/* Component styles */\n');
      console.log(`✅ Created: ${file}`);
    }
  });
}

function updateImportStatements() {
  console.log('\n🔄 Updating import statements...\n');

  // Update main.ts
  const mainFile = 'src/main.ts';
  if (fs.existsSync(mainFile)) {
    let content = fs.readFileSync(mainFile, 'utf8');
    content = content.replace("import { App } from './app/app';", "import { AppComponent } from './app/app.component';");
    content = content.replace('bootstrapApplication(App, appConfig)', 'bootstrapApplication(AppComponent, appConfig)');
    fs.writeFileSync(mainFile, content);
    console.log(`✅ Updated: ${mainFile}`);
  }

  // Update main.server.ts
  const mainServerFile = 'src/main.server.ts';
  if (fs.existsSync(mainServerFile)) {
    let content = fs.readFileSync(mainServerFile, 'utf8');
    content = content.replace("import { App } from './app/app';", "import { AppComponent } from './app/app.component';");
    content = content.replace('const bootstrap = () => bootstrapApplication(App, config);', 'const bootstrap = () => bootstrapApplication(AppComponent, config);');
    fs.writeFileSync(mainServerFile, content);
    console.log(`✅ Updated: ${mainServerFile}`);
  }
}

// Run all fixes
console.log('🚀 Starting Angular naming convention fixes...\n');

try {
  renameFiles();
  updateFileContents();
  updateTestFiles();
  createMissingStyleFiles();
  updateImportStatements();

  console.log('\n🎉 All naming convention fixes completed successfully!');
  console.log('\n📝 Next steps:');
  console.log('1. Update your app.module.ts declarations with the new component names');
  console.log('2. Update any routing files with the new component names');
  console.log('3. Run: ng build to check for any remaining issues');
  console.log('4. Run: ng test to verify tests still work');

} catch (error) {
  console.error('❌ Error during fixes:', error);
}
</file>

<file path="tsconfig.app.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": [
      "node"
    ]
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "src/**/*.spec.ts"
  ]
}
</file>

<file path="tsconfig.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "experimentalDecorators": true,
    "importHelpers": true,
    "target": "ES2022",
    "module": "preserve"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "typeCheckHostBindings": true,
    "strictTemplates": true
  },
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}
</file>

<file path="tsconfig.spec.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.ts"
  ]
}
</file>

</files>
</file>

<file path="scripts/rename-components.js">
const fs = require('fs');
const path = require('path');

// Define the correct file mappings
const fileMappings = [
  // Models (remove .component)
  {
    from: 'src/app/models/image.component.ts',
    to: 'src/app/models/image.ts'
  },

  // Services (fix naming)
  {
    from: 'src/app/services/auth.component.ts',
    to: 'src/app/services/auth.service.ts'
  },

  // Config files (remove .component)
  {
    from: 'src/app/app.config.component.ts',
    to: 'src/app/app.config.ts'
  },
  {
    from: 'src/app/app.config.server.component.ts',
    to: 'src/app/app.config.server.ts'
  },
  {
    from: 'src/app/app.routes.component.ts',
    to: 'src/app/app.routes.ts'
  },
  {
    from: 'src/app/app.routes.server.component.ts',
    to: 'src/app/app.routes.server.ts'
  },

  // Modules (fix naming)
  {
    from: 'src/app/core/core-module.component.ts',
    to: 'src/app/core/core.module.ts'
  },
  {
    from: 'src/app/features/features-module.component.ts',
    to: 'src/app/features/features.module.ts'
  },
  {
    from: 'src/app/shared/shared-module.component.ts',
    to: 'src/app/shared/shared.module.ts'
  },

  // HTML files (add .component)
  {
    from: 'src/app/components/image-card/image-card.html',
    to: 'src/app/components/image-card/image-card.component.html'
  },
  {
    from: 'src/app/components/image-thumbnail/image-thumbnail.html',
    to: 'src/app/components/image-thumbnail/image-thumbnail.component.html'
  },
  {
    from: 'src/app/components/image-upload/image-upload.html',
    to: 'src/app/components/image-upload/image-upload.component.html'
  },
  {
    from: 'src/app/pages/archive/archive.html',
    to: 'src/app/pages/archive/archive.component.html'
  },
  {
    from: 'src/app/pages/favorites/favorites.html',
    to: 'src/app/pages/favorites/favorites.component.html'
  },
  {
    from: 'src/app/pages/home/home.html',
    to: 'src/app/pages/home/home.component.html'
  },
  {
    from: 'src/app/pages/trash/trash.html',
    to: 'src/app/pages/trash/trash.component.html'
  },
  {
    from: 'src/app/app.html',
    to: 'src/app/app.component.html'
  }
];

// Content replacements for fixing class names and references
const contentReplacements = [
  // Fix class names
  {
    file: 'src/app/components/image-thumbnail/image-thumbnail.component.ts',
    replacements: [
      { from: 'export class ImageThumbnail', to: 'export class ImageThumbnailComponent' },
      { from: "templateUrl: './image-thumbnail.html'", to: "templateUrl: './image-thumbnail.component.html'" },
      { from: "styleUrl: './image-thumbnail.css'", to: "styleUrls: ['./image-thumbnail.component.scss']" }
    ]
  },
  {
    file: 'src/app/components/image-upload/image-upload.component.ts',
    replacements: [
      { from: 'export class ImageUpload', to: 'export class ImageUploadComponent' },
      { from: "templateUrl: './image-upload.html'", to: "templateUrl: './image-upload.component.html'" },
      { from: "styleUrl: './image-upload.css'", to: "styleUrls: ['./image-upload.component.scss']" }
    ]
  },
  {
    file: 'src/app/pages/archive/archive.component.ts',
    replacements: [
      { from: 'export class Archive', to: 'export class ArchiveComponent' },
      { from: "templateUrl: './archive.html'", to: "templateUrl: './archive.component.html'" },
      { from: "styleUrl: './archive.css'", to: "styleUrls: ['./archive.component.scss']" }
    ]
  },
  {
    file: 'src/app/pages/favorites/favorites.component.ts',
    replacements: [
      { from: 'export class Favorites', to: 'export class FavoritesComponent' },
      { from: "templateUrl: './favorites.html'", to: "templateUrl: './favorites.component.html'" },
      { from: "styleUrl: './favorites.css'", to: "styleUrls: ['./favorites.component.scss']" }
    ]
  },
  {
    file: 'src/app/pages/home/home.component.ts',
    replacements: [
      { from: "templateUrl: './home.component.html'", to: "templateUrl: './home.component.html'" },
      { from: "styleUrls: ['./home.component.scss']", to: "styleUrls: ['./home.component.scss']" }
    ]
  },
  {
    file: 'src/app/pages/trash/trash.component.ts',
    replacements: [
      { from: 'export class Trash', to: 'export class TrashComponent' },
      { from: "templateUrl: './trash.html'", to: "templateUrl: './trash.component.html'" },
      { from: "styleUrl: './trash.css'", to: "styleUrls: ['./trash.component.scss']" }
    ]
  },
  {
    file: 'src/app/services/auth.service.ts',
    replacements: [
      { from: 'export class Auth', to: 'export class AuthService' }
    ]
  },
  {
    file: 'src/app/app.component.ts',
    replacements: [
      { from: 'export class App', to: 'export class AppComponent' },
      { from: "templateUrl: './app.component.html'", to: "templateUrl: './app.component.html'" },
      { from: "styleUrl: './app.css'", to: "styleUrls: ['./app.component.scss']" }
    ]
  }
];

// Test file updates
const testFileUpdates = [
  {
    file: 'src/app/components/image-card/image-card.spec.ts',
    replacements: [
      { from: "import { ImageCard } from './image-card';", to: "import { ImageCardComponent } from './image-card.component';" },
      { from: 'let component: ImageCard;', to: 'let component: ImageCardComponent;' },
      { from: 'let fixture: ComponentFixture<ImageCard>;', to: 'let fixture: ComponentFixture<ImageCardComponent>;' },
      { from: 'imports: [ImageCard]', to: 'imports: [ImageCardComponent]' },
      { from: 'fixture = TestBed.createComponent(ImageCard);', to: 'fixture = TestBed.createComponent(ImageCardComponent);' }
    ]
  },
  {
    file: 'src/app/components/image-thumbnail/image-thumbnail.spec.ts',
    replacements: [
      { from: "import { ImageThumbnail } from './image-thumbnail';", to: "import { ImageThumbnailComponent } from './image-thumbnail.component';" },
      { from: 'let component: ImageThumbnail;', to: 'let component: ImageThumbnailComponent;' },
      { from: 'let fixture: ComponentFixture<ImageThumbnail>;', to: 'let fixture: ComponentFixture<ImageThumbnailComponent>;' },
      { from: 'imports: [ImageThumbnail]', to: 'imports: [ImageThumbnailComponent]' },
      { from: 'fixture = TestBed.createComponent(ImageThumbnail);', to: 'fixture = TestBed.createComponent(ImageThumbnailComponent);' }
    ]
  },
  {
    file: 'src/app/components/image-upload/image-upload.spec.ts',
    replacements: [
      { from: "import { ImageUpload } from './image-upload';", to: "import { ImageUploadComponent } from './image-upload.component';" },
      { from: 'let component: ImageUpload;', to: 'let component: ImageUploadComponent;' },
      { from: 'let fixture: ComponentFixture<ImageUpload>;', to: 'let fixture: ComponentFixture<ImageUploadComponent>;' },
      { from: 'imports: [ImageUpload]', to: 'imports: [ImageUploadComponent]' },
      { from: 'fixture = TestBed.createComponent(ImageUpload);', to: 'fixture = TestBed.createComponent(ImageUploadComponent);' }
    ]
  }
  // Add similar patterns for other test files...
];

function renameFiles() {
  console.log('🔄 Starting file renames...\n');

  fileMappings.forEach(mapping => {
    if (fs.existsSync(mapping.from)) {
      // Create directory if it doesn't exist
      const dir = path.dirname(mapping.to);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      fs.renameSync(mapping.from, mapping.to);
      console.log(`✅ Renamed: ${mapping.from} → ${mapping.to}`);
    } else {
      console.log(`⚠️  File not found: ${mapping.from}`);
    }
  });
}

function updateFileContents() {
  console.log('\n🔄 Updating file contents...\n');

  contentReplacements.forEach(fileUpdate => {
    if (fs.existsSync(fileUpdate.file)) {
      let content = fs.readFileSync(fileUpdate.file, 'utf8');
      let changed = false;

      fileUpdate.replacements.forEach(replacement => {
        if (content.includes(replacement.from)) {
          content = content.replace(new RegExp(replacement.from, 'g'), replacement.to);
          changed = true;
        }
      });

      if (changed) {
        fs.writeFileSync(fileUpdate.file, content);
        console.log(`✅ Updated content: ${fileUpdate.file}`);
      }
    } else {
      console.log(`⚠️  File not found: ${fileUpdate.file}`);
    }
  });
}

function updateTestFiles() {
  console.log('\n🔄 Updating test files...\n');

  testFileUpdates.forEach(fileUpdate => {
    if (fs.existsSync(fileUpdate.file)) {
      let content = fs.readFileSync(fileUpdate.file, 'utf8');
      let changed = false;

      fileUpdate.replacements.forEach(replacement => {
        if (content.includes(replacement.from)) {
          content = content.replace(new RegExp(replacement.from.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), replacement.to);
          changed = true;
        }
      });

      if (changed) {
        fs.writeFileSync(fileUpdate.file, content);
        console.log(`✅ Updated test file: ${fileUpdate.file}`);
      }
    } else {
      console.log(`⚠️  Test file not found: ${fileUpdate.file}`);
    }
  });
}

function createMissingStyleFiles() {
  console.log('\n🔄 Creating missing SCSS files...\n');

  const scssFiles = [
    'src/app/components/image-thumbnail/image-thumbnail.component.scss',
    'src/app/components/image-upload/image-upload.component.scss',
    'src/app/pages/archive/archive.component.scss',
    'src/app/pages/favorites/favorites.component.scss',
    'src/app/pages/trash/trash.component.scss',
    'src/app/app.component.scss'
  ];

  scssFiles.forEach(file => {
    if (!fs.existsSync(file)) {
      const dir = path.dirname(file);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      fs.writeFileSync(file, '/* Component styles */\n');
      console.log(`✅ Created: ${file}`);
    }
  });
}

function updateImportStatements() {
  console.log('\n🔄 Updating import statements...\n');

  // Update main.ts
  const mainFile = 'src/main.ts';
  if (fs.existsSync(mainFile)) {
    let content = fs.readFileSync(mainFile, 'utf8');
    content = content.replace("import { App } from './app/app';", "import { AppComponent } from './app/app.component';");
    content = content.replace('bootstrapApplication(App, appConfig)', 'bootstrapApplication(AppComponent, appConfig)');
    fs.writeFileSync(mainFile, content);
    console.log(`✅ Updated: ${mainFile}`);
  }

  // Update main.server.ts
  const mainServerFile = 'src/main.server.ts';
  if (fs.existsSync(mainServerFile)) {
    let content = fs.readFileSync(mainServerFile, 'utf8');
    content = content.replace("import { App } from './app/app';", "import { AppComponent } from './app/app.component';");
    content = content.replace('const bootstrap = () => bootstrapApplication(App, config);', 'const bootstrap = () => bootstrapApplication(AppComponent, config);');
    fs.writeFileSync(mainServerFile, content);
    console.log(`✅ Updated: ${mainServerFile}`);
  }
}

// Run all fixes
console.log('🚀 Starting Angular naming convention fixes...\n');

try {
  renameFiles();
  updateFileContents();
  updateTestFiles();
  createMissingStyleFiles();
  updateImportStatements();

  console.log('\n🎉 All naming convention fixes completed successfully!');
  console.log('\n📝 Next steps:');
  console.log('1. Update your app.module.ts declarations with the new component names');
  console.log('2. Update any routing files with the new component names');
  console.log('3. Run: ng build to check for any remaining issues');
  console.log('4. Run: ng test to verify tests still work');

} catch (error) {
  console.error('❌ Error during fixes:', error);
}
</file>

<file path="scripts/suggestedfix.txt">
// 1. Fix Component Class Names

// src/app/components/image-thumbnail/image-thumbnail.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-image-thumbnail',
  templateUrl: './image-thumbnail.component.html', // ✅ Correct
  styleUrls: ['./image-thumbnail.component.scss']  // ✅ Correct (note: styleUrls, not styleUrl)
})
export class ImageThumbnailComponent { // ✅ Correct class name
  // Component logic
}

// src/app/components/image-upload/image-upload.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-image-upload',
  templateUrl: './image-upload.component.html',
  styleUrls: ['./image-upload.component.scss']
})
export class ImageUploadComponent { // ✅ Fixed
  // Component logic
}

// src/app/pages/archive/archive.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-archive',
  templateUrl: './archive.component.html',
  styleUrls: ['./archive.component.scss']
})
export class ArchiveComponent { // ✅ Fixed
  // Component logic
}

// src/app/pages/favorites/favorites.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-favorites',
  templateUrl: './favorites.component.html',
  styleUrls: ['./favorites.component.scss']
})
export class FavoritesComponent { // ✅ Fixed
  // Component logic
}

// src/app/pages/trash/trash.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-trash',
  templateUrl: './trash.component.html',
  styleUrls: ['./trash.component.scss']
})
export class TrashComponent { // ✅ Fixed
  // Component logic
}

// 2. Fix Test Files

// src/app/components/image-thumbnail/image-thumbnail.spec.ts
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ImageThumbnailComponent } from './image-thumbnail.component'; // ✅ Fixed import

describe('ImageThumbnailComponent', () => { // ✅ Fixed name
  let component: ImageThumbnailComponent;
  let fixture: ComponentFixture<ImageThumbnailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ImageThumbnailComponent] // ✅ Fixed
    })
    .compileComponents();

    fixture = TestBed.createComponent(ImageThumbnailComponent); // ✅ Fixed
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

// 3. Fix App Component

// src/app/app.component.ts
import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss'] // ✅ Fixed
})
export class AppComponent { // ✅ Should only have one class
  protected readonly title = signal('photovault-angular');
}

// Remove the duplicate class:
// export class AppComponentComponent { ... } // ❌ Remove this

// 4. Fix Service Names

// src/app/services/auth.service.ts
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService { // ✅ Correct service name
  // Service logic
}

// 5. Module Structure Fixes

// src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HttpClientModule } from '@angular/common/http';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';

// Material imports
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatDialogModule } from '@angular/material/dialog';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatGridListModule } from '@angular/material/grid-list';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

// Import your fixed components
import { ImageCardComponent } from './components/image-card/image-card.component';
import { ImageThumbnailComponent } from './components/image-thumbnail/image-thumbnail.component';
import { ImageUploadComponent } from './components/image-upload/image-upload.component';
import { HomeComponent } from './pages/home/home.component';
import { ArchiveComponent } from './pages/archive/archive.component';
import { FavoritesComponent } from './pages/favorites/favorites.component';
import { TrashComponent } from './pages/trash/trash.component';

@NgModule({
  declarations: [
    AppComponent,           // ✅ Fixed
    ImageCardComponent,     // ✅ Fixed
    ImageThumbnailComponent,// ✅ Fixed
    ImageUploadComponent,   // ✅ Fixed
    HomeComponent,
    ArchiveComponent,       // ✅ Fixed
    FavoritesComponent,     // ✅ Fixed
    TrashComponent          // ✅ Fixed
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    HttpClientModule,
    ReactiveFormsModule,
    FormsModule,
    // Material modules
    MatToolbarModule,
    MatButtonModule,
    MatCardModule,
    MatIconModule,
    MatInputModule,
    MatProgressSpinnerModule,
    MatDialogModule,
    MatSnackBarModule,
    MatGridListModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

// 6. Create Missing Files
// You need to create these SCSS files with basic content:

// src/app/components/image-thumbnail/image-thumbnail.component.scss
/* Image thumbnail component styles */

// src/app/components/image-upload/image-upload.component.scss
/* Image upload component styles */

// src/app/pages/archive/archive.component.scss
/* Archive page styles */

// src/app/pages/favorites/favorites.component.scss
/* Favorites page styles */

// src/app/pages/trash/trash.component.scss
/* Trash page styles */
</file>

<file path="src/app/components/image-card/image-card.component.html">
<mat-card class="image-card">
  <app-image-thumbnail
    [imageId]="image.id"
    [alt]="image.originalFilename"
    [width]="200"
    [height]="200">
  </app-image-thumbnail>

  <mat-card-actions>
    <button mat-icon-button
            (click)="onToggleFavorite()"
            [color]="image.isFavorite ? 'warn' : 'primary'">
      <mat-icon>{{image.isFavorite ? 'favorite' : 'favorite_border'}}</mat-icon>
    </button>

    <button mat-icon-button (click)="onDownload()">
      <mat-icon>download</mat-icon>
    </button>

    <button mat-icon-button (click)="onToggleArchive()">
      <mat-icon>archive</mat-icon>
    </button>

    <button mat-icon-button (click)="onDelete()">
      <mat-icon>delete</mat-icon>
    </button>
  </mat-card-actions>
</mat-card>
</file>

<file path="src/app/components/image-card/image-card.component.scss">
/* Component styles */
</file>

<file path="src/app/components/image-card/image-card.component.ts">
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { ImageThumbnailComponent } from '../image-thumbnail/image-thumbnail.component';
import { Image } from '../../models/image';

@Component({
  selector: 'app-image-card',
  standalone: true,
  imports: [
    CommonModule,
    MatCardModule,
    MatButtonModule,
    MatIconModule,
    ImageThumbnailComponent
  ],
  templateUrl: './image-card.component.html',
  styleUrls: ['./image-card.component.scss']
})
export class ImageCardComponent {
  @Input() image!: Image;
  @Output() toggleFavorite = new EventEmitter<number>();
  @Output() toggleArchive = new EventEmitter<number>();
  @Output() downloadImage = new EventEmitter<{id: number, filename: string}>();
  @Output() deleteImage = new EventEmitter<number>();

  onToggleFavorite(): void {
    this.toggleFavorite.emit(this.image.id);
  }

  onToggleArchive(): void {
    this.toggleArchive.emit(this.image.id);
  }

  onDownload(): void {
    this.downloadImage.emit({
      id: this.image.id,
      filename: this.image.originalFilename
    });
  }

  onDelete(): void {
    this.deleteImage.emit(this.image.id);
  }
}
</file>

<file path="src/app/components/image-card/image-card.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ImageCardComponent } from './image-card.component';

describe('ImageCard', () => {
  let component: ImageCardComponent;
  let fixture: ComponentFixture<ImageCardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ImageCardComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ImageCardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/image-thumbnail/image-thumbnail.component.html">
<img [src]="thumbnailUrl"
     [alt]="alt"
     [style.width.px]="width"
     [style.height.px]="height"
     style="object-fit: cover; border-radius: 4px;">
</file>

<file path="src/app/components/image-thumbnail/image-thumbnail.component.scss">
/* Component styles */
</file>

<file path="src/app/components/image-thumbnail/image-thumbnail.component.ts">
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-image-thumbnail',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './image-thumbnail.component.html',
  styleUrls: ['./image-thumbnail.component.scss']
})
export class ImageThumbnailComponent {
  @Input() imageId!: number;
  @Input() alt: string = '';
  @Input() width: number = 150;
  @Input() height: number = 150;

  get thumbnailUrl(): string {
    return `http://localhost:8080/images/${this.imageId}/thumbnail?width=${this.width}&height=${this.height}`;
  }
}
</file>

<file path="src/app/components/image-thumbnail/image-thumbnail.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ImageThumbnailComponent } from './image-thumbnail.component';

describe('ImageThumbnail', () => {
  let component: ImageThumbnailComponent;
  let fixture: ComponentFixture<ImageThumbnailComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ImageThumbnailComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ImageThumbnailComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/image-upload/image-upload.component.html">
<div class="upload-area"
     (dragover)="onDragOver($event)"
     (drop)="onDrop($event)">
  <input type="file"
         multiple
         accept="image/*"
         (change)="onFileSelected($event)"
         #fileInput>
  <div class="upload-content">
    <mat-icon>cloud_upload</mat-icon>
    <p>Drag and drop images here or click to select</p>
    <button mat-raised-button color="primary" (click)="fileInput.click()">
      Choose Files
    </button>
  </div>
</div>
</file>

<file path="src/app/components/image-upload/image-upload.component.scss">
.upload-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px;
  text-align: center;
  margin: 20px 0;
  transition: border-color 0.3s ease;
  cursor: pointer;
}

.upload-area:hover {
  border-color: #3f51b5;
}

.upload-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

input[type="file"] {
  display: none;
}
</file>

<file path="src/app/components/image-upload/image-upload.component.ts">
import { Component, EventEmitter, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';

@Component({
  selector: 'app-image-upload',
  standalone: true,
  imports: [
    CommonModule,
    MatButtonModule,
    MatIconModule
  ],
  templateUrl: './image-upload.component.html',
  styleUrls: ['./image-upload.component.scss']
})
export class ImageUploadComponent {
  @Output() filesSelected = new EventEmitter<FileList>();

  onFileSelected(event: any): void {
    const files = event.target.files;
    if (files && files.length > 0) {
      this.filesSelected.emit(files);
    }
  }

  onDragOver(event: DragEvent): void {
    event.preventDefault();
  }

  onDrop(event: DragEvent): void {
    event.preventDefault();
    const files = event.dataTransfer?.files;
    if (files && files.length > 0) {
      this.filesSelected.emit(files);
    }
  }
}
</file>

<file path="src/app/components/image-upload/image-upload.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ImageUploadComponent } from './image-upload.component';

describe('ImageUpload', () => {
  let component: ImageUploadComponent;
  let fixture: ComponentFixture<ImageUploadComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ImageUploadComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ImageUploadComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/core.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

@NgModule({
  declarations: [],
  imports: [
    CommonModule
  ]
})
export class CoreModule { }
</file>

<file path="src/app/features/features.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

@NgModule({
  declarations: [],
  imports: [
    CommonModule
  ]
})
export class FeaturesModule { }
</file>

<file path="src/app/models/image.ts">
export interface Image {
  id: number;
  filename: string;
  storedFilename: string;
  originalFilename: string;
  filePath: string;
  fileSize: number;
  contentType: string;
  uploadDate: string;
  isFavorite: boolean;
  isArchived: boolean;
  isDeleted: boolean;
}

export interface ImageStats {
  totalImages: number;
  favorites: number;
  archived: number;
  trash: number;
}

export interface ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string;
  error?: string;
}

export interface PaginatedResponse<T> {
  content: T[];
  totalElements: number;
  totalPages: number;
  size: number;
  number: number;
  first: boolean;
  last: boolean;
  empty: boolean;
}

export interface UploadResponse {
  success: boolean;
  message: string;
  uploadedFiles?: string[];
  failedFiles?: string[];
}
</file>

<file path="src/app/pages/archive/archive.component.html">
<div class="container">
  <h1>Archived Images</h1>

  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
    <p>Loading archived images...</p>
  </div>

  <div *ngIf="error" class="error">
    <p>{{error}}</p>
  </div>

  <div *ngIf="!loading && !error" class="image-grid">
    <app-image-card
      *ngFor="let image of images"
      [image]="image">
    </app-image-card>
  </div>
</div>
</file>

<file path="src/app/pages/archive/archive.component.scss">
/* Component styles */
</file>

<file path="src/app/pages/archive/archive.component.ts">
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { ImageCardComponent } from '../../components/image-card/image-card.component';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-archive',
  standalone: true,
  imports: [
    CommonModule,
    MatProgressSpinnerModule,
    ImageCardComponent
  ],
  templateUrl: './archive.component.html',
  styleUrls: ['./archive.component.scss']
})
export class ArchiveComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadArchivedImages();
  }

  loadArchivedImages(): void {
    // TODO: Implement archived images loading
    this.loading = false;
  }
}
</file>

<file path="src/app/pages/archive/archive.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Archive } from './archive';

describe('Archive', () => {
  let component: Archive;
  let fixture: ComponentFixture<Archive>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Archive]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Archive);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/pages/favorites/favorites.component.html">
<div class="container">
  <h1>Favorite Images</h1>

  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
    <p>Loading favorite images...</p>
  </div>

  <div *ngIf="error" class="error">
    <p>{{error}}</p>
  </div>

  <div *ngIf="!loading && !error" class="image-grid">
    <app-image-card
      *ngFor="let image of images"
      [image]="image">
    </app-image-card>
  </div>
</div>
</file>

<file path="src/app/pages/favorites/favorites.component.scss">
/* Component styles */
</file>

<file path="src/app/pages/favorites/favorites.component.ts">
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { ImageCardComponent } from '../../components/image-card/image-card.component';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-favorites',
  standalone: true,
  imports: [
    CommonModule,
    MatProgressSpinnerModule,
    ImageCardComponent
  ],
  templateUrl: './favorites.component.html',
  styleUrls: ['./favorites.component.scss']
})
export class FavoritesComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadFavoriteImages();
  }

  loadFavoriteImages(): void {
    // TODO: Implement favorite images loading
    this.loading = false;
  }
}
</file>

<file path="src/app/pages/favorites/favorites.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Favorites } from './favorites';

describe('Favorites', () => {
  let component: Favorites;
  let fixture: ComponentFixture<Favorites>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Favorites]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Favorites);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/pages/home/home.component.html">
<div class="container">
  <h1>PhotoVault - Home</h1>

  <!-- Backend Connection Status -->
  <div *ngIf="!backendConnected && !loading" class="connection-error">
    <mat-icon>error_outline</mat-icon>
    <p>Backend server is not accessible</p>
    <button mat-raised-button color="primary" (click)="retryConnection()">
      Retry Connection
    </button>
  </div>

  <!-- Upload Area -->
  <div *ngIf="backendConnected">
    <app-image-upload (filesSelected)="onFilesSelected($event)"></app-image-upload>
  </div>

  <!-- Loading State -->
  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
    <p>{{ backendConnected ? 'Loading images...' : 'Connecting to server...' }}</p>
  </div>

  <!-- Error State -->
  <div *ngIf="error && !loading" class="error">
    <mat-icon>error</mat-icon>
    <p>{{error}}</p>
    <button mat-raised-button color="primary" (click)="loadImages()">
      Retry
    </button>
  </div>

  <!-- Images Grid -->
  <div *ngIf="!loading && !error && backendConnected" class="image-grid">
    <div *ngIf="images.length === 0" class="no-images">
      <mat-icon>photo_library</mat-icon>
      <p>No images found. Upload some images to get started!</p>
    </div>

    <app-image-card
      *ngFor="let image of images"
      [image]="image"
      (toggleFavorite)="onToggleFavorite($event)"
      (toggleArchive)="onToggleArchive($event)"
      (downloadImage)="onDownloadImage($event)"
      (deleteImage)="onDeleteImage($event)">
    </app-image-card>
  </div>
</div>
</file>

<file path="src/app/pages/home/home.component.scss">
.container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.connection-error {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 40px;
  background-color: #ffebee;
  border-radius: 8px;
  margin: 20px 0;
  color: #c62828;

  mat-icon {
    font-size: 48px;
    width: 48px;
    height: 48px;
    margin-bottom: 16px;
  }

  p {
    margin: 0 0 16px 0;
    font-size: 16px;
  }
}

.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
  gap: 20px;

  p {
    margin: 0;
    color: #666;
  }
}

.error {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 40px;
  background-color: #ffebee;
  border-radius: 8px;
  margin: 20px 0;
  color: #c62828;

  mat-icon {
    font-size: 48px;
    width: 48px;
    height: 48px;
    margin-bottom: 16px;
  }

  p {
    margin: 0 0 16px 0;
    text-align: center;
  }
}

.image-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.no-images {
  grid-column: 1 / -1;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 60px 20px;
  color: #666;

  mat-icon {
    font-size: 64px;
    width: 64px;
    height: 64px;
    margin-bottom: 16px;
    opacity: 0.5;
  }

  p {
    margin: 0;
    font-size: 18px;
    text-align: center;
  }
}
</file>

<file path="src/app/pages/home/home.component.ts">
import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatButtonModule } from '@angular/material/button';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import {MatIcon, MatIconModule} from '@angular/material/icon';
import { MatSnackBar } from '@angular/material/snack-bar';
import { ImageCardComponent } from '../../components/image-card/image-card.component';
import { ImageUploadComponent } from '../../components/image-upload/image-upload.component';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';
import { Subject, takeUntil } from 'rxjs';


@Component({
  selector: 'app-home',
  standalone: true,
  imports: [
    CommonModule,
    MatProgressSpinnerModule,
    MatButtonModule,
    MatSnackBarModule,
    ImageCardComponent,
    ImageUploadComponent,
    MatIcon,
    MatIcon
  ],
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent implements OnInit, OnDestroy {
  images: Image[] = [];
  loading = true;
  error: string | null = null;
  backendConnected = false;

  private destroy$ = new Subject<void>();

  constructor(
    private imageService: ImageService,
    private snackBar: MatSnackBar
  ) {}

  ngOnInit(): void {
    this.testBackendConnection();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  testBackendConnection(): void {
    console.log('Testing backend connection...');
    this.imageService.testConnection()
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          console.log('Backend connection successful:', response);
          this.backendConnected = true;
          this.loadImages();
        },
        error: (error) => {
          console.error('Backend connection failed:', error);
          this.error = 'Cannot connect to backend server. Please make sure it\'s running on localhost:8080';
          this.loading = false;
          this.backendConnected = false;
        }
      });
  }

  loadImages(): void {
    this.loading = true;
    this.error = null;

    this.imageService.getAllImages(0, 20)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          console.log('Images loaded:', response);
          this.images = response.content || [];
          this.loading = false;
        },
        error: (error) => {
          console.error('Failed to load images:', error);
          this.error = error;
          this.loading = false;
        }
      });
  }

  onFilesSelected(files: FileList): void {
    if (files.length === 0) return;

    console.log('Files selected for upload:', files);

    if (files.length === 1) {
      this.uploadSingleFile(files[0]);
    } else {
      this.uploadMultipleFiles(files);
    }
  }

  private uploadSingleFile(file: File): void {
    this.imageService.uploadImage(file)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          console.log('Upload successful:', response);
          this.snackBar.open('Image uploaded successfully!', 'Close', { duration: 3000 });
          this.loadImages(); // Refresh the image list
        },
        error: (error) => {
          console.error('Upload failed:', error);
          this.snackBar.open(`Upload failed: ${error}`, 'Close', { duration: 5000 });
        }
      });
  }

  private uploadMultipleFiles(files: FileList): void {
    this.imageService.uploadMultipleImages(files)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          console.log('Multiple upload successful:', response);
          this.snackBar.open('Images uploaded successfully!', 'Close', { duration: 3000 });
          this.loadImages(); // Refresh the image list
        },
        error: (error) => {
          console.error('Multiple upload failed:', error);
          this.snackBar.open(`Upload failed: ${error}`, 'Close', { duration: 5000 });
        }
      });
  }

  onToggleFavorite(imageId: number): void {
    this.imageService.toggleFavorite(imageId)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: () => {
          this.snackBar.open('Favorite status updated', 'Close', { duration: 2000 });
          this.loadImages(); // Refresh to get updated status
        },
        error: (error) => {
          this.snackBar.open(`Failed to update favorite: ${error}`, 'Close', { duration: 3000 });
        }
      });
  }

  onToggleArchive(imageId: number): void {
    this.imageService.toggleArchive(imageId)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: () => {
          this.snackBar.open('Archive status updated', 'Close', { duration: 2000 });
          this.loadImages(); // Refresh to get updated status
        },
        error: (error) => {
          this.snackBar.open(`Failed to update archive: ${error}`, 'Close', { duration: 3000 });
        }
      });
  }

  onDownloadImage(data: {id: number, filename: string}): void {
    this.imageService.downloadImage(data.id)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (blob) => {
          // Create download link
          const url = window.URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.download = data.filename;
          link.click();
          window.URL.revokeObjectURL(url);
          this.snackBar.open('Download started', 'Close', { duration: 2000 });
        },
        error: (error) => {
          this.snackBar.open(`Download failed: ${error}`, 'Close', { duration: 3000 });
        }
      });
  }

  onDeleteImage(imageId: number): void {
    if (confirm('Are you sure you want to move this image to trash?')) {
      this.imageService.moveToTrash(imageId)
        .pipe(takeUntil(this.destroy$))
        .subscribe({
          next: () => {
            this.snackBar.open('Image moved to trash', 'Close', { duration: 2000 });
            this.loadImages(); // Refresh the list
          },
          error: (error) => {
            this.snackBar.open(`Failed to delete image: ${error}`, 'Close', { duration: 3000 });
          }
        });
    }
  }

  retryConnection(): void {
    this.testBackendConnection();
  }
}
</file>

<file path="src/app/pages/home/home.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Home } from './home';

describe('Home', () => {
  let component: Home;
  let fixture: ComponentFixture<Home>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Home]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Home);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/pages/trash/trash.component.html">
<div class="container">
  <h1>Trash</h1>

  <div *ngIf="loading" class="loading">
    <mat-spinner></mat-spinner>
    <p>Loading trashed images...</p>
  </div>

  <div *ngIf="error" class="error">
    <p>{{error}}</p>
  </div>

  <div *ngIf="!loading && !error" class="image-grid">
    <app-image-card
      *ngFor="let image of images"
      [image]="image">
    </app-image-card>
  </div>
</div>
</file>

<file path="src/app/pages/trash/trash.component.scss">
/* Component styles */
</file>

<file path="src/app/pages/trash/trash.component.ts">
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { ImageCardComponent } from '../../components/image-card/image-card.component';
import { ImageService } from '../../services/image.service';
import { Image } from '../../models/image';

@Component({
  selector: 'app-trash',
  standalone: true,
  imports: [
    CommonModule,
    MatProgressSpinnerModule,
    ImageCardComponent
  ],
  templateUrl: './trash.component.html',
  styleUrls: ['./trash.component.scss']
})
export class TrashComponent implements OnInit {
  images: Image[] = [];
  loading = true;
  error: string | null = null;

  constructor(private imageService: ImageService) {}

  ngOnInit(): void {
    this.loadTrashedImages();
  }

  loadTrashedImages(): void {
    // TODO: Implement trashed images loading
    this.loading = false;
  }
}
</file>

<file path="src/app/pages/trash/trash.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { Trash } from './trash';

describe('Trash', () => {
  let component: Trash;
  let fixture: ComponentFixture<Trash>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [Trash]
    })
    .compileComponents();

    fixture = TestBed.createComponent(Trash);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/services/auth.service.ts">
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthServiceService {
  
}
</file>

<file path="src/app/services/auth.spec.ts">
import { TestBed } from '@angular/core/testing';

import { Auth } from './auth';

describe('Auth', () => {
  let service: Auth;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(Auth);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/services/image.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { environment } from '../../environments/environment';
import { Image, ImageStats, ApiResponse, PaginatedResponse } from '../models/image';

@Injectable({
  providedIn: 'root'
})
export class ImageService {
  private apiUrl = environment.apiUrl;

  constructor(private http: HttpClient) {}

  private handleError(error: HttpErrorResponse): Observable<never> {
    let errorMessage = 'An unknown error occurred!';
    if (error.error instanceof ErrorEvent) {
      // Client-side error
      errorMessage = `Error: ${error.error.message}`;
    } else {
      // Server-side error
      errorMessage = `Error Code: ${error.status}\nMessage: ${error.message}`;
      if (error.error && error.error.error) {
        errorMessage = error.error.error;
      }
    }
    console.error('ImageService Error:', error);
    return throwError(() => errorMessage);
  }

  // Test backend connectivity
  testConnection(): Observable<string> {
    return this.http.get(`${this.apiUrl}/health`, { responseType: 'text' })
      .pipe(catchError(this.handleError));
  }

  // Upload single image
  uploadImage(file: File): Observable<any> {
    const formData = new FormData();
    formData.append('file', file);

    return this.http.post(`${this.apiUrl}/images/upload`, formData)
      .pipe(catchError(this.handleError));
  }

  // Upload multiple images
  uploadMultipleImages(files: FileList): Observable<any> {
    const formData = new FormData();
    for (let i = 0; i < files.length; i++) {
      formData.append('files', files[i]);
    }

    return this.http.post(`${this.apiUrl}/images/upload-multiple`, formData)
      .pipe(catchError(this.handleError));
  }

  // Get all images with pagination
  getAllImages(page = 0, size = 10): Observable<PaginatedResponse<Image>> {
    return this.http.get<ApiResponse<PaginatedResponse<Image>>>(
      `${this.apiUrl}/images?page=${page}&size=${size}`
    ).pipe(
      map(response => response.data),
      catchError(this.handleError)
    );
  }

  // Get image thumbnail URL
  getImageThumbnail(id: number, width = 150, height = 150): string {
    return `${this.apiUrl}/images/${id}/thumbnail?width=${width}&height=${height}`;
  }

  // Download image
  downloadImage(id: number): Observable<Blob> {
    return this.http.get(`${this.apiUrl}/images/${id}/download`, {
      responseType: 'blob'
    }).pipe(catchError(this.handleError));
  }

  // Toggle favorite status
  toggleFavorite(id: number): Observable<any> {
    return this.http.put(`${this.apiUrl}/images/${id}/favorite`, {})
      .pipe(catchError(this.handleError));
  }

  // Toggle archive status
  toggleArchive(id: number): Observable<any> {
    return this.http.put(`${this.apiUrl}/images/${id}/archive`, {})
      .pipe(catchError(this.handleError));
  }

  // Move to trash (soft delete)
  moveToTrash(id: number): Observable<any> {
    return this.http.put(`${this.apiUrl}/images/${id}/trash`, {})
      .pipe(catchError(this.handleError));
  }

  // Permanent delete
  deleteImage(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/images/${id}`)
      .pipe(catchError(this.handleError));
  }

  // Restore from trash
  restoreFromTrash(id: number): Observable<any> {
    return this.http.put(`${this.apiUrl}/images/${id}/restore`, {})
      .pipe(catchError(this.handleError));
  }

  // Get image statistics
  getStats(): Observable<ImageStats> {
    return this.http.get<ApiResponse<ImageStats>>(`${this.apiUrl}/images/stats`)
      .pipe(
        map(response => response.data),
        catchError(this.handleError)
      );
  }

  // Search images
  searchImages(query: string, page = 0, size = 10): Observable<PaginatedResponse<Image>> {
    return this.http.get<ApiResponse<PaginatedResponse<Image>>>(
      `${this.apiUrl}/images/search?query=${encodeURIComponent(query)}&page=${page}&size=${size}`
    ).pipe(
      map(response => response.data),
      catchError(this.handleError)
    );
  }

  // Get favorite images
  getFavoriteImages(page = 0, size = 10): Observable<PaginatedResponse<Image>> {
    return this.http.get<ApiResponse<PaginatedResponse<Image>>>(
      `${this.apiUrl}/images/favorites?page=${page}&size=${size}`
    ).pipe(
      map(response => response.data),
      catchError(this.handleError)
    );
  }

  // Get archived images
  getArchivedImages(page = 0, size = 10): Observable<PaginatedResponse<Image>> {
    return this.http.get<ApiResponse<PaginatedResponse<Image>>>(
      `${this.apiUrl}/images/archived?page=${page}&size=${size}`
    ).pipe(
      map(response => response.data),
      catchError(this.handleError)
    );
  }

  // Get trashed images
  getTrashedImages(page = 0, size = 10): Observable<PaginatedResponse<Image>> {
    return this.http.get<ApiResponse<PaginatedResponse<Image>>>(
      `${this.apiUrl}/images/trash?page=${page}&size=${size}`
    ).pipe(
      map(response => response.data),
      catchError(this.handleError)
    );
  }
}
</file>

<file path="src/app/services/image.spec.ts">
import { TestBed } from '@angular/core/testing';

import { ImageService } from './image.service';

describe('Image', () => {
  let service: ImageService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ImageService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/shared/shared.module.ts">
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';



@NgModule({
  declarations: [],
  imports: [
    CommonModule
  ]
})
export class SharedModule { }
</file>

<file path="src/app/app.component.html">
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->
<!-- * * * * * * * to get started with your project! * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->

<style>
  :host {
    --bright-blue: oklch(51.01% 0.274 263.83);
    --electric-violet: oklch(53.18% 0.28 296.97);
    --french-violet: oklch(47.66% 0.246 305.88);
    --vivid-pink: oklch(69.02% 0.277 332.77);
    --hot-red: oklch(61.42% 0.238 15.34);
    --orange-red: oklch(63.32% 0.24 31.68);

    --gray-900: oklch(19.37% 0.006 300.98);
    --gray-700: oklch(36.98% 0.014 302.71);
    --gray-400: oklch(70.9% 0.015 304.04);

    --red-to-pink-to-purple-vertical-gradient: linear-gradient(
      180deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(
      90deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --pill-accent: var(--bright-blue);

    --inter-font: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";

    font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1 {
    font-size: 3.125rem;
    color: var(--gray-900);
    font-weight: 500;
    line-height: 100%;
    letter-spacing: -0.125rem;
    margin: 0;
    font-family: "Inter Tight", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
  }

  p {
    margin: 0;
    color: var(--gray-700);
  }

  main {
    width: 100%;
    min-height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    box-sizing: inherit;
    position: relative;
  }

  .angular-logo {
    max-width: 9.2rem;
  }

  .content {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 700px;
    margin-bottom: 3rem;
  }

  .content h1 {
    margin-top: 1.75rem;
  }

  .content p {
    margin-top: 1.5rem;
  }

  .divider {
    width: 1px;
    background: var(--red-to-pink-to-purple-vertical-gradient);
    margin-inline: 0.5rem;
  }

  .pill-group {
    display: flex;
    flex-direction: column;
    align-items: start;
    flex-wrap: wrap;
    gap: 1.25rem;
  }

  .pill {
    display: flex;
    align-items: center;
    --pill-accent: var(--bright-blue);
    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);
    color: var(--pill-accent);
    padding-inline: 0.75rem;
    padding-block: 0.375rem;
    border-radius: 2.75rem;
    border: 0;
    transition: background 0.3s ease;
    font-family: var(--inter-font),serif, sans-serif,
      -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial,
      sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";;
    font-size: 0.875rem;
    font-style: normal;
    font-weight: 500;
    line-height: 1.4rem;
    letter-spacing: -0.00875rem;
    text-decoration: none;
    white-space: nowrap;
  }

  .pill:hover {
    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);
  }

  .pill-group .pill:nth-child(6n + 1) {
    --pill-accent: var(--bright-blue);
  }
  .pill-group .pill:nth-child(6n + 2) {
    --pill-accent: var(--electric-violet);
  }
  .pill-group .pill:nth-child(6n + 3) {
    --pill-accent: var(--french-violet);
  }

  .pill-group .pill:nth-child(6n + 4),
  .pill-group .pill:nth-child(6n + 5),
  .pill-group .pill:nth-child(6n + 6) {
    --pill-accent: var(--hot-red);
  }

  .pill-group svg {
    margin-inline-start: 0.25rem;
  }

  .social-links {
    display: flex;
    align-items: center;
    gap: 0.73rem;
    margin-top: 1.5rem;
  }

  .social-links path {
    transition: fill 0.3s ease;
    fill: var(--gray-400);
  }

  .social-links a:hover svg path {
    fill: var(--gray-900);
  }

  @media screen and (max-width: 650px) {
    .content {
      flex-direction: column;
      width: max-content;
    }

    .divider {
      height: 1px;
      width: 100%;
      background: var(--red-to-pink-to-purple-horizontal-gradient);
      margin-block: 1.5rem;
    }
  }
</style>

<main class="main">
  <div class="content">
    <div class="left-side">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 982 239"
        fill="none"
        class="angular-logo"
      >
        <g clip-path="url(#a)">
          <path
            fill="url(#b)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
          <path
            fill="url(#c)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
        </g>
        <defs>
          <radialGradient
            id="c"
            cx="0"
            cy="0"
            r="1"
            gradientTransform="rotate(118.122 171.182 60.81) scale(205.794)"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#FF41F8" />
            <stop offset=".707" stop-color="#FF41F8" stop-opacity=".5" />
            <stop offset="1" stop-color="#FF41F8" stop-opacity="0" />
          </radialGradient>
          <linearGradient
            id="b"
            x1="0"
            x2="982"
            y1="192"
            y2="192"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#F0060B" />
            <stop offset="0" stop-color="#F0070C" />
            <stop offset=".526" stop-color="#CC26D5" />
            <stop offset="1" stop-color="#7702FF" />
          </linearGradient>
          <clipPath id="a"><path fill="#fff" d="M0 0h982v239H0z" /></clipPath>
        </defs>
      </svg>
      <h1>Hello, {{ title }}</h1>
      <p>Congratulations! Your app is running. 🎉</p>
    </div>
    <div class="divider" role="separator" aria-label="Divider"></div>
    <div class="right-side">
      <div class="pill-group">
        @for (item of [
          { title: 'Explore the Docs', link: 'https://angular.dev' },
          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },
          { title: 'Prompt and best practices for AI', link: 'https://angular.dev/ai/develop-with-ai'},
          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },
          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },
          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },
        ]; track item.title) {
          <a
            class="pill"
            [href]="item.link"
            target="_blank"
            rel="noopener"
          >
            <span>{{ item.title }}</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="14"
              viewBox="0 -960 960 960"
              width="14"
              fill="currentColor"
            >
              <path
                d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z"
              />
            </svg>
          </a>
        }
      </div>
      <div class="social-links">
        <a
          href="https://github.com/angular/angular"
          aria-label="Github"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="25"
            height="24"
            viewBox="0 0 25 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Github"
          >
            <path
              d="M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z"
            />
          </svg>
        </a>
        <a
          href="https://twitter.com/angular"
          aria-label="Twitter"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Twitter"
          >
            <path
              d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
            />
          </svg>
        </a>
        <a
          href="https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw"
          aria-label="Youtube"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="29"
            height="20"
            viewBox="0 0 29 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Youtube"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z"
            />
          </svg>
        </a>
      </div>
    </div>
  </div>
</main>


<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->


<router-outlet />
</file>

<file path="src/app/app.component.scss">
.spacer {
  flex: 1 1 auto;
}

mat-toolbar {
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

mat-toolbar button {
  margin-left: 8px;
}

router-outlet {
  display: block;
  min-height: calc(100vh - 64px);
}
</file>

<file path="src/app/app.component.ts">
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatButtonModule } from '@angular/material/button';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet,
    MatToolbarModule,
    // RouterLink,
    MatButtonModule
  ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'PhotoVault';
}
</file>

<file path="src/app/app.config.server.ts">
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering, withRoutes } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(withRoutes(serverRoutes))
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);
</file>

<file path="src/app/app.config.ts">
import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZonelessChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';

export const appConfig: ApplicationConfig = {
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZonelessChangeDetection(),
    provideRouter(routes), provideClientHydration(withEventReplay())
  ]
};
</file>

<file path="src/app/app.routes.server.ts">
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];
</file>

<file path="src/app/app.routes.ts">
import { Routes } from '@angular/router';
import { HomeComponent } from './pages/home/home.component';
import { FavoritesComponent } from './pages/favorites/favorites.component';
import { ArchiveComponent } from './pages/archive/archive.component';
import { TrashComponent } from './pages/trash/trash.component';

export const routes: Routes = [
  { path: '', redirectTo: '/home', pathMatch: 'full' },
  { path: 'home', component: HomeComponent },
  { path: 'favorites', component: FavoritesComponent },
  { path: 'archive', component: ArchiveComponent },
  { path: 'trash', component: TrashComponent },
  { path: '**', redirectTo: '/home' }
];
</file>

<file path="src/app/app.spec.ts">
import { provideZonelessChangeDetection } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('App', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
      providers: [provideZonelessChangeDetection()]
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, photovault-angular');
  });
});
</file>

<file path="src/environments/environment.prod.ts">
export const environment = {
  production: true,
  apiUrl: 'http://localhost:8080',
  name: 'production'
};
</file>

<file path="src/environments/environment.ts">
export const environment = {
  production: false,
  apiUrl: 'http://localhost:8080',
  name: 'Development',
  version: '1.0.0',
  description: 'Development environment for the image upload application'
};
</file>

<file path="src/custom-theme.scss">
@use '@angular/material' as mat;

@include mat.core();

$photovault-primary: mat.m2-define-palette(mat.$m2-indigo-palette);
$photovault-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);
$photovault-warn: mat.m2-define-palette(mat.$m2-red-palette);

$photovault-theme: mat.m2-define-light-theme((
  color: (
    primary: $photovault-primary,
    accent: $photovault-accent,
    warn: $photovault-warn,
  ),
  typography: mat.m2-define-typography-config(),
  density: 0,
));

@include mat.all-component-themes($photovault-theme);

/* Custom styles */
html, body {
  height: 100%;
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

.spacer {
  flex: 1 1 auto;
}

.container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.image-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 50px;
  gap: 20px;
}

.error {
  color: #f44336;
  text-align: center;
  margin-top: 20px;
  padding: 20px;
  background-color: #ffebee;
  border-radius: 4px;
}

.upload-area {
  border: 2px dashed #ccc;
  border-radius: 8px;
  padding: 40px;
  text-align: center;
  margin: 20px 0;
  transition: border-color 0.3s ease;
  cursor: pointer;
}

.upload-area:hover {
  border-color: #3f51b5;
}

.upload-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

.image-card {
  max-width: 250px;
  margin: 10px;
}

.image-card img {
  width: 100%;
  height: 200px;
  object-fit: cover;
}
</file>

<file path="src/custom-theme.scss.backup">
// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: (
      primary: mat.$azure-palette,
      tertiary: mat.$blue-palette,
    ),
    typography: Roboto,
    density: 0,
  ));

  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);
}
// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: (
      primary: mat.$azure-palette,
      tertiary: mat.$blue-palette,
    ),
    typography: Roboto,
    density: 0,
  ));

  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);
}
</file>

<file path="src/index.html">
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>PhotovaultAngular</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <app-root></app-root>
</body>
</html>
</file>

<file path="src/main.server.ts">
import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { provideAnimations } from '@angular/platform-browser/animations';
import { provideHttpClient, withFetch } from '@angular/common/http';

import { AppComponent } from './app/app.component';
import { routes } from './app/app.routes';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(routes),
    provideAnimations(),
    provideHttpClient(withFetch())
  ]
}).catch((err: any) => console.error(err));
</file>

<file path="src/main.ts">
import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { provideAnimations } from '@angular/platform-browser/animations';
import { provideHttpClient, withFetch } from '@angular/common/http';

import { AppComponent } from './app/app.component';
import { routes } from './app/app.routes';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(routes),
    provideAnimations(),
    provideHttpClient(withFetch())
  ]
}).catch((err: any) => console.error(err));
</file>

<file path="src/server.ts">
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { join } from 'node:path';

const browserDistFolder = join(import.meta.dirname, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/{*splat}', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use((req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, (error) => {
    if (error) {
      throw error;
    }

    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);
</file>

<file path="src/styles.css">
/* You can add global styles to this file, and also import other style files */

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }
</file>

<file path=".editorconfig">
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false
</file>

<file path=".gitignore">
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db
</file>

<file path="angular.json">
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "photovault-angular": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular/build:application",
          "options": {
            "browser": "src/main.ts",
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/custom-theme.scss",
              "src/styles.css"
            ],
            "server": "src/main.server.ts",
            "outputMode": "server",
            "ssr": {
              "entry": "src/server.ts"
            }
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular/build:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "photovault-angular:build:production"
            },
            "development": {
              "buildTarget": "photovault-angular:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular/build:extract-i18n"
        },
        "test": {
          "builder": "@angular/build:karma",
          "options": {
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.css"
            ]
          }
        }
      }
    }
  }
}
</file>

<file path="package.json">
{
  "name": "photovault-angular",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "serve:ssr:photovault-angular": "node dist/photovault-angular/server/server.mjs"
  },
  "prettier": {
    "overrides": [
      {
        "files": "*.html",
        "options": {
          "parser": "angular"
        }
      }
    ]
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^20.1.3",
    "@angular/cdk": "^20.1.3",
    "@angular/common": "^20.1.0",
    "@angular/compiler": "^20.1.0",
    "@angular/core": "^20.1.0",
    "@angular/forms": "^20.1.0",
    "@angular/material": "^20.1.3",
    "@angular/platform-browser": "^20.1.0",
    "@angular/platform-browser-dynamic": "^20.1.3",
    "@angular/platform-server": "^20.1.0",
    "@angular/router": "^20.1.0",
    "@angular/ssr": "^20.1.2",
    "axios": "^1.11.0",
    "express": "^5.1.0",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0"
  },
  "devDependencies": {
    "@angular/build": "^20.1.2",
    "@angular/cli": "^20.1.2",
    "@angular/compiler-cli": "^20.1.0",
    "@types/express": "^5.0.1",
    "@types/jasmine": "~5.1.0",
    "@types/node": "^20.17.19",
    "jasmine-core": "~5.8.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.8.2"
  }
}
</file>

<file path="README.md">
# PhotovaultAngular

This project was generated using [Angular CLI](https://github.com/angular/angular-cli) version 20.1.2.

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.
</file>

<file path="tsconfig.app.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": [
      "node"
    ]
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "src/**/*.spec.ts"
  ]
}
</file>

<file path="tsconfig.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "experimentalDecorators": true,
    "importHelpers": true,
    "target": "ES2022",
    "module": "preserve"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "typeCheckHostBindings": true,
    "strictTemplates": true
  },
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.spec.json"
    }
  ]
}
</file>

<file path="tsconfig.spec.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.ts"
  ]
}
</file>

</files>
