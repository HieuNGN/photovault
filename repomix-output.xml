This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
photovault-be/
  .mvn/
    wrapper/
      maven-wrapper.properties
  src/
    main/
      java/
        com/
          internship/
            photovault/
              config/
                CorsConfig.java
                FileValidationConfig.java
                SecurityConfig.java
              controller/
                HealthCheckController.java
                ImageController.java
                UserController.java
              entity/
                Collection.java
                Image.java
                ImageStates.java
                Tag.java
                User.java
              exception/
                ImageNotFoundException.java
                InvalidFileTypeException.java
                RestExceptionHandler.java
              initilization/
                AdminUserInitializer.java
              repository/
                ImageRepository.java
                ImageStatesRepository.java
                UserRepository.java
              security/
                CustomUserDetailsService.java
              service/
                ImageService.java
                ImageStatesService.java
                UserService.java
              PhotovaultApplication.java
      resources/
        db/
          migration/
            V2__create_users_table.sql
            V3_add_user_to_images.sql
            V4__create_collections_and_tags.sql
            V5__enhance_file_security.sql
            V6__add_database_constraints.sql
            V7__create_image_states.sql
        schema.sql
    test/
      java/
        com/
          internship/
            photovault/
              PhotovaultApplicationTests.java
  .directory
  .gitattributes
  .gitignore
  mvnw
  mvnw.cmd
  pom.xml
photovault-fe/
  public/
    index.html
    manifest.json
    robots.txt
  src/
    components/
      ImageCard/
        ImageCard.tsx
      ImageThumbnail/
        ImageThumbnail.tsx
      ImageUploads/
        ImageUploads.tsx
    hooks/
      useThumbnail.ts
    pages/
      Archive.tsx
      Favorites.tsx
      Home.tsx
      Trash.tsx
    services/
      api.ts
    types/
      Image.ts
    App.css
    App.test.tsx
    App.tsx
    index.css
    index.tsx
    logo.svg
    react-app-env.d.ts
    reportWebVitals.ts
    setupTests.ts
  .env
  .gitignore
  package.json
  README.md
  repomix-output.xml
  tsconfig.json
.directory
.gitignore
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="photovault-be/src/main/java/com/internship/photovault/config/SecurityConfig.java">
package com.internship.photovault.config;

import com.internship.photovault.security.CustomUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final CustomUserDetailsService customUserDetailsService;

    public SecurityConfig(CustomUserDetailsService customUserDetailsService) {
        this.customUserDetailsService = customUserDetailsService;
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(authz -> authz
                        .requestMatchers("/users/register", "/users/login", "/users/init-admin").permitAll()
                        .requestMatchers("/h2-console/**").permitAll() // If using H2 for testing
                        .anyRequest().authenticated()
                )
                .formLogin(form -> form
//                        .loginPage("/login") // only for custom made login page
                        .defaultSuccessUrl("/images", true)
                        .permitAll()
                )
                .logout(logout -> logout
                        .logoutSuccessUrl("/login")
                        .permitAll()
                )
                .userDetailsService(customUserDetailsService) // Use custom service including users, names, passwords, roles
                .csrf(csrf -> csrf.disable()) // Disable for API testing
                .headers(headers -> headers.frameOptions(frameOptions -> frameOptions.disable()).disable()); // Disable frame options for H2 console access
//        .headers(headers -> headers.frameOptions.disable()); // deprecated in Spring Security 6.1

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}

// blank test
/*import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}*/
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/controller/UserController.java">
package com.internship.photovault.controller;

import com.internship.photovault.entity.User;
import com.internship.photovault.service.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/users")
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/register")
    public ResponseEntity<Map<String, Object>> registerUser(
            @RequestParam("username") String username,
            @RequestParam("email") String email,
            @RequestParam("password") String password) {
        try {
            User user = userService.createUser(username, email, password);
            return ResponseEntity.ok(Map.of(
                    "message", "User registered successfully",
                    "user", Map.of(
                            "id", user.getId(),
                            "username", user.getUsername(),
                            "email", user.getEmail(),
                            "role", user.getRole()
                    )
            ));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Registration failed: " + e.getMessage()));
        }
    }

/*    @GetMapping("/login")
    public ResponseEntity<Map<String, Object>> showLoginForm() {

        return ResponseEntity.ok(Map.of("message", "Please provide username and password to login."));
    }*/

    @PostMapping("/login")
    public ResponseEntity<Map<String, Object>> loginUser(
            @RequestParam("username") String username,
            @RequestParam("password") String password) {
        try {
            User user = userService.findByUsername(username);

            if (userService.validatePassword(password, user.getPasswordHash())) {
                return ResponseEntity.ok(Map.of(
                        "message", "Login successful",
                        "user", Map.of(
                                "id", user.getId(),
                                "username", user.getUsername(),
                                "email", user.getEmail(),
                                "role", user.getRole()
                        )
                ));
            } else {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(Map.of("error", "Invalid credentials"));
            }
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", "Invalid credentials"));
        }
    }

    @GetMapping("/profile")
    public ResponseEntity<User> getUserProfile() {
        try {
            User currentUser = userService.getCurrentUser();
            return ResponseEntity.ok(currentUser);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }

    @GetMapping("/all")
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllActiveUsers();
        return ResponseEntity.ok(users);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Map<String, Object>> updateUser(
            @PathVariable("id") Long id,
            @RequestParam("email") String email) {
        try {
            User updatedUser = userService.updateUser(id, email);
            return ResponseEntity.ok(Map.of(
                    "message", "User updated successfully",
                    "user", updatedUser
            ));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Update failed: " + e.getMessage()));
        }
    }

    @PostMapping("/init-admin")
    public ResponseEntity<Map<String, Object>> initializeAdminUser() {
        try {
            User admin = userService.createDefaultAdminUser();
            return ResponseEntity.ok(Map.of(
                    "message", "Admin user initialized",
                    "admin", Map.of(
                            "id", admin.getId(),
                            "username", admin.getUsername(),
                            "email", admin.getEmail()
                    )
            ));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Failed to initialize admin user: " + e.getMessage()));
        }
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/entity/ImageStates.java">
package com.internship.photovault.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "image_states")
@Getter
@Setter
public class ImageStates {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "image_id", nullable = false)
    private Image image;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(name = "is_favorite")
    private Boolean isFavorite = false;

    @Column(name = "is_archived")
    private Boolean isArchived = false;

    @Column(name = "view_count")
    private Long viewCount = 0L;

    @Column(name = "last_viewed")
    private LocalDateTime lastViewed;

    @CreationTimestamp
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/initilization/AdminUserInitializer.java">
package com.internship.photovault.initilization;


import com.internship.photovault.entity.User;
import com.internship.photovault.repository.UserRepository;
import com.internship.photovault.service.UserService;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

@Component
@Profile("!production") // run in non prod only
public class AdminUserInitializer implements ApplicationRunner {
    private final UserService userService;
    private final PasswordEncoder passwordEncoder;
    private final UserRepository userRepository;

    public AdminUserInitializer(UserService userService, PasswordEncoder passwordEncoder, UserRepository userRepository) {
        this.userService = userService;
        this.passwordEncoder = passwordEncoder;
        this.userRepository = userRepository;
    }

    @Override
    public void run(ApplicationArguments args) throws Exception {
        createAdminUserIfNotExists();
    }
    public void createAdminUserIfNotExists() {
        if (userRepository.findByUsername("admin").isEmpty()) {
            User admin = new User();
            admin.setUsername("admin");
            admin.setEmail("admin@photovault.com");
            admin.setPasswordHash(passwordEncoder.encode("hm102499"));
            admin.setRole(User.Role.ADMIN);
            admin.setIsActive(true);

            userRepository.save(admin);
            System.out.println("Admin user created! Remember your credentials");
        }
    }

}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/repository/ImageStatesRepository.java">
package com.internship.photovault.repository;

import com.internship.photovault.entity.Image;
import com.internship.photovault.entity.ImageStates;
import com.internship.photovault.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ImageStatesRepository extends JpaRepository<ImageStates, Long> {
    Optional<ImageStates> findByImageAndUser(Image image, User user);
    List<ImageStates> findByUserAndIsFavoriteTrue(User user);
    List<ImageStates> findByUserAndIsArchivedTrue(User user);

    @Query("SELECT COUNT(is) FROM ImageStates is WHERE is.user = :user AND is.isFavorite = true")
    long countFavoritesByUser(@Param("user") User user);

    @Query("SELECT COUNT(is) FROM ImageStates is WHERE is.user = :user AND is.isArchived = true")
    long countArchivedByUser(@Param("user") User user);

    @Modifying
    @Query("UPDATE ImageStates ist SET ist.viewCount = ist.viewCount + 1, ist.lastViewed = CURRENT_TIMESTAMP WHERE ist.image = :image AND ist.user = :user")
    void incrementViewCount(@Param("image") Image image, @Param("user") User user);

    @Query("SELECT ist FROM ImageStates ist WHERE ist.user = :user ORDER BY ist.lastViewed DESC")
    List<ImageStates> findRecentlyViewedByUser(@Param("user") User user);
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/repository/UserRepository.java">
package com.internship.photovault.repository;

import com.internship.photovault.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    Optional<User> findByEmail(String email);
    boolean existsByUsername(String username);
    boolean existsByEmail(String email);

    @Query("SELECT u FROM User u WHERE u.isActive = true")
    List<User> findAllActiveUsers();

    @Query("SELECT u FROM User u WHERE u.isActive = true AND u.id = :id")
    Optional<User> findActiveUserById(@Param("id") Long id);
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/security/CustomUserDetailsService.java">
package com.internship.photovault.security;

import com.internship.photovault.entity.User;
import com.internship.photovault.repository.UserRepository;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.Collections;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + username));

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPasswordHash(),
                user.getIsActive(),
                false, // account not expired
                false, // credentials not expired
                true, // account not locked
                getAuthorities(user)
        );
    }

    private Collection<? extends GrantedAuthority> getAuthorities(User user) {
        return Collections.singletonList(
                new SimpleGrantedAuthority("ROLE_" + user.getRole().name())
        );
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/service/ImageStatesService.java">
package com.internship.photovault.service;

import com.internship.photovault.entity.Image;
import com.internship.photovault.entity.ImageStates;
import com.internship.photovault.entity.User;
import com.internship.photovault.repository.ImageStatesRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Service
@Transactional
public class ImageStatesService {

    private final ImageStatesRepository imageStatesRepository;

    public ImageStatesService(ImageStatesRepository imageStatesRepository) {
        this.imageStatesRepository = imageStatesRepository;
    }

    public ImageStates getOrCreateImageState(Image image, User user) {
        return imageStatesRepository.findByImageAndUser(image, user)
                .orElseGet(() -> {
                    ImageStates newState = new ImageStates();
                    newState.setImage(image);
                    newState.setUser(user);
                    newState.setIsFavorite(false);
                    newState.setIsArchived(false);
                    newState.setViewCount(0L);
                    return imageStatesRepository.save(newState);
                });
    }

    public ImageStates toggleFavorite(Image image, User user) {
        ImageStates state = getOrCreateImageState(image, user);
        state.setIsFavorite(!state.getIsFavorite());
        return imageStatesRepository.save(state);
    }

    public ImageStates toggleArchive(Image image, User user) {
        ImageStates state = getOrCreateImageState(image, user);
        state.setIsArchived(!state.getIsArchived());
        return imageStatesRepository.save(state);
    }

    public void incrementViewCount(Image image, User user) {
        ImageStates state = getOrCreateImageState(image, user);
        state.setViewCount(state.getViewCount() + 1);
        state.setLastViewed(LocalDateTime.now());
        imageStatesRepository.save(state);
    }

    public List<ImageStates> getFavoriteImages(User user) {
        return imageStatesRepository.findByUserAndIsFavoriteTrue(user);
    }

    public List<ImageStates> getArchivedImages(User user) {
        return imageStatesRepository.findByUserAndIsArchivedTrue(user);
    }

    public List<ImageStates> getRecentlyViewed(User user) {
        return imageStatesRepository.findRecentlyViewedByUser(user);
    }

    public long countFavorites(User user) {
        return imageStatesRepository.countFavoritesByUser(user);
    }

    public long countArchived(User user) {
        return imageStatesRepository.countArchivedByUser(user);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/service/UserService.java">
package com.internship.photovault.service;

import com.internship.photovault.entity.User;
import com.internship.photovault.repository.UserRepository;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public User getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication == null || !authentication.isAuthenticated()) {
            throw new RuntimeException("No authenticated found!");
        }

        String username = authentication.getName();
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found: " + username));
    }

    public User createUser(String username, String email, String password) {
        if (userRepository.existsByUsername(username)) {
            throw new IllegalArgumentException("Username already exists");
        }
        if (userRepository.existsByEmail(email)) {
            throw new IllegalArgumentException("Email already exists");
        }

        User user = new User();
        user.setUsername(username);
        user.setEmail(email);
        user.setPasswordHash(passwordEncoder.encode(password));
        user.setRole(User.Role.USER);
        user.setIsActive(true);

        return userRepository.save(user);
    }

    public User findByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));
    }

    public User findByEmail(String email) {
        return userRepository.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("User not found"));
    }

    public User findById(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found"));
    }

    public List<User> getAllActiveUsers() {
        return userRepository.findAllActiveUsers();
    }

    public User updateUser(Long id, String email) {
        User user = findById(id);

        if (!user.getEmail().equals(email) && userRepository.existsByEmail(email)) {
            throw new IllegalArgumentException("Email already exists");
        }

        user.setEmail(email);
        return userRepository.save(user);
    }

    public void deactivateUser(Long id) {
        User user = findById(id);
        user.setIsActive(false);
        userRepository.save(user);
    }

    public boolean validatePassword(String rawPassword, String encodedPassword) {
        return passwordEncoder.matches(rawPassword, encodedPassword);
    }

    // Temporary method for development - replace with proper authentication later
/*    public User getCurrentUser() {
        return userRepository.findById(1L)
                .orElseThrow(() -> new RuntimeException("Default admin user not found"));
    }*/

    // Method to create a default admin user if it doesn't exist
    public User createDefaultAdminUser() {
        if (userRepository.findByUsername("admin").isEmpty()) {
            User admin = new User();
            admin.setUsername("admin");
            admin.setEmail("admin@photovault.com");
            admin.setPasswordHash(passwordEncoder.encode("hm102499"));
            admin.setRole(User.Role.ADMIN);
            admin.setIsActive(true);

            return userRepository.save(admin);
        }
        return userRepository.findByUsername("admin").get();
    }
}
</file>

<file path="photovault-be/src/main/resources/db/migration/V6__add_database_constraints.sql">
-- Add automatic timestamp updates
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply to relevant tables
CREATE TRIGGER update_images_updated_at BEFORE UPDATE ON images
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_collections_updated_at BEFORE UPDATE ON collections
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Soft delete trigger for images
CREATE OR REPLACE FUNCTION soft_delete_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.is_deleted = TRUE AND OLD.is_deleted = FALSE THEN
        NEW.deleted_at = CURRENT_TIMESTAMP;
    ELSIF NEW.is_deleted = FALSE AND OLD.is_deleted = TRUE THEN
        NEW.deleted_at = NULL;
END IF;
RETURN NEW;
END;
$$ language 'plpgsql';

-- Add deleted_at column to images
ALTER TABLE images ADD COLUMN deleted_at TIMESTAMP;

CREATE TRIGGER images_soft_delete BEFORE UPDATE ON images
    FOR EACH ROW EXECUTE FUNCTION soft_delete_trigger();

-- Add better constraints
ALTER TABLE images ADD CONSTRAINT check_file_size_positive CHECK (file_size > 0);
ALTER TABLE images ADD CONSTRAINT check_content_type_valid CHECK (content_type IN ('image/jpeg', 'image/png', 'image/gif', 'image/webp'));

-- Add performance indexes
CREATE INDEX idx_images_user_deleted ON images(user_id, is_deleted) WHERE is_deleted = FALSE;
CREATE INDEX idx_images_user_favorite ON images(user_id, is_favorite) WHERE is_favorite = TRUE AND is_deleted = FALSE;
CREATE INDEX idx_images_user_archived ON images(user_id, is_archived) WHERE is_archived = TRUE AND is_deleted = FALSE;
CREATE INDEX idx_images_upload_date_desc ON images(upload_date DESC);
</file>

<file path="photovault-be/src/main/resources/db/migration/V7__create_image_states.sql">
-- Create image states table for better normalization
CREATE TABLE image_states (
                              id BIGSERIAL PRIMARY KEY,
                              image_id BIGINT NOT NULL REFERENCES images(id) ON DELETE CASCADE,
                              user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                              is_favorite BOOLEAN DEFAULT FALSE,
                              is_archived BOOLEAN DEFAULT FALSE,
                              view_count BIGINT DEFAULT 0,
                              last_viewed TIMESTAMP,
                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                              UNIQUE(image_id, user_id)
);

-- Migrate existing favorite/archive data
INSERT INTO image_states (image_id, user_id, is_favorite, is_archived)
SELECT id, user_id, is_favorite, is_archived
FROM images
WHERE user_id IS NOT NULL;

-- Add indexes for performance
CREATE INDEX idx_image_states_user_favorite ON image_states(user_id, is_favorite) WHERE is_favorite = TRUE;
CREATE INDEX idx_image_states_user_archived ON image_states(user_id, is_archived) WHERE is_archived = TRUE;
CREATE INDEX idx_image_states_image_id ON image_states(image_id);

-- Add trigger for automatic updates
CREATE TRIGGER update_image_states_updated_at BEFORE UPDATE ON image_states
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
</file>

<file path="photovault-be/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/config/CorsConfig.java">
package com.internship.photovault.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebMvc
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:3000")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/config/FileValidationConfig.java">
package com.internship.photovault.config;

import org.springframework.stereotype.Component;
import java.util.Set;

@Component
public class FileValidationConfig {
    private static final Set<String> ALLOWED_TYPES = Set.of(
            "image/jpeg", "image/png", "image/gif", "image/webp"
    );

    public boolean isValidImageType(String contentType) {
        return ALLOWED_TYPES.contains(contentType);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/controller/HealthCheckController.java">
package com.internship.photovault.controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/health")
public class HealthCheckController {

    @GetMapping // This creates GET /health
    public String checkHealth() {
        return "Houston, we are live! API is working";
    }

    @GetMapping("/info")  // Remove the duplicate /api/v1 prefix
    public String getInfo() {
        return "This is the API for the Photovault application";
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/controller/ImageController.java">
package com.internship.photovault.controller;

import com.internship.photovault.entity.Image;
import com.internship.photovault.entity.User;
import com.internship.photovault.exception.ImageNotFoundException;
import com.internship.photovault.exception.InvalidFileTypeException;
import com.internship.photovault.service.ImageService;
import com.internship.photovault.service.UserService;
import jakarta.validation.constraints.NotNull;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/images")
//@CrossOrigin(origins = "*")
@Validated
public class ImageController {

    private final ImageService imageService;
    private final UserService userService;

    public ImageController(ImageService imageService, UserService userService) {
        this.imageService = imageService;
        this.userService = userService;
    }

    @PostMapping("/upload")
    public ResponseEntity<?> uploadImage(@RequestParam("file") @NotNull MultipartFile file) {
        try {
            if (file.isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(Map.of("error", "File cannot be empty"));
            }

            User currentUser = userService.getCurrentUser();
//            Image savedImage = imageService.saveImage(file, currentUser);

            Image savedImage = imageService.saveImage(file, currentUser);
            return ResponseEntity.ok(Map.of(
                    "message", "Image uploaded successfully",
                    "image", savedImage
            ));
        } catch (InvalidFileTypeException e) {
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Failed to upload image: " + e.getMessage()));
        }
    }

    @PostMapping("/upload/multiple")
    public ResponseEntity<?> uploadMultipleImages(@RequestParam("files") @NotNull MultipartFile[] files) {
        try {
            if (files.length == 0) {
                return ResponseEntity.badRequest()
                        .body(Map.of("error", "No files uploaded"));
            }


            List<Map<String, Object>> results = new ArrayList<>();
            List<Image> successfulUploads = new ArrayList<>();
            List<Map<String, String>> failedUploads = new ArrayList<>();

            for (int i = 0; i < files.length; i++) {
                MultipartFile file = files[i];
                try {
                    if (!file.isEmpty()) {
                        Image savedImage = imageService.saveImage(file, userService.getCurrentUser());
                        successfulUploads.add(savedImage);
                        results.add(Map.of(
                                "index", i,
                                "filename", file.getOriginalFilename(),
                                "status", "success",
                                "image", savedImage
                        ));
                    } else {
                        failedUploads.add(Map.of(
                                "index", String.valueOf(i),
                                "filename", file.getOriginalFilename() != null ? file.getOriginalFilename() : "unknown",
                                "error", "File is empty"
                        ));
                    }
                } catch (InvalidFileTypeException e) {
                    failedUploads.add(Map.of(
                            "index", String.valueOf(i),
                            "filename", file.getOriginalFilename() != null ? file.getOriginalFilename() : "unknown",
                            "error", e.getMessage()
                    ));
                } catch (Exception e) {
                    failedUploads.add(Map.of(
                            "index", String.valueOf(i),
                            "filename", file.getOriginalFilename() != null ? file.getOriginalFilename() : "unknown",
                            "error", "Upload failed: " + e.getMessage()
                    ));
                }
            }

            return ResponseEntity.ok(Map.of(
                    "message", String.format("Processed %d files: %d successful, %d failed",
                            files.length, successfulUploads.size(), failedUploads.size()),
                    "successful", successfulUploads.size(),
                    "failed", failedUploads.size(),
                    "results", results,
                    "errors", failedUploads
            ));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Failed to process uploads: " + e.getMessage()));
        }
    }

    @GetMapping
    public ResponseEntity<Page<Image>> getAllImages(
            @RequestParam(value = "page", defaultValue = "0") int page,
            @RequestParam(value = "size", defaultValue = "10") int size,
            @RequestParam(value = "sortBy", defaultValue = "uploadDate") String sortBy,
            @RequestParam(value = "sortDir", defaultValue = "desc") String sortDir) {

        User currentUser = userService.getCurrentUser();

        Pageable pageable = PageRequest.of(page, size,
                sortDir.equalsIgnoreCase("desc") ?
                        Sort.by(sortBy).descending() : Sort.by(sortBy).ascending());

        Page<Image> images = imageService.getAllImages(currentUser, pageable);
            return ResponseEntity.ok(images);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getImageById(@PathVariable("id") Long id) {
        try {
            User currentUser = userService.getCurrentUser();
            Image image = imageService.getImageById(id, currentUser);
            return ResponseEntity.ok(image);
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/{id}/download")
    public ResponseEntity<Resource> downloadImage(@PathVariable("id") Long id) {
        try {
            User currentUser = userService.getCurrentUser();
            Image image = imageService.getImageById(id, currentUser);
            Resource resource = imageService.loadImageAsResource(image.getStoredFilename());

            return ResponseEntity.ok()
                    .contentType(MediaType.parseMediaType(image.getContentType()))
                    .header(HttpHeaders.CONTENT_DISPOSITION,
                            "attachment; filename=\"" + image.getOriginalFilename() + "\"")
                    .body(resource);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/{id}/favorite")
    public ResponseEntity<?> toggleFavorite(@PathVariable("id") Long id) {
        try {
            User currentUser = userService.getCurrentUser();
            Image image = imageService.toggleFavorite(id, currentUser);
            return ResponseEntity.ok(Map.of(
                    "message", "Favorite status updated",
                    "isFavorite", image.getIsFavorite()
            ));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/favorites")
    public ResponseEntity<List<Image>> getFavorites() {
        User currentUser = userService.getCurrentUser();
        List<Image> favorites = imageService.getFavorites(currentUser);
        return ResponseEntity.ok(favorites);
    }

    @GetMapping("/search")
    public ResponseEntity<List<Image>> searchImages(@RequestParam("query") String query) {
        List<Image> results = imageService.searchImages(query, userService.getCurrentUser());
        return ResponseEntity.ok(results);
    }

    @GetMapping("/stats")
    public ResponseEntity<Map<String, Object>> getStats() {
        User currentUser = userService.getCurrentUser();
        Map<String, Object> stats = imageService.getImageStats(currentUser);
        return ResponseEntity.ok(stats);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteImage(@PathVariable("id") Long id) {
        try {
            User currentUser = userService.getCurrentUser();
            imageService.moveToTrash(id, currentUser);
//            imageService.moveToTrash(id);
            return ResponseEntity.ok(Map.of("message", "Item moved to trash"));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/{id}/archive")
    public ResponseEntity<?> toggleArchive(@PathVariable("id") Long id) {
        try {
            User currentUser = userService.getCurrentUser();
            Image image = imageService.toggleArchive(id, currentUser);
            return ResponseEntity.ok(Map.of(
                    "message", "Archive status updated",
                    "isArchived", image.getIsArchived()
            ));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/archived")
    public ResponseEntity<List<Image>> getArchivedImages() {
        User currentUser = userService.getCurrentUser();
        List<Image> archivedImages = imageService.getArchivedImages(currentUser);
        return ResponseEntity.ok(archivedImages);
    }

//    adding the backend endpoints for the trash and restore functions
    @GetMapping("/trash")
    public ResponseEntity<List<Image>> getTrashedImages() {
        User currentUser = userService.getCurrentUser();
        List<Image> trashedImages = imageService.getTrashedImages(currentUser);
        return ResponseEntity.ok(trashedImages);
    }
    @PutMapping("/{id}/restore")
    public ResponseEntity<?> restoreImage(@PathVariable("id") Long id) {
        try {
            User currentUser = userService.getCurrentUser();
            Image image = imageService.restoreFromTrash(id, currentUser);
            return ResponseEntity.ok(Map.of(
                    "message", "Item restored from trash",
                    "image", image
            ));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }
    @DeleteMapping("/{id}/permanent")
    public ResponseEntity<?> deletePermanently(@PathVariable("id") Long id) {
        try {
            imageService.deletePermanently(id, userService.getCurrentUser());
            return ResponseEntity.ok(Map.of("message", "Item permanently deleted"));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/{id}/thumbnail")
    public ResponseEntity<Resource> getThumbnail(@PathVariable("id") Long id) {
        try {
            // Use internal method to bypass deletion check
            User currentUser = userService.getCurrentUser();
            Image image = imageService.getImageByIdInternal(id);
            Resource resource = imageService.loadImageAsResource(image.getStoredFilename());

            return ResponseEntity.ok()
                    .contentType(MediaType.parseMediaType(image.getContentType()))
                    .body(resource);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/entity/Collection.java">
package com.internship.photovault.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "collections")
@Getter
@Setter
public class Collection {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(nullable = false)
    private String name;

    private String description;

    @Column(name = "is_public")
    private Boolean isPublic = false;

    @CreationTimestamp
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @ManyToMany
    @JoinTable(
            name = "collection_images",
            joinColumns = @JoinColumn(name = "collection_id"),
            inverseJoinColumns = @JoinColumn(name = "image_id")
    )
    private Set<Image> images = new HashSet<>();
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/entity/Image.java">
package com.internship.photovault.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Setter
@Getter
@Entity
@Table(name = "images")
public class Image {

    // Getters and Setters
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "filename", nullable = false)
    @NotBlank(message = "Filename cannot be blank")
    private String filename;

    @Column(name = "stored_filename", nullable = false)
    @NotBlank(message = "Stored filename cannot be blank")
    private String storedFilename;

    @Column(name = "original_filename", nullable = false)
    @NotBlank(message = "Original filename cannot be blank")
    private String originalFilename;

    @Column(name = "file_path", nullable = false, length = 500)
    @NotBlank(message = "File path cannot be blank")
    private String filePath;

    @Column(name = "file_size", nullable = false)
    @Min(value = 1, message = "File size must be greater than 0")
    private Long fileSize;

    @Column(name = "content_type", nullable = false)
    @NotBlank(message = "Content type cannot be blank")
    private String contentType;

    @Column(name = "upload_date")
    private LocalDateTime uploadDate;

    @Column(name = "is_favorite")
    private Boolean isFavorite = false;

    @Column(name = "is_archived")
    private Boolean isArchived = false;

    @Column(name = "is_deleted")
    private Boolean isDeleted = false;

    @CreationTimestamp
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    // user relationships
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonIgnore // Prevent circular reference in JSON serialization
    private User user;

    @Column(name = "checksum_sha256")
    private String checksumSha256;

    @ManyToMany
    @JoinTable(
            name = "image_tags",
            joinColumns = @JoinColumn(name = "image_id"),
            inverseJoinColumns = @JoinColumn(name = "tag_id")
    )
    private Set<Tag> tags = new HashSet<>();

    @OneToMany(mappedBy = "image", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<ImageStates> imageStates = new HashSet<>();

    // Add helper method to get user-specific state
    public ImageStates getStateForUser(User user) {
        return imageStates.stream()
                .filter(state -> state.getUser().equals(user))
                .findFirst()
                .orElse(null);
    }


/*    @Column(name = "filename", unique = true, nullable = false)
    private String filename;*/

    // Constructors
    public Image() {
        this.uploadDate = LocalDateTime.now();
    }

/*
    public String getStoredFilename() {
        return storedFilename;
    }
*/

}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/entity/Tag.java">
package com.internship.photovault.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "tags")
@Getter
@Setter
public class Tag {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String name;

    @CreationTimestamp
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @ManyToMany(mappedBy = "tags")
    private Set<Image> images = new HashSet<>();
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/entity/User.java">
package com.internship.photovault.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "users")
@Getter
@Setter
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    @Column(unique = true, nullable = false)
    private String email;

    @Column(name = "password_hash", nullable = false)
    private String passwordHash;

/*
    // remove the column for security reasons
    @Column(name = "password", nullable = false)
    private String password;
*/

    @Enumerated(EnumType.STRING)
    private Role role = Role.USER;

    @Column(name = "is_active")
    private Boolean isActive = true;

    @CreationTimestamp
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;



    public enum Role {
        USER, ADMIN
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/exception/ImageNotFoundException.java">
package com.internship.photovault.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

// This annotation tells Spring to respond with a 404 NOT FOUND status when this exception is thrown
//@ResponseStatus(HttpStatus.NOT_FOUND)
public class ImageNotFoundException extends RuntimeException {
    public ImageNotFoundException(String message) {
        super(message);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/exception/InvalidFileTypeException.java">
package com.internship.photovault.exception;


import java.io.Serial;

public class InvalidFileTypeException extends RuntimeException {
    @Serial
    private static final long serialVersionUID = 1L;

    public InvalidFileTypeException(String message) {
        super(message);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/exception/RestExceptionHandler.java">
package com.internship.photovault.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.multipart.MaxUploadSizeExceededException;

import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

@RestControllerAdvice
public class RestExceptionHandler {

    @ExceptionHandler(ImageNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleImageNotFound(ImageNotFoundException ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.NOT_FOUND.value());
        body.put("error", "Image Not Found");
        body.put("message", ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(InvalidFileTypeException.class)
    public ResponseEntity<Map<String, Object>> handleInvalidFileType(InvalidFileTypeException ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.BAD_REQUEST.value());
        body.put("error", "Invalid File Type");
        body.put("message", ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(MaxUploadSizeExceededException.class)
    public ResponseEntity<Map<String, Object>> handleMaxSizeException(MaxUploadSizeExceededException ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.PAYLOAD_TOO_LARGE.value());
        body.put("error", "File Too Large");
        body.put("message", "File size exceeds maximum allowed size");

        return new ResponseEntity<>(body, HttpStatus.PAYLOAD_TOO_LARGE);
    }

    @ExceptionHandler(IllegalStateException.class)
    public ResponseEntity<Map<String, Object>> handleIllegalStateException(IllegalStateException ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.CONFLICT.value());
        body.put("error", "Conflict");
        body.put("message", ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGenericException(Exception ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());
        body.put("error", "Internal Server Error");
        body.put("message", "An unexpected error occurred: " + ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/repository/ImageRepository.java">
package com.internship.photovault.repository;

import com.internship.photovault.entity.Image;
import com.internship.photovault.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

// Early creation blank test
//@Repository
//public interface ImageRepository extends JpaRepository<Image, Long> {
//    // Spring Data JPA will automatically implement all basic CRUD methods.
//    // We can add custom query methods here later if needed.
//    List<Image> findByIsArchivedAndIsInTrash(boolean isArchived, boolean isInTrash, Sort sort);
//
//}

@Repository
public interface ImageRepository extends JpaRepository<Image, Long> {

    Page<Image> findByUserAndIsArchivedTrueAndIsDeletedFalse(User user, Pageable pageable);
    Page<Image> findByUserAndIsDeletedFalse(User user, Boolean isDeleted, Pageable pageable);
    Page<Image> findByUserAndIsFavoriteTrueAndIsDeletedFalse(User user, Pageable pageable);

    //  optional lookup methods
    Optional<Image> findByFilenameAndIsDeletedFalse(String filename);
    Optional<Image> findByStoredFilename(String filename);
    Optional<Image> findByChecksumSha256AndUser(String checksumSha256, User user);

    @Query("SELECT i FROM Image i WHERE i.user = :user AND i.isDeleted = false AND i.isArchived = false ORDER BY i.uploadDate DESC")
    Page<Image> findAllActiveImages(@Param("user") User user, @Param("isDeleted") Boolean isDeleted, Pageable pageable);

    @Query("SELECT i FROM Image i WHERE i.isDeleted = false AND i.isArchived = false ORDER BY i.uploadDate DESC")
    List<Image> findAllActiveImages();

/* Add proper generics to all methods, update the find all to exclude deleted
    @Query("SELECT i FROM Image i WHERE i.isDeleted = false")
    Page<Image> findAllActive(Pageable pageable);
  not deleted images, including archived and favorites*/

    @Query("SELECT i FROM Image i WHERE i.isDeleted = false ORDER BY i.uploadDate DESC")
    Page<Image> findAllDeleted(Pageable pageable);

    @Query("SELECT i FROM Image i WHERE i.isDeleted = true ORDER BY i.uploadDate DESC")
    List<Image> findAllDeleted();

//  other categories
    @Query("SELECT i FROM Image i WHERE i.user = :user AND i.isFavorite = true AND i.isDeleted = false ORDER BY i.uploadDate DESC")
    List<Image> findFavoriteImages(@Param("user") User user);

    @Query("SELECT i FROM Image i WHERE i.user = :user AND i.isArchived = true AND i.isDeleted = false ORDER BY i.uploadDate DESC")
    List<Image> findArchivedImages(@Param("user") User user);

    @Query("SELECT i FROM Image i WHERE i.user = :user AND i.isDeleted = true ORDER BY i.uploadDate DESC")
    List<Image> findTrashImages(@Param("user") User user);

//  search methods
    @Query("SELECT i FROM Image i WHERE i.user = :user AND i.originalFilename ILIKE %:searchTerm% AND i.isDeleted = false AND i.isArchived = false ORDER BY i.uploadDate DESC")
    List<Image> searchByOriginalFilename(@Param("searchTerm") String searchTerm, @Param("user") User user);

//  count methods
    @Query("SELECT COUNT(i) FROM Image i WHERE i.user = :user AND i.isDeleted = false AND i.isArchived = false")
    long countActiveImages(@Param("user") User user);

    @Query("SELECT COUNT(i) FROM Image i WHERE i.user = :user AND i.isFavorite = true AND i.isDeleted = false")
    long countFavoriteImages(@Param("user") User user);

    @Query("SELECT COUNT(i) FROM Image i WHERE i.user = :user AND i.isArchived = true AND i.isDeleted = false")
    long countArchivedImages(@Param("user") User user);

    @Query("SELECT COUNT(i) FROM Image i WHERE i.user = :user AND i.isDeleted = true")
    long countTrashedImages(@Param("user") User user);


//    User user(User user);
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/PhotovaultApplication.java">
package com.internship.photovault;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

//import jakarta.annotation.PostConstruct;
@EnableJpaRepositories(basePackages = "com.internship.photovault.repository")
@SpringBootApplication
public class PhotovaultApplication {

    public static void main(String[] args) {
        SpringApplication.run(PhotovaultApplication.class, args);
    }

// test environment variables, done testing
//	@PostConstruct
//	public void checkEnvVars() {
//		System.out.println("DB_URL from environment: " + System.getenv("DB_URL"));
//		System.out.println("DB_USERNAME from environment: " + System.getenv("DB_USERNAME"));
//		System.out.println("DB_PASSWORD loaded: " + (System.getenv("DB_PASSWORD") != null ? "YES" : "NO"));
//	}
}
</file>

<file path="photovault-be/src/main/resources/db/migration/V2__create_users_table.sql">
-- Create users table
CREATE TABLE users (
       id BIGSERIAL PRIMARY KEY,
       username VARCHAR(50) UNIQUE NOT NULL,
       email VARCHAR(255) UNIQUE NOT NULL,
       password_hash VARCHAR(255) NOT NULL,
       role VARCHAR(20) DEFAULT 'USER' CHECK (role IN ('USER', 'ADMIN')),
       is_active BOOLEAN DEFAULT TRUE,
       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
       updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for performance
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_active ON users(is_active) WHERE is_active = TRUE;

-- Insert a default admin user (change password immediately!)
INSERT INTO users (username, email, password_hash, role) VALUES
    ('admin', 'admin@photovault.com', 'photovault25q2!@', 'ADMIN');
</file>

<file path="photovault-be/src/main/resources/db/migration/V3_add_user_to_images.sql">
-- Add user_id column to images table
ALTER TABLE images ADD COLUMN user_id BIGINT;

-- Add foreign key constraint
ALTER TABLE images ADD CONSTRAINT fk_images_user
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;

-- For existing images, assign them to the admin user
UPDATE images SET user_id = 1 WHERE user_id IS NULL;

-- Make user_id required for new records
ALTER TABLE images ALTER COLUMN user_id SET NOT NULL;

-- Add checksum column for file integrity
ALTER TABLE images ADD COLUMN checksum_sha256 VARCHAR(64);

-- Add index for performance
CREATE INDEX idx_images_user_id ON images(user_id);
</file>

<file path="photovault-be/src/main/resources/db/migration/V4__create_collections_and_tags.sql">
-- Create collections table
CREATE TABLE collections (
         id BIGSERIAL PRIMARY KEY,
         user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
         name VARCHAR(255) NOT NULL,
         description TEXT,
         is_public BOOLEAN DEFAULT FALSE,
         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
         updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
         UNIQUE(user_id, name)
);

-- Create tags table
CREATE TABLE tags (
          id BIGSERIAL PRIMARY KEY,
          name VARCHAR(100) UNIQUE NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create image-tag relationship table
CREATE TABLE image_tags (
            image_id BIGINT REFERENCES images(id) ON DELETE CASCADE,
            tag_id BIGINT REFERENCES tags(id) ON DELETE CASCADE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (image_id, tag_id)
);

-- Create collection-image relationship table
CREATE TABLE collection_images (
               collection_id BIGINT REFERENCES collections(id) ON DELETE CASCADE,
               image_id BIGINT REFERENCES images(id) ON DELETE CASCADE,
               added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
               PRIMARY KEY (collection_id, image_id)
);

-- Create performance indexes
CREATE INDEX idx_collections_user_id ON collections(user_id);
CREATE INDEX idx_image_tags_tag_id ON image_tags(tag_id);
CREATE INDEX idx_collection_images_collection_id ON collection_images(collection_id);
</file>

<file path="photovault-be/src/main/resources/schema.sql">
-- Create images table if it doesn't exist
CREATE TABLE IF NOT EXISTS images (
    id BIGSERIAL PRIMARY KEY,
    filename VARCHAR(255) NOT NULL,
    stored_filename VARCHAR(255) NOT NULL,
    original_filename VARCHAR(255) NOT NULL,
    file_path VARCHAR(500) NOT NULL,
    file_size BIGINT NOT NULL,
    content_type VARCHAR(100) NOT NULL,
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_favorite BOOLEAN DEFAULT FALSE,
    is_archived BOOLEAN DEFAULT FALSE,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_images_filename ON images(filename);
CREATE INDEX IF NOT EXISTS idx_images_upload_date ON images(upload_date);
CREATE INDEX IF NOT EXISTS idx_images_is_deleted ON images(is_deleted);
</file>

<file path="photovault-be/src/test/java/com/internship/photovault/PhotovaultApplicationTests.java">
package com.internship.photovault;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class PhotovaultApplicationTests {

	@Test
	void contextLoads() {
	}

}
</file>

<file path="photovault-be/.directory">
[Desktop Entry]
Icon=folder-green
</file>

<file path="photovault-be/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="photovault-be/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="photovault-be/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="photovault-be/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.internship</groupId>
	<artifactId>photovault</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>photovault</name>
	<description>Demo project for Internship</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency> 
			<groupId>org.springframework.boot</groupId> 
			<artifactId>spring-boot-starter</artifactId> 
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!--<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>-->
		<dependency>
			<groupId>io.github.cdimascio</groupId>
			<artifactId>java-dotenv</artifactId>
			<version>5.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity6</artifactId>
		</dependency>
		<!--		<dependency>-->
<!--			<groupId>me.paulschwarz</groupId>-->
<!--			<artifactId>spring-dotenv</artifactId>-->
<!--			<version>4.0.0</version>-->
<!--		</dependency>-->

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
					<compilerArgs>
						<arg>-parameters</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
</file>

<file path="photovault-fe/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="photovault-fe/public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="photovault-fe/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="photovault-fe/src/components/ImageCard/ImageCard.tsx">
import React from 'react';
import { Card, CardMedia, CardActions, IconButton } from '@mui/material';
import { Favorite, FavoriteBorder, Archive, Download, Delete } from '@mui/icons-material';
import { Image } from '../../types/Image';

interface ImageCardProps {
    image: Image;
    onToggleFavorite: (id: number) => void;
    onToggleArchive: (id: number) => void;
    onDownload: (id: number, filename: string) => void;
    onDelete: (id: number) => void;
}

const ImageCard: React.FC<ImageCardProps> = React.memo(({
                                                            image,
                                                            onToggleFavorite,
                                                            onToggleArchive,
                                                            onDownload,
                                                            onDelete
                                                        }) => {
    return (
        <Card>
            <CardMedia
                component="img"
                height="200"
                image={`http://localhost:8080/images/${image.id}/download`}
                alt={image.originalFilename}
                sx={{ objectFit: 'cover' }}
            />
            <CardActions>
                <IconButton
                    onClick={() => onToggleFavorite(image.id)}
                    color={image.isFavorite ? 'error' : 'default'}
                >
                    {image.isFavorite ? <Favorite /> : <FavoriteBorder />}
                </IconButton>
                <IconButton onClick={() => onToggleArchive(image.id)}>
                    <Archive />
                </IconButton>
                <IconButton onClick={() => onDownload(image.id, image.originalFilename)}>
                    <Download />
                </IconButton>
                <IconButton onClick={() => onDelete(image.id)}>
                    <Delete />
                </IconButton>
            </CardActions>
        </Card>
    );
});

export default ImageCard;
</file>

<file path="photovault-fe/src/hooks/useThumbnail.ts">
import { useState, useEffect } from 'react';
import { imageApi } from '../services/api';

export const useThumbnail = (imageId: number, fallbackToRegular = false) => {
    const [thumbnailUrl, setThumbnailUrl] = useState<string | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(false);

    useEffect(() => {
        const loadThumbnail = async () => {
            try {
                setLoading(true);
                setError(false);

                const response = await imageApi.getThumbnail(imageId);
                const url = window.URL.createObjectURL(new Blob([response.data]));
                setThumbnailUrl(url);
            } catch (err) {
                if (fallbackToRegular) {
                    try {
                        const response = await imageApi.downloadImage(imageId);
                        const url = window.URL.createObjectURL(new Blob([response.data]));
                        setThumbnailUrl(url);
                    } catch (fallbackErr) {
                        setError(true);
                    }
                } else {
                    setError(true);
                }
            } finally {
                setLoading(false);
            }
        };

        loadThumbnail();

        return () => {
            if (thumbnailUrl) {
                window.URL.revokeObjectURL(thumbnailUrl);
            }
        };
    }, [imageId, fallbackToRegular]);

    return { thumbnailUrl, loading, error };
};
</file>

<file path="photovault-fe/src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="photovault-fe/src/index.tsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="photovault-fe/src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="photovault-fe/src/react-app-env.d.ts">
/// <reference types="react-scripts" />
</file>

<file path="photovault-fe/src/reportWebVitals.ts">
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="photovault-fe/src/setupTests.ts">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path="photovault-fe/.env">
REACT_APP_API_URL=http://localhost:8080
</file>

<file path="photovault-fe/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="photovault-fe/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).
</file>

<file path="photovault-fe/repomix-output.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  index.html
  manifest.json
  robots.txt
src/
  components/
    ImageUploads/
      ImageUploads.tsx
  services/
    api.ts
  App.css
  App.test.tsx
  App.tsx
  index.css
  index.tsx
  logo.svg
  react-app-env.d.ts
  reportWebVitals.ts
  setupTests.ts
.gitignore
package.json
photovault-fe.iml
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="src/components/ImageUploads/ImageUploads.tsx">
import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Box, Typography, CircularProgress, Alert } from '@mui/material';
import { CloudUpload } from '@mui/icons-material';
import { imageApi } from '../../services/api';

interface ImageUploadProps {
    onUploadSuccess: () => void;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ onUploadSuccess }) => {
    const [uploading, setUploading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const onDrop = useCallback(async (acceptedFiles: File[]) => {
        const file = acceptedFiles[0];
        if (!file) return;

        setUploading(true);
        setError(null);
        setSuccess(null);

        try {
            await imageApi.uploadImage(file);
            setSuccess(`Successfully uploaded ${file.name}`);
            onUploadSuccess();
        } catch (err: any) {
            setError(err.response?.data?.error || 'Upload failed');
        } finally {
            setUploading(false);
        }
    }, [onUploadSuccess]);

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: {
            'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']
        },
        maxSize: 10 * 3840 * 2160, // 10MB
        multiple: false
    });

    return (
        <Box sx={{ mb: 4 }}>
            <Box
                {...getRootProps()}
                sx={{
                    border: '2px dashed #ccc',
                    borderRadius: 2,
                    p: 4,
                    textAlign: 'center',
                    cursor: 'pointer',
                    backgroundColor: isDragActive ? '#f5f5f5' : 'transparent',
                    '&:hover': {
                        backgroundColor: '#f9f9f9',
                    },
                }}
            >
                <input {...getInputProps()} />
                {uploading ? (
                    <CircularProgress />
                ) : (
                    <>
                        <CloudUpload sx={{ fontSize: 48, color: '#666', mb: 2 }} />
                        <Typography variant="h6" gutterBottom>
                            {isDragActive ? 'Drop the image here' : 'Drag & drop an image here'}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">
                            or click to select a file
                        </Typography>
                        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                            Supports: JPEG, PNG, GIF, WebP (max 10MB)
                        </Typography>
                    </>
                )}
            </Box>

            {error && (
                <Alert severity="error" sx={{ mt: 2 }}>
                    {error}
                </Alert>
            )}

            {success && (
                <Alert severity="success" sx={{ mt: 2 }}>
                    {success}
                </Alert>
            )}
        </Box>
    );
};

export default ImageUpload;
</file>

<file path="src/services/api.ts">
import axios from 'axios';

const API_BASE_URL = 'http://localhost:8080/';

const api = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
});

export interface Image {
    id: number;
    filename: string;
    storedFilename: string;
    originalFilename: string;
    filePath: string;
    fileSize: number;
    contentType: string;
    uploadDate: string;
    isFavorite: boolean;
    isArchived: boolean;
    isDeleted: boolean;
}

export const imageApi = {
    // Test connection
    testConnection: () =>
        api.get('/health'),

    // Upload image
    uploadImage: (file: File) => {
        const formData = new FormData();
        formData.append('file', file);
        return api.post('/images/upload', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    },

    // Get all images with pagination
    getAllImages: (page = 0, size = 10) =>
        api.get(`/images?page=${page}&size=${size}`),

    // Get image by ID
    getImageById: (id: number) =>
        api.get(`/images/${id}`),

    // Download image
    downloadImage: (id: number) =>
        api.get(`/images/${id}/download`, { responseType: 'blob' }),

    // Toggle favorite
    toggleFavorite: (id: number) =>
        api.put(`/images/${id}/favorite`),

    // Get favorites
    getFavorites: () =>
        api.get('/images/favorites'),

    // Search images
    searchImages: (query: string) =>
        api.get(`/images/search?query=${query}`),

    // Delete image (move to trash)
    deleteImage: (id: number) =>
        api.delete(`/images/${id}`),

    // Get stats
    getStats: () =>
        api.get('/images/stats'),
};

export default api;
</file>

<file path="src/App.css">
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="src/App.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders photovault title', () => {
  render(<App />);
  const titleElement = screen.getByText(/Photovault API Test in progress/i);
  expect(titleElement).toBeInTheDocument();
});
</file>

<file path="src/App.tsx">
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Button,
  Alert,
  CircularProgress,
  Paper,
  Grid
} from '@mui/material';
import { CheckCircle, Error, Cloud } from '@mui/icons-material';
import { imageApi } from './services/api';

interface ConnectionStatus {
  backend: 'loading' | 'success' | 'error';
  message: string;
}

function App() {
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({
    backend: 'loading',
    message: 'Testing connection...'
  });
  const [stats, setStats] = useState<any>(null);
  const [images, setImages] = useState<any>(null);

  // Test backend connection
  const testBackendConnection = async () => {
    try {
      setConnectionStatus({ backend: 'loading', message: 'Testing backend connection...' });
      const response = await imageApi.testConnection();
      setConnectionStatus({
        backend: 'success',
        message: `Backend connected: ${response.data}`
      });
    } catch (error: any) {
      setConnectionStatus({
        backend: 'error',
        message: `Backend connection failed: ${error.message}`
      });
    }
  };

  // Test stats endpoint
  const testStatsEndpoint = async () => {
    try {
      const response = await imageApi.getStats();
      setStats(response.data);
    } catch (error: any) {
      console.error('Stats endpoint failed:', error);
    }
  };

  // Test images endpoint
  const testImagesEndpoint = async () => {
    try {
      const response = await imageApi.getAllImages();
      setImages(response.data);
    } catch (error: any) {
      console.error('Images endpoint failed:', error);
    }
  };

  // Test file upload
  const testFileUpload = async () => {
    // Create a small test image file
    const canvas = document.createElement('canvas');
    canvas.width = 100;
    canvas.height = 100;
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.fillStyle = '#4CAF50';
      ctx.fillRect(0, 0, 100, 100);
      ctx.fillStyle = 'white';
      ctx.font = '16px Arial';
      ctx.fillText('TEST', 30, 55);
    }

    canvas.toBlob(async (blob) => {
      if (blob) {
        const testFile = new File([blob], 'test-image.png', { type: 'image/png' });
        try {
          const response = await imageApi.uploadImage(testFile);
          alert(`Upload successful: ${JSON.stringify(response.data.message)}`);
          // Refresh stats and images after upload
          await testStatsEndpoint();
          await testImagesEndpoint();
        } catch (error: any) {
          alert(`Upload failed: ${error.response?.data?.error || error.message}`);
        }
      }
    }, 'image/png');
  };

  useEffect(() => {
    testBackendConnection();
    testStatsEndpoint();
    testImagesEndpoint();
  }, []);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'loading': return <CircularProgress size={20} />;
      case 'success': return <CheckCircle color="success" />;
      case 'error': return <Error color="error" />;
      default: return null;
    }
  };

  return (
      <Container maxWidth="md" sx={{ py: 4 }}>
        <Typography variant="h3" component="h1" gutterBottom align="center">
          📸 PhotoVault API Test
        </Typography>

        <Typography variant="subtitle1" align="center" color="textSecondary" sx={{ mb: 4 }}>
          Testing connection between React frontend and Spring Boot backend
        </Typography>

        {/* Connection Status */}
        <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
          <Box display="flex" alignItems="center" gap={2}>
            {getStatusIcon(connectionStatus.backend)}
            <Typography variant="h6">Backend Connection</Typography>
          </Box>
          <Alert
              severity={connectionStatus.backend === 'success' ? 'success' :
                  connectionStatus.backend === 'error' ? 'error' : 'info'}
              sx={{ mt: 2 }}
          >
            {connectionStatus.message}
          </Alert>
        </Paper>

        {/* API Endpoints Test */}
        <Grid container spacing={3}>
          <Grid size={{ xs: 12, md: 6 }}>
            <Paper elevation={2} sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                📊 Stats Endpoint
              </Typography>
              {stats ? (
                  <Box>
                    <Typography>Total Images: {stats.totalImages}</Typography>
                    <Typography>Favorites: {stats.favorites}</Typography>
                    <Typography>Archived: {stats.archived}</Typography>
                  </Box>
              ) : (
                  <Typography color="textSecondary">Loading stats...</Typography>
              )}
              <Button
                  variant="outlined"
                  onClick={testStatsEndpoint}
                  sx={{ mt: 2 }}
              >
                Refresh Stats
              </Button>
            </Paper>
          </Grid>

          <Grid size={{ xs: 12, md: 6 }}>
            <Paper elevation={2} sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                🖼️ Images Endpoint
              </Typography>
              {images ? (
                  <Box>
                    <Typography>
                      Found: {images.totalElements || images.length || 0} images
                    </Typography>
                    <Typography variant="caption" color="textSecondary">
                      {images.content ? 'Paginated response' : 'Simple array response'}
                    </Typography>
                  </Box>
              ) : (
                  <Typography color="textSecondary">Loading images...</Typography>
              )}
              <Button
                  variant="outlined"
                  onClick={testImagesEndpoint}
                  sx={{ mt: 2 }}
              >
                Refresh Images
              </Button>
            </Paper>
          </Grid>

          <Grid size={{ xs: 12 }}>
            <Paper elevation={2} sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                ⬆️ Upload Test
              </Typography>
              <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                This will create and upload a small test image to verify the upload endpoint.
              </Typography>
              <Button
                  variant="contained"
                  onClick={testFileUpload}
                  startIcon={<Cloud />}
                  disabled={connectionStatus.backend !== 'success'}
              >
                Test Upload
              </Button>
            </Paper>
          </Grid>
        </Grid>

        {/* Retry Connection */}
        <Box textAlign="center" sx={{ mt: 4 }}>
          <Button
              variant="outlined"
              onClick={testBackendConnection}
              disabled={connectionStatus.backend === 'loading'}
          >
            Retry Connection Test
          </Button>
        </Box>
      </Container>
  );
}

export default App;
</file>

<file path="src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="src/index.tsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="src/react-app-env.d.ts">
/// <reference types="react-scripts" />
</file>

<file path="src/reportWebVitals.ts">
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="src/setupTests.ts">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="package.json">
{
  "name": "photovault-fe",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@mui/icons-material": "^7.2.0",
    "@mui/material": "^7.2.0",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.126",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.10.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-dropzone": "^14.3.8",
    "react-router-dom": "^7.6.3",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="photovault-fe.iml">
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
</file>

<file path="README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
</file>

</files>
</file>

<file path="photovault-fe/tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
</file>

<file path=".directory">
[Desktop Entry]
Icon=folder-violet
</file>

<file path=".gitignore">
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

#Environment/Config Files
# .env
# src/main/resources/application.properties

#Database Migration Scripts that contains sensitive data
# src/main/resources/db/migration/V2__create_users_table.sql

#Codebase Summary
repomix-output-*.xml

#sql migration files
photovault_backup_20250711.sql

### STS ###
# .apt_generated
# .classpath
# .factorypath
# .project
# .settings
# .springBeans
# .sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/service/ImageService.java">
package com.internship.photovault.service;

    import com.internship.photovault.config.FileValidationConfig;
    import com.internship.photovault.entity.Image;
    import com.internship.photovault.entity.User;
    import com.internship.photovault.exception.ImageNotFoundException;
    import com.internship.photovault.exception.InvalidFileTypeException;
    import com.internship.photovault.repository.ImageRepository;
    import com.internship.photovault.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Value;
    import org.springframework.core.io.Resource;
    import org.springframework.core.io.UrlResource;
    import org.springframework.data.domain.Page;
    import org.springframework.data.domain.Pageable;
    import org.springframework.stereotype.Service;
    import org.springframework.web.multipart.MaxUploadSizeExceededException;
    import org.springframework.web.multipart.MultipartFile;

    import java.io.IOException;
    import java.io.InputStream;
    import java.net.MalformedURLException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;
    import java.time.LocalDateTime;
    import java.util.List;
    import java.util.Map;
    import java.util.Optional;
    import java.util.UUID;

    @Service
    public class ImageService {

        private final Path storageLocation;
        private final ImageRepository imageRepository;
        private final FileValidationConfig fileValidationConfig;

        private final UserRepository userRepository;

        public ImageService(@Value("${DB_LOCATION}") String storageLocationPath,
                            ImageRepository imageRepository,
                            FileValidationConfig fileValidationConfig, UserRepository userRepository) {
            this.storageLocation = Paths.get(storageLocationPath).toAbsolutePath().normalize();
            this.imageRepository = imageRepository;
            this.fileValidationConfig = fileValidationConfig;
            this.userRepository = userRepository;

            try {
                Files.createDirectories(this.storageLocation);
            } catch (IOException e) {
                throw new RuntimeException("Could not create the storage directory.", e);
            }
        }

        public Image saveImage(MultipartFile file, User user) throws IOException {
            // File size validation
            long maxFileSize = 30 * 3840 * 2160; // 30MB max size allowed
            if (file.getSize() > maxFileSize) {
                throw new MaxUploadSizeExceededException(maxFileSize);
            }

            String checksum = calculateSHA256(file.getInputStream());

            // Check if the file already exists in the database
            Optional<Image> existingImage = imageRepository.findByChecksumSha256AndUser(checksum, user);
            if (existingImage.isPresent()) {
                // If the file already exists, return the existing image
                throw new IllegalStateException("File already exists! Duplicate upload is not allowed.");
            }


            // Validate file type using injected config
            if (!fileValidationConfig.isValidImageType(file.getContentType())) {
                throw new InvalidFileTypeException("Invalid file type. Only JPEG, PNG, GIF, and WebP are allowed.");
            }

            // Generate unique filename
            String originalFileName = file.getOriginalFilename();
            String fileExtension = "";
            if (originalFileName != null && originalFileName.contains(".")) {
                fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
            }
            String storedFilename = UUID.randomUUID() + fileExtension;

            // Store the file
            Path targetLocation = this.storageLocation.resolve(storedFilename);
            Files.copy(file.getInputStream(), targetLocation);

            // Create and save image entity
            Image image = new Image();
            image.setUser(user);
            image.setOriginalFilename(originalFileName);
            image.setFilename(originalFileName);
            image.setStoredFilename(storedFilename);
            image.setFilePath(targetLocation.toString());
            image.setFileSize(file.getSize());
            image.setContentType(file.getContentType());
            image.setUploadDate(LocalDateTime.now());

            image.setChecksumSha256(checksum);
            return imageRepository.save(image);
        }

        // Calculate SHA-256 checksum for the file
        private String calculateSHA256(InputStream inputStream) throws IOException {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                byte[] buffer = new byte[8192];
                int bytesRead;

                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    digest.update(buffer, 0, bytesRead);
                }

                byte[] digestBytes = digest.digest();
                StringBuilder hexString = new StringBuilder();

                for (byte b : digestBytes) {
                    String hex = Integer.toHexString(0xff & b);
                    if (hex.length() == 1) {
                        hexString.append('0');
                    }
                    hexString.append(hex);
                }

                return hexString.toString();
            }
            catch (NoSuchAlgorithmException e) {
                throw new IOException("Could not calculate SHA-256 checksum", e);
            }
        }
/*         Proper Page filtering for active images only, deprecated method, manual and slow
        public Page<Image> getAllImages(Pageable pageable) {
            Page<Image> allImages = imageRepository.findAll(pageable);
            List<Image> activeImages = allImages.getContent().stream()
                    .filter(image -> !image.getIsDeleted() && !image.getIsArchived())
                    .toList();

            return new PageImpl<>(activeImages, pageable, getTotalActiveImageCount());
        }*/

        public Page<Image> getAllImages(User user, Pageable pageable) {
            return imageRepository.findAllActiveImages(user, false, pageable);
        }

        // return active (non-deleted, non-archived) images
        public List<Image> getAllImages() {
            return imageRepository.findAllActiveImages();
        }

        public List<Image> getFavorites(User user) {
            return imageRepository.findFavoriteImages(user);
        }

        public List<Image> getTrashedImages(User user) {
            return imageRepository.findTrashImages(user);
        }

        // Use search in repo instead of non-optimized manual search
        public List<Image> searchImages(String query, User user) {
            return imageRepository.searchByOriginalFilename(query, user);
        }

/*        safe to remove, not used
        private long getTotalActiveImageCount() {
            return imageRepository.findAll().stream()
                    .filter(image -> !image.getIsDeleted() && !image.getIsArchived())
                    .count();
}*/

        // Separate method for getting image by ID without deletion check (for internal use)
        // Make the internal method public for thumbnail access
        public Image getImageByIdInternal(Long id) {
            return imageRepository.findById(id)
                    .orElseThrow(() -> new ImageNotFoundException("Image not found with id: " + id));
        }

        // Public method that checks for deletion
        public Image getImageById(Long id, User user) {
            Image image = getImageByIdInternal(id);
            //verify that the image belongs to the user
            if (!image.getUser().getId().equals(user.getId())) {
                throw new ImageNotFoundException("Image not found for user with id: " + id);
            }
            // Check if the image is deleted
            if (image.getIsDeleted()) {
                throw new ImageNotFoundException("Image has been deleted with id: " + id);
            }
            return image;
        }

        public List<Image> getArchivedImages(User user) {
            return imageRepository.findArchivedImages(user);
        }


        // Simplified resource loading without database lookup
        public Resource loadImageAsResource(String filename) {
            if (filename == null || filename.trim().isEmpty()) {
                throw new IllegalArgumentException("Filename cannot be null or empty");
            }

            if (filename.contains("..") || filename.contains("/") || filename.contains("\\")) {
                throw new IllegalArgumentException("Invalid filename: path traversal detected");
            }

            try {
                Path filePath = this.storageLocation.resolve(filename).normalize();
                if (!filePath.startsWith(this.storageLocation)) {
                    throw new IllegalArgumentException("Invalid filename: outside storage directory");
                }
                Resource resource = new UrlResource(filePath.toUri());

                if (resource.exists() && resource.isReadable()) {
                    return resource;
                } else {
                    throw new RuntimeException("Could not read the file: " + filename);
                }
            } catch (MalformedURLException e) {
                throw new RuntimeException("Error: " + e.getMessage());
            }
        }

        public Image toggleFavorite(Long id, User user) {
            Image image = getImageById(id, user);
            image.setIsFavorite(!image.getIsFavorite());
            return imageRepository.save(image);
        }

        public Map<String, Object> getImageStats(User user) {
            return Map.of(
                    "totalImages", imageRepository.countActiveImages(user),
                    "favorites", imageRepository.countFavoriteImages(user),
                    "archived", imageRepository.countArchivedImages(user),
                    "trash", imageRepository.countTrashedImages(user)
            );
        }

        public Image toggleArchive(Long id, User user) {
            Image image = getImageById(id, user);
            image.setIsArchived(!image.getIsArchived());
            return imageRepository.save(image);
        }

        public void moveToTrash(Long id, User user) {
            Image image = getImageById(id, user);
            image.setIsDeleted(true);
            imageRepository.save(image);
        }

        // Fixed: Use internal method to bypass deletion check
        public Image restoreFromTrash(Long id, User user) {
            Image image = getImageByIdInternal(id);

            if (!image.getUser().getId().equals(user.getId())) {
                throw new IllegalStateException("Image does not belong to the user");
            }

            if (!image.getIsDeleted()) {
                throw new IllegalStateException("Image is not in trash");
            }
            image.setIsDeleted(false);
            return imageRepository.save(image);
        }

        // Fixed: Use internal method and renamed for consistency
        public void deletePermanently(Long id, User user) {
            Image image = getImageByIdInternal(id);

//            verify ownership
            if (!image.getUser().getId().equals(user.getId())) {
                throw new IllegalStateException("Image does not belong to the user");
            }
            // Delete the physical file
            try {
                Path filePath = this.storageLocation.resolve(image.getStoredFilename());
                Files.deleteIfExists(filePath);
            } catch (IOException e) {
                // Log the error but don't fail the operation
                System.err.println("Failed to delete physical file: " + e.getMessage());
            }

            // Delete from database
            imageRepository.delete(image);
        }
    }
</file>

<file path="photovault-be/src/main/resources/db/migration/V5__enhance_file_security.sql">
-- Create storage locations table
CREATE TABLE storage_locations (
       id BIGSERIAL PRIMARY KEY,
       name VARCHAR(100) UNIQUE NOT NULL,
       base_path VARCHAR(500) NOT NULL,
       storage_type VARCHAR(50) DEFAULT 'LOCAL',
       is_active BOOLEAN DEFAULT TRUE,
       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert default storage location
INSERT INTO storage_locations (name, base_path, storage_type)
VALUES ('default-local', '${DB_LOCATION}', 'LOCAL');

-- Create file metadata table
CREATE TABLE file_metadata (
       id BIGSERIAL PRIMARY KEY,
       image_id BIGINT UNIQUE REFERENCES images(id) ON DELETE CASCADE,
       storage_location_id BIGINT REFERENCES storage_locations(id),
       relative_path VARCHAR(500) NOT NULL,
       last_accessed TIMESTAMP,
       access_count BIGINT DEFAULT 0,
       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Move existing file paths to file_metadata
INSERT INTO file_metadata (image_id, storage_location_id, relative_path)
SELECT id, 1, stored_filename
FROM images;

-- Create performance indexes
CREATE INDEX idx_file_metadata_image_id ON file_metadata(image_id);
CREATE INDEX idx_file_metadata_storage_location ON file_metadata(storage_location_id);
</file>

<file path="photovault-fe/src/components/ImageThumbnail/ImageThumbnail.tsx">
import React, { useState, useEffect } from 'react';
import { Box, CircularProgress, Typography } from '@mui/material';
import { BrokenImage } from '@mui/icons-material';
import { imageApi } from '../../services/api';

interface ImageThumbnailProps {
    imageId: number;
    alt: string;
    width?: number | string;
    height?: number | string;
    sx?: any;
    fallbackToRegular?: boolean; // Whether to fallback to regular download endpoint. what exactly is regular download endpoint? enyway
}

const ImageThumbnail: React.FC<ImageThumbnailProps> = ({
                                                           imageId,
                                                           alt,
                                                           width = 200,
                                                           height = 200,
                                                           sx = {},
                                                           fallbackToRegular = false
                                                       }) => {
    const [thumbnailUrl, setThumbnailUrl] = useState<string | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(false);

    useEffect(() => {
        const loadThumbnail = async () => {
            try {
                setLoading(true);
                setError(false);

                // Try thumbnail endpoint first
                const response = await imageApi.getThumbnail(imageId);
                const url = window.URL.createObjectURL(new Blob([response.data]));
                setThumbnailUrl(url);
            } catch (err) {
                if (fallbackToRegular) {
                    try {
                        // Fallback to regular download endpoint
                        const response = await imageApi.downloadImage(imageId);
                        const url = window.URL.createObjectURL(new Blob([response.data]));
                        setThumbnailUrl(url);
                    } catch (fallbackErr) {
                        setError(true);
                    }
                } else {
                    setError(true);
                }
            } finally {
                setLoading(false);
            }
        };

        loadThumbnail();

        // Cleanup function to revoke object URL
        return () => {
            if (thumbnailUrl) {
                window.URL.revokeObjectURL(thumbnailUrl);
            }
        };
    }, [imageId, fallbackToRegular]);

    if (loading) {
        return (
            <Box
                sx={{
                    width,
                    height,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    backgroundColor: '#f5f5f5',
                    borderRadius: 1,
                    ...sx
                }}
            >
                <CircularProgress size={24} />
            </Box>
        );
    }

    if (error || !thumbnailUrl) {
        return (
            <Box
                sx={{
                    width,
                    height,
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'center',
                    backgroundColor: '#f5f5f5',
                    borderRadius: 1,
                    color: '#666',
                    ...sx
                }}
            >
                <BrokenImage sx={{ fontSize: 32, mb: 1 }} />
                <Typography variant="caption">Failed to load</Typography>
            </Box>
        );
    }

    return (
        <Box
            component="img"
            src={thumbnailUrl}
            alt={alt}
            sx={{
                width,
                height,
                objectFit: 'cover',
                borderRadius: 1,
                ...sx
            }}
        />
    );
};

export default ImageThumbnail;
</file>

<file path="photovault-fe/src/pages/Archive.tsx">
import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Grid,
    Card,
    CardMedia,
    CardActions,
    IconButton,
    Alert,
    CircularProgress
} from '@mui/material';
import { Unarchive, Download, Delete } from '@mui/icons-material';
import { imageApi } from '../services/api';
import { Image } from '../types/Image';

const Archive: React.FC = () => {
    const [archivedImages, setArchivedImages] = useState<Image[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const loadArchivedImages = async () => {
        try {
            setLoading(true);
            const response = await imageApi.getArchivedImages();
            setArchivedImages(response.data);
            setError(null);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to load archived images');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadArchivedImages();
    }, []);

    const handleUnarchiveImage = async (imageId: number) => {
        try {
            await imageApi.toggleArchive(imageId);
            loadArchivedImages(); // Refresh the list
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to unarchive image');
        }
    };

    const handleDeleteImage = async (imageId: number) => {
        try {
            await imageApi.deleteImage(imageId);
            loadArchivedImages(); // Refresh the list
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to delete image');
        }
    };

    const handleDownloadImage = async (imageId: number, filename: string) => {
        try {
            const response = await imageApi.downloadImage(imageId);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(url);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to download image');
        }
    };

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
            </Box>
        );
    }

    return (
        <Box>
            <Typography variant="h4" component="h1" gutterBottom>
                📁 Archived Images
            </Typography>

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {archivedImages.length === 0 ? (
                <Box textAlign="center" py={8}>
                    <Typography variant="h6" color="textSecondary" gutterBottom>
                        No archived images
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Archive images to organize your collection
                    </Typography>
                </Box>
            ) : (
                <Grid container spacing={3}>
                    {archivedImages.map((image) => (
                        <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={image.id}>
                            <Card>
                                <CardMedia
                                    component="img"
                                    height="200"
                                    image={`http://localhost:8080/images/${image.id}/download`}
                                    alt={image.originalFilename}
                                    sx={{ objectFit: 'cover' }}
                                />
                                <CardActions>
                                    <IconButton
                                        onClick={() => handleUnarchiveImage(image.id)}
                                        color="primary"
                                        title="Unarchive"
                                    >
                                        <Unarchive />
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleDownloadImage(image.id, image.originalFilename)}
                                        title="Download"
                                    >
                                        <Download />
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleDeleteImage(image.id)}
                                        title="Delete"
                                    >
                                        <Delete />
                                    </IconButton>
                                </CardActions>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
            )}
        </Box>
    );
};

export default Archive;
</file>

<file path="photovault-fe/src/pages/Favorites.tsx">
import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Grid,
    Card,
    CardMedia,
    CardActions,
    IconButton,
    Alert,
    CircularProgress
} from '@mui/material';
import { Favorite, Download, Delete } from '@mui/icons-material';
import { imageApi } from '../services/api';
import { Image } from '../types/Image';

const Favorites: React.FC = () => {
    const [favorites, setFavorites] = useState<Image[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const loadFavorites = async () => {
        try {
            setLoading(true);
            const response = await imageApi.getFavorites();
            setFavorites(response.data);
            setError(null);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to load favorites');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadFavorites();
    }, []);

    const handleRemoveFromFavorites = async (imageId: number) => {
        try {
            await imageApi.toggleFavorite(imageId);
            loadFavorites(); // Refresh the list
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to remove from favorites');
        }
    };

    const handleDownloadImage = async (imageId: number, filename: string) => {
        try {
            const response = await imageApi.downloadImage(imageId);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(url);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to download image');
        }
    };

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
            </Box>
        );
    }

    return (
        <Box>
            <Typography variant="h4" component="h1" gutterBottom>
                ❤️ Favorite Images
            </Typography>

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {favorites.length === 0 ? (
                <Box textAlign="center" py={8}>
                    <Typography variant="h6" color="textSecondary" gutterBottom>
                        No favorite images yet
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Mark images as favorites from the home page to see them here
                    </Typography>
                </Box>
            ) : (
                <Grid container spacing={3}>
                    {favorites.map((image) => (
                        <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={image.id}>
                            <Card>
                                <CardMedia
                                    component="img"
                                    height="200"
                                    image={`http://localhost:8080/images/${image.id}/download`}
                                    alt={image.originalFilename}
                                    sx={{ objectFit: 'cover' }}
                                />
                                <CardActions>
                                    <IconButton
                                        onClick={() => handleRemoveFromFavorites(image.id)}
                                        color="error"
                                    >
                                        <Favorite />
                                    </IconButton>
                                    <IconButton onClick={() => handleDownloadImage(image.id, image.originalFilename)}>
                                        <Download />
                                    </IconButton>
                                </CardActions>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
            )}
        </Box>
    );
};

export default Favorites;
</file>

<file path="photovault-fe/src/types/Image.ts">
export interface Image {
    id: number;
    filename: string;
    storedFilename: string;
    originalFilename: string;
    filePath: string;
    fileSize: number;
    contentType: string;
    uploadDate: string;
    isFavorite: boolean;
    isArchived: boolean;
    isDeleted: boolean;
}
</file>

<file path="photovault-fe/src/App.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders photovault title', () => {
  render(<App />);
  const titleElement = screen.getByText(/Photovault API Test in progress/i);
  expect(titleElement).toBeInTheDocument();
});
</file>

<file path="photovault-fe/package.json">
{
  "name": "photovault-fe",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@mui/icons-material": "^7.2.0",
    "@mui/material": "^7.2.0",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.126",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.10.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-dropzone": "^14.3.8",
    "react-router-dom": "^7.6.3",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="photovault-be/.gitignore">
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

#Environment/Config Files
.env
src/main/resources/application.properties

#Database Migration Scripts that contains sensitive data
#src/main/resources/db/migration/V2__create_users_table.sql



#Codebase Summary
repomix-output-*.xml

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="photovault-fe/src/components/ImageUploads/ImageUploads.tsx">
import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import {
    Box,
    Typography,
    CircularProgress,
    Alert,
    LinearProgress,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Chip,
    Button
    // FormControlLabel,
    // Switch
} from '@mui/material';
import { CloudUpload, CheckCircle, Error, Image as ImageIcon, Clear } from '@mui/icons-material';
import { imageApi } from '../../services/api';

interface ImageUploadProps {
    onUploadSuccess: () => void;
}

interface FileWithPreview extends File {
    preview?: string;
}

interface UploadResult {
    filename: string;
    status: 'success' | 'error';
    message?: string;
    error?: string;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ onUploadSuccess }) => {
    const [files, setFiles] = useState<FileWithPreview[]>([]);
    const [uploading, setUploading] = useState(false);
    const [uploadResults, setUploadResults] = useState<UploadResult[]>([]);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    // const [multipleMode, setMultipleMode] = useState(false);
    // const [uploadProgress, setUploadProgress] = useState(0);

    const onDrop = useCallback(async (acceptedFiles: File[]) => {
        const filesWithPreview = acceptedFiles.map(file =>
            Object.assign(file, {
                preview: URL.createObjectURL(file)
            })
        );

        // making multiple upload default
        // if (multipleMode) {
        //     setFiles(prev => [...prev, ...filesWithPreview]);
        // } else {
        //     setFiles(filesWithPreview.slice(0, 1)); // Only take first file in single mode
        // }
        // if (!file) return;

        setFiles(prev => [...prev, ...filesWithPreview]);
        // setUploading(true);
        setError(null);
        setSuccess(null);
        setUploadResults([]);
    }, []);

    const removeFile = (fileToRemove: FileWithPreview) => {
        setFiles(files => {
            const newFiles = files.filter(file => file !== fileToRemove);
            if (fileToRemove.preview) {
                URL.revokeObjectURL(fileToRemove.preview);
            }
            return newFiles;
        });
    };

    const handleUpload = async () => {
        if (files.length === 0) return;

        setUploading(true);
        setError(null);
        setSuccess(null);
        setUploadResults([]);
        // setUploadProgress(0);

        try {
            if (files.length === 1) {
                const response = await imageApi.uploadImage(files[0]);
                setSuccess(`Successfully uploaded ${files[0].name}`);
                setUploadResults([{
                    filename: files[0].name,
                    status: 'success'
                }]);
            } else {
                // Multiple file upload
                const response = await imageApi.uploadMultipleImagesWithProgress(files);
                const data = response.data;

                setSuccess(data.message);

                // Process results
                const results: UploadResult[] = [];
                data.results?.forEach((result: any) => {
                    results.push({
                        filename: result.filename,
                        status: result.status
                    });
                });

                data.errors?.forEach((error: any) => {
                    results.push({
                        filename: error.filename,
                        status: 'error',
                        error: error.error
                    });
                });

                setUploadResults(results);
            }
            // setting multiple as default
            //     if (data.successful > 0) {
            //         setTimeout(() => {
            //             onUploadSuccess();
            //             clearFiles();
            //         }, 2000);
            //     }
            // } else {
            //     // Single file upload
            //     const response = await imageApi.uploadImage(files[0]);
            //     setSuccess(`Successfully uploaded ${files[0].name}`);
            //     setUploadResults([{
            //         filename: files[0].name,
            //         status: 'success'
            //     }]);

            setTimeout(() => {
                onUploadSuccess();
                clearFiles();
            }, files.length === 1 ? 1000 : 2000);
        } catch (err: any) {
            const errorMessage = err.response?.data?.error || 'Upload failed';
            setError(errorMessage);
            setUploadResults([{
                filename: files[0]?.name || 'Unknown',
                status: 'error',
                error: errorMessage
            }]);
        } finally {
            setUploading(false);
            // setUploadProgress(0);
        }
    };

    const clearFiles = () => {
        files.forEach(file => {
            if (file.preview) {
                URL.revokeObjectURL(file.preview);
            }
        });
        setFiles([]);
        setUploadResults([]);
        setError(null);
        setSuccess(null);
    };

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: {
            'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']
        },
        maxSize: 10 * 1024 * 1024, // 10MB per file
        multiple: true //replace multipleMode with true to set default
    });

    // Cleanup on unmounting
    React.useEffect(() => {
        return () => {
            files.forEach(file => {
                if (file.preview) {
                    URL.revokeObjectURL(file.preview);
                }
            });
        };
    }, [files]);

/*    remove to implement multiple files upload
        try {
            await imageApi.uploadImage(file);
            setSuccess(`Successfully uploaded ${file.name}`);
            setTimeout(() => {
                onUploadSuccess();
            }, 1000);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Upload failed');
        } finally {
            setUploading(false);
        }
    }, [onUploadSuccess]);

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: {
            'image/!*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']
        },
        maxSize: 10 * 1024 * 1024, // 10MB
        multiple: false
    });*/

    return (
        <Box sx={{ mb: 2 }}>
            {/* Multiple upload toggle, removed to set multi as default */}
            {/*<FormControlLabel*/}
            {/*    control={*/}
            {/*        <Switch*/}
            {/*            checked={multipleMode}*/}
            {/*            onChange={(e) => {*/}
            {/*                setMultipleMode(e.target.checked);*/}
            {/*                if (!e.target.checked && files.length > 1) {*/}
            {/*                    // Keep only the first file when switching to single mode*/}
            {/*                    const firstFile = files[0];*/}
            {/*                    files.slice(1).forEach(file => {*/}
            {/*                        if (file.preview) URL.revokeObjectURL(file.preview);*/}
            {/*                    });*/}
            {/*                    setFiles([firstFile]);*/}
            {/*                }*/}
            {/*            }}*/}
            {/*        />*/}
            {/*    }*/}
            {/*    label="Multiple file upload"*/}
            {/*    sx={{ mb: 2 }}*/}
            {/*/>*/}

            {/*drop zones*/}
            <Box
                {...getRootProps()}
                sx={{
                    border: '2px dashed #ccc',
                    borderRadius: 2,
                    p: 4,
                    textAlign: 'center',
                    cursor: 'pointer',
                    backgroundColor: isDragActive ? '#f5f5f5' : 'transparent',
                    '&:hover': {
                        backgroundColor: '#f9f9f9',
                    },
                }}
            >
                <input {...getInputProps()} />
                {uploading ? (
                    <Box>
                        <CircularProgress sx={{ mb: 2 }} />
                        <Typography>Uploading...</Typography>
                        <LinearProgress sx={{ mt: 1 }} />
                    </Box>
                ) : (
                    <>
                        <CloudUpload sx={{ fontSize: 48, color: '#666', mb: 2 }} />
                        <Typography variant="h6" gutterBottom>
                            {isDragActive ? 'Drop the image here' : 'Drag & drop an image here'}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">
                            or click to select a file
                        </Typography>
                        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                            Supports: JPEG, PNG, GIF, WebP (max 10MB)
                        </Typography>
                    </>
                )}
            </Box>

            {/* File preview list */}
            {files.length > 0 && (
                <Box sx={{ mt: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                        Selected Files ({files.length})
                    </Typography>
                    <List dense>
                        {files.map((file, index) => (
                            <ListItem key={index} sx={{ pl: 0 }}>
                                <ListItemIcon>
                                    <ImageIcon />
                                </ListItemIcon>
                                <ListItemText
                                    primary={file.name}
                                    secondary={`${(file.size / 1024 / 1024).toFixed(2)} MB`}
                                />
                                <Chip
                                    label={`${(file.size / 1024 / 1024).toFixed(1)}MB`}
                                    size="small"
                                    sx={{ mr: 1 }}
                                />
                                <Button
                                    size="small"
                                    onClick={() => removeFile(file)}
                                    disabled={uploading}
                                >
                                    <Clear />
                                </Button>
                            </ListItem>
                        ))}
                    </List>

                    <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
                        <Button
                            variant="contained"
                            onClick={handleUpload}
                            disabled={uploading || files.length === 0}
                        >
                            Upload {files.length > 1 ? `${files.length} Files` : 'File'}
                        </Button>
                        <Button
                            variant="outlined"
                            onClick={clearFiles}
                            disabled={uploading}
                        >
                            Clear All
                        </Button>
                    </Box>
                </Box>
            )}

            {/* Upload results */}
            {uploadResults.length > 0 && (
                <Box sx={{ mt: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                        Upload Results
                    </Typography>
                    <List dense>
                        {uploadResults.map((result, index) => (
                            <ListItem key={index} sx={{ pl: 0 }}>
                                <ListItemIcon>
                                    {result.status === 'success' ?
                                        <CheckCircle color="success" /> :
                                        <Error color="error" />
                                    }
                                </ListItemIcon>
                                <ListItemText
                                    primary={result.filename}
                                    secondary={result.error || 'Uploaded successfully'}
                                />
                            </ListItem>
                        ))}
                    </List>
                </Box>
            )}

            {/*errors & success messages*/}
            {error && (
                <Alert severity="error" sx={{ mt: 2 }}>
                    {error}
                </Alert>
            )}

            {success && (
                <Alert severity="success" sx={{ mt: 2 }}>
                    {success}
                </Alert>
            )}
        </Box>
    );
};

export default ImageUpload;

/*
old blank test
import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Box, Typography, CircularProgress, Alert } from '@mui/material';
import { CloudUpload } from '@mui/icons-material';
import { imageApi } from '../../services/api';

interface ImageUploadProps {
    onUploadSuccess: () => void;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ onUploadSuccess }) => {
    const [uploading, setUploading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const onDrop = useCallback(async (acceptedFiles: File[]) => {
        const file = acceptedFiles[0];
        if (!file) return;

        setUploading(true);
        setError(null);
        setSuccess(null);

        try {
            await imageApi.uploadImage(file);
            setSuccess(`Successfully uploaded ${file.name}`);
            onUploadSuccess();
        } catch (err: any) {
            setError(err.response?.data?.error || 'Upload failed');
        } finally {
            setUploading(false);
        }
    }, [onUploadSuccess]);

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: {
            'image/!*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']
        },
        maxSize: 10 * 1024 * 1024, // 10MB
        multiple: false
    });

    return (
        <Box sx={{ mb: 4 }}>
            <Box
                {...getRootProps()}
                sx={{
                    border: '2px dashed #ccc',
                    borderRadius: 2,
                    p: 4,
                    textAlign: 'center',
                    cursor: 'pointer',
                    backgroundColor: isDragActive ? '#f5f5f5' : 'transparent',
                    '&:hover': {
                        backgroundColor: '#f9f9f9',
                    },
                }}
            >
                <input {...getInputProps()} />
                {uploading ? (
                    <CircularProgress />
                ) : (
                    <>
                        <CloudUpload sx={{ fontSize: 48, color: '#666', mb: 2 }} />
                        <Typography variant="h6" gutterBottom>
                            {isDragActive ? 'Drop the image here' : 'Drag & drop an image here'}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">
                            or click to select a file
                        </Typography>
                        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                            Supports: JPEG, PNG, GIF, WebP (max 10MB)
                        </Typography>
                    </>
                )}
            </Box>

            {error && (
                <Alert severity="error" sx={{ mt: 2 }}>
                    {error}
                </Alert>
            )}

            {success && (
                <Alert severity="success" sx={{ mt: 2 }}>
                    {success}
                </Alert>
            )}
        </Box>
    );
};

export default ImageUpload;
*/
</file>

<file path="photovault-fe/src/pages/Home.tsx">
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import {
    Box,
    Typography,
    Grid,
    Card,
    // CardMedia,
    CardActions,
    IconButton,
    Fab,
    Dialog,
    DialogTitle,
    DialogContent,
    Alert,
    CircularProgress,
    TextField,
    InputAdornment
} from '@mui/material';
import {
    Favorite,
    FavoriteBorder,
    Delete,
    Archive,
    Add,
    Download,
    Search
} from '@mui/icons-material';
import { imageApi } from '../services/api';
import { Image } from '../types/Image';
import ImageUpload from '../components/ImageUploads/ImageUploads';
import ImageThumbnail from "../components/ImageThumbnail/ImageThumbnail";

const Home: React.FC = () => {
    const [images, setImages] = useState<Image[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');

    // remove unused filter
    // const [filteredImages, setFilteredImages] = useState<Image[]>([]);

    const useDebounce = (value: string, delay: number) => {
        const [debouncedValue, setDebouncedValue] = useState(value);

        useEffect(() => {
            const handler = setTimeout(() => {
                setDebouncedValue(value);
            }, delay);

            return () => {
                clearTimeout(handler);
            };
        }, [value, delay]);

        return debouncedValue;
    };

    // use debounce searchquery
    const debouncedSearchQuery = useDebounce(searchQuery, 300);

    // temp fix for the reloading loop
    // const loadImages = useCallback(async () => {
    //     try {
    //         setLoading(true);
    //         const response = await imageApi.getAllImages();
    //         setImages(response.data.content || response.data);
    //         setError(null);
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to load images');
    //     } finally {
    //         setLoading(false);
    //     }
    // }, []);

    // temp fix for reloading loop
    // const loadImages = async () => {
    //     try {
    //         setLoading(true);
    //         const response = await imageApi.getAllImages();
    //         setImages(response.data.content || response.data);
    //         setError(null);
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to load images');
    //     } finally {
    //         setLoading(false);
    //     }
    // };
    //
    // useEffect(() => {
    //     loadImages();
    // }, []); // Empty dependency array - runs only once on mountw

    // test an alternative way without using loadImages
    useEffect(() => {
        const fetchAllImages = async () => {
            try {
                setLoading(true);
                setError(null);

                let allImages: any[] = [];
                let page = 0;
                const pageSize = 100;
                let hasMore = true;

                while (hasMore) {
                    const response = await imageApi.getAllImages(page, pageSize);
                    const pageData = response.data.content || response.data || [];

                    if (pageData.length === 0 || pageData.length < pageSize) {
                        hasMore = false;
                    }

                    allImages = [...allImages, ...pageData];

                    // Update UI progressively
                    setImages([...allImages]);

                    // Optional: Add delay to prevent overwhelming the server
                    if (hasMore) {
                        await new Promise(resolve => setTimeout(resolve, 100));
                    }

                    page++;
                }

            } catch (err: any) {
                setError(err.response?.data?.error || 'Failed to load images');
            } finally {
                setLoading(false);
            }
        };

        fetchAllImages();
    }, []);



    const filteredImages = useMemo(() => {
        if (debouncedSearchQuery.trim() === '') {
            return images;
        }
        return images.filter(image =>
            image.originalFilename.toLowerCase().includes(debouncedSearchQuery.toLowerCase())
        );
    }, [images, debouncedSearchQuery]);

    // replacing this as it causes flickers
    // useEffect(() => {
    //     loadImages();
    //     if (searchQuery.trim() === '') {
    //         setFilteredImages(images);
    //     } else {
    //         const filtered = images.filter(image =>
    //             image.originalFilename.toLowerCase().includes(searchQuery.toLowerCase())
    //         );
    //         setFilteredImages(filtered);
    //     }
    // }, [images, loadImages, searchQuery]);

    // replacing this to test alternative to loadImages
    // const handleToggleFavorite = useCallback(async (imageId: number) => {
    //     try {
    //         await imageApi.toggleFavorite(imageId);
    //         loadImages(); // Refresh the list
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to update favorite');
    //     }
    // }, [loadImages]);
    //
    // const handleDeleteImage = useCallback(async (imageId: number) => {
    //     try {
    //         await imageApi.deleteImage(imageId);
    //         loadImages(); // Refresh the list
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to delete image');
    //     }
    // }, [loadImages]);
    //
    // const handleUploadSuccess = useCallback(() => {
    //     setUploadDialogOpen(false);
    //     loadImages();
    // }, [loadImages]);
    //
    // const handleToggleArchive = useCallback(async (imageId: number) => {
    //     try {
    //         await imageApi.toggleArchive(imageId);
    //         loadImages(); // Refresh the list
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to archive image');
    //     }
    // }, [loadImages]);

    const handleToggleFavorite = async (imageId: number) => {
        try {
            await imageApi.toggleFavorite(imageId);
            // Refresh images after action
            const response = await imageApi.getAllImages();
            setImages(response.data.content || response.data);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to update favorite');
        }
    };

    const handleDeleteImage = async (imageId: number) => {
        try {
            await imageApi.deleteImage(imageId);
            // Refresh images after action
            const response = await imageApi.getAllImages();
            setImages(response.data.content || response.data);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to delete image');
        }
    };

    const handleToggleArchive = async (imageId: number) => {
        try {
            await imageApi.toggleArchive(imageId);
            // Refresh images after action
            const response = await imageApi.getAllImages();
            setImages(response.data.content || response.data);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to archive image');
        }
    };

    const handleUploadSuccess = () => {
        setUploadDialogOpen(false);
        // Refresh images after upload
        const fetchImages = async () => {
            try {
                const response = await imageApi.getAllImages();
                setImages(response.data.content || response.data);
            } catch (err: any) {
                setError(err.response?.data?.error || 'Failed to refresh images');
            }
        };
        fetchImages();
    };

    // move the download handler for better access to modify the others
    const handleDownloadImage = useCallback(async (imageId: number, filename: string) => {
        try {
            const response = await imageApi.downloadImage(imageId);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(url);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to download image');
        }
    }, []);

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
            </Box>
        );
    }

    return (
        <Box>
            <Typography variant="h4" component="h1" gutterBottom>
                My Images
            </Typography>

            <TextField
                fullWidth
                placeholder="Search images..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                sx={{ mb: 3 }}
                InputProps={{
                    startAdornment: (
                        <InputAdornment position="start">
                            <Search />
                        </InputAdornment>
                    ),
                }}
            />

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {images.length === 0 ? (
                <Box textAlign="center" py={8}>
                    <Typography variant="h6" color="textSecondary" gutterBottom>
                        No images uploaded yet
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Click the + button to upload your first image
                    </Typography>
                </Box>
            ) : (
                <Grid container spacing={3}>
                    {filteredImages.map((image) => (
                        <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={image.id}>
                            <Card>
                                {/*<CardMedia*/}
                                {/*    component="img"*/}
                                {/*    height="200"*/}
                                {/*    image={`http://localhost:8080/images/${image.id}/download`}*/}
                                {/*    alt={image.originalFilename}*/}
                                {/*    sx={{ objectFit: 'cover' }}*/}
                                {/*/>*/}
                                <ImageThumbnail
                                    imageId={image.id}
                                    alt={image.originalFilename}
                                    width="100%"
                                    height={200}
                                    fallbackToRegular={true} // Fallback to regular download if thumbnail fails
                                />
                                <CardActions>
                                    <IconButton
                                        onClick={() => handleToggleFavorite(image.id)}
                                        color={image.isFavorite ? 'error' : 'default'}
                                    >
                                        {image.isFavorite ? <Favorite /> : <FavoriteBorder />}
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleDownloadImage(image.id, image.originalFilename)}>
                                        <Download />
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleToggleArchive(image.id)}>
                                    <Archive />
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleDeleteImage(image.id)}>
                                        <Delete />
                                    </IconButton>
                                </CardActions>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
            )}

            {/* Upload FAB */}
            <Fab
                color="primary"
                aria-label="upload"
                sx={{ position: 'fixed', bottom: 16, right: 16 }}
                onClick={() => setUploadDialogOpen(true)}
            >
                <Add />
            </Fab>

            {/* Upload Dialog */}
            <Dialog
                open={uploadDialogOpen}
                onClose={() => setUploadDialogOpen(false)}
                maxWidth="sm"
                fullWidth
            >
                <DialogTitle>Upload New Image</DialogTitle>
                <DialogContent>
                    <ImageUpload onUploadSuccess={handleUploadSuccess} />
                </DialogContent>
            </Dialog>
        </Box>
    );
};

export default Home;

// old post creation test blank page
// import React from 'react';
//
// const Home: React.FC = () => {
//     return (
//         <div>
//             <h1>Home Page</h1>
//             <p>Welcome to PhotoVault</p>
//         </div>
//     );
// };
//
// export default Home;
</file>

<file path="photovault-fe/src/pages/Trash.tsx">
import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Grid,
    Card,
    CardMedia,
    CardActions,
    IconButton,
    Alert,
    CircularProgress,
    Button
} from '@mui/material';
import { Restore, DeleteForever } from '@mui/icons-material';
import { imageApi } from '../services/api';
import { Image } from '../types/Image';
import ImageThumbnail from "../components/ImageThumbnail/ImageThumbnail";

const Trash: React.FC = () => {
    const [trashedImages, setTrashedImages] = useState<Image[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const loadTrashedImages = async () => {
        try {
            setLoading(true);
            // We'll need to add this endpoint to the backend
            const response = await imageApi.getTrashedImages();
            setTrashedImages(response.data);
            setError(null);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to load trash');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadTrashedImages();
    }, []);

    const handleRestoreImage = async (imageId: number) => {
        try {
            await imageApi.restoreImage(imageId);
            loadTrashedImages(); // Refresh the list
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to restore image');
        }
    };

    const handlePermanentDelete = async (imageId: number) => {
        if (window.confirm('Are you sure? This will permanently delete the image and cannot be undone.')) {
            try {
                await imageApi.permanentlyDeleteImage(imageId);
                loadTrashedImages(); // Refresh the list
            } catch (err: any) {
                setError(err.response?.data?.error || 'Failed to permanently delete image');
            }
        }
    };

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
            </Box>
        );
    }
    // might as well delete this function since who the hell wants to download from trash
    // const handleDownloadImage = async (imageId: number, filename: string) => {
    //     try {
    //         const response = await imageApi.downloadImage(imageId);
    //         const url = window.URL.createObjectURL(new Blob([response.data]));
    //         const link = document.createElement('a');
    //         link.href = url;
    //         link.setAttribute('download', filename);
    //         document.body.appendChild(link);
    //         link.click();
    //         link.remove();
    //         window.URL.revokeObjectURL(url);
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to download image');
    //     }
    // };
    //
    // if (loading) {
    //     return (
    //         <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
    //             <CircularProgress />
    //         </Box>
    //     );
    // }

    return (
        <Box>
            <Typography variant="h4" component="h1" gutterBottom>
                🗑️ Trash
            </Typography>

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {trashedImages.length === 0 ? (
                <Box textAlign="center" py={8}>
                    <Typography variant="h6" color="textSecondary" gutterBottom>
                        Trash is empty
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Deleted images will appear here
                    </Typography>
                </Box>
            ) : (
                <>
                    <Alert severity="info" sx={{ mb: 3 }}>
                        Images in trash can be restored or permanently deleted.
                        Permanent deletion cannot be undone.
                    </Alert>

                    <Grid container spacing={3}>
                        {trashedImages.map((image) => (
                            <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={image.id}>
                                <Card sx={{ opacity: 0.7 }}>
                                    {/*remove this to use thumbnail*/}
                                    {/*<CardMedia*/}
                                    {/*    component="img"*/}
                                    {/*    height="200"*/}
                                    {/*    image={`http://localhost:8080/images/${image.id}/download`}*/}
                                    {/*    alt={image.originalFilename}*/}
                                    {/*    sx={{ objectFit: 'cover' }}*/}
                                    {/*/>*/}
                                    <ImageThumbnail
                                        imageId={image.id}
                                        alt={image.originalFilename}
                                        width="100%"
                                        height={200}
                                    />
                                    <CardActions>
                                        <IconButton
                                            onClick={() => handleRestoreImage(image.id)}
                                            color="primary"
                                            title="Restore"
                                        >
                                            <Restore />
                                        </IconButton>
                                        {/*<IconButton*/}
                                        {/*    onClick={() => handleDownloadImage(image.id, image.originalFilename)}*/}
                                        {/*    title="Download"*/}
                                        {/*>*/}
                                        {/*    <Download />*/}
                                        {/*</IconButton>*/}
                                        <IconButton
                                            onClick={() => handlePermanentDelete(image.id)}
                                            color="error"
                                            title="Delete Forever"
                                        >
                                            <DeleteForever />
                                        </IconButton>
                                    </CardActions>
                                </Card>
                            </Grid>
                        ))}
                    </Grid>
                </>
            )}
        </Box>
    );
};

export default Trash;
</file>

<file path="photovault-fe/src/services/api.ts">
import axios from 'axios';

// const API_BASE_URL = 'http://localhost:8080/';
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';

const api = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
    timeout: 10000,
});

export const MAX_FILE_SIZE = 10 * 1024 * 1024;

// export interface Image {
//     id: number;
//     filename: string;
//     storedFilename: string;
//     originalFilename: string;
//     filePath: string;
//     fileSize: number;
//     contentType: string;
//     uploadDate: string;
//     isFavorite: boolean;
//     isArchived: boolean;
//     isDeleted: boolean;
// }

export const imageApi = {
    // Test connection
    testConnection: () =>
        api.get('/health'),

    // Upload image
    uploadImage: (file: File) => {
        const formData = new FormData();
        formData.append('file', file);
        return api.post('/images/upload', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    },

    // multiple files upload without progress tracking
    // uploadMultipleImages: (files: File[]) => {
    //     const formData = new FormData();
    //     files.forEach(file => {
    //         formData.append('files', file);
    //     });
    //     return api.post('/images/upload/multiple', formData, {
    //         headers: {
    //             'Content-Type': 'multipart/form-data',
    //         },
    //     });
    // },

    // progress tracking
    uploadMultipleImagesWithProgress: (files: File[], onProgress?: (progress: number) => void) => {
        const formData = new FormData();
        files.forEach(file => {
            formData.append('files', file);
        });

        return api.post('/images/upload/multiple', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
            onUploadProgress: (progressEvent) => {
                if (onProgress && progressEvent.total) {
                    const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                    onProgress(progress);
                }
            }
        });
    },


    // Get all images with pagination
    getAllImages: (page = 0, size = 10) =>
        api.get(`/images?page=${page}&size=${size}`),

    // Get image by ID
    getImageById: (id: number) =>
        api.get(`/images/${id}`),

    // Download image
    downloadImage: (id: number) =>
        api.get(`/images/${id}/download`, { responseType: 'blob' }),

    // Toggle favorite
    toggleFavorite: (id: number) =>
        api.put(`/images/${id}/favorite`),

    // Get favorites
    getFavorites: () =>
        api.get('/images/favorites'),

    // Search images
    searchImages: (query: string) =>
        api.get(`/images/search?query=${query}`),

    // Delete image (move to trash)
    deleteImage: (id: number) =>
        api.delete(`/images/${id}`),

    // Get stats
    getStats: () =>
        api.get('/images/stats'),

    getTrashedImages: () =>
        api.get('/images/trash'),

    restoreImage: (id: number) =>
        api.put(`/images/${id}/restore`),

    permanentlyDeleteImage: (id: number) =>
        api.delete(`/images/${id}/permanent`),

    toggleArchive: (id: number) =>
        api.put(`/images/${id}/archive`),

    getArchivedImages: () =>
        api.get('/images/archived'),

    getThumbnail: (id: number) =>
        api.get(`/images/${id}/thumbnail`, { responseType: 'blob' }),
};

export default api;
</file>

<file path="photovault-fe/src/App.css">
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="photovault-fe/src/App.tsx">
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import { AppBar, Toolbar, Typography, Button, Container } from '@mui/material';
import Home from './pages/Home';
import Favorites from './pages/Favorites';
import Archive from './pages/Archive';
import Trash from './pages/Trash';

function App() {
  return (
      <Router>
        <AppBar position="static">
          <Toolbar>
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              📸 PhotoVault
            </Typography>
            <Button color="inherit" component={Link} to="/">Home</Button>
            <Button color="inherit" component={Link} to="/favorites">Favorites</Button>
            <Button color="inherit" component={Link} to="/archive">Archive</Button>
            <Button color="inherit" component={Link} to="/trash">Trash</Button>
          </Toolbar>
        </AppBar>

        <Container maxWidth="lg" sx={{ mt: 4 }}>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/favorites" element={<Favorites />} />
            <Route path="/archive" element={<Archive />} />
            <Route path="/trash" element={<Trash />} />
          </Routes>
        </Container>
      </Router>
  );
}

export default App;

// import React, { useState, useEffect } from 'react';
// import {
//   Container,
//   Typography,
//   Box,
//   Button,
//   Alert,
//   CircularProgress,
//   Paper,
//   Grid
// } from '@mui/material';
// import { CheckCircle, Error, Cloud } from '@mui/icons-material';
// import { imageApi } from './services/api';
//
//
// interface ConnectionStatus {
//   backend: 'loading' | 'success' | 'error';
//   message: string;
// }
//
// function App() {
//   const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({
//     backend: 'loading',
//     message: 'Testing connection...'
//   });
//   const [stats, setStats] = useState<any>(null);
//   const [images, setImages] = useState<any>(null);
//
//   // Test backend connection
//   const testBackendConnection = async () => {
//     try {
//       setConnectionStatus({ backend: 'loading', message: 'Testing backend connection...' });
//       const response = await imageApi.testConnection();
//       setConnectionStatus({
//         backend: 'success',
//         message: `Backend connected: ${response.data}`
//       });
//     } catch (error: any) {
//       setConnectionStatus({
//         backend: 'error',
//         message: `Backend connection failed: ${error.message}`
//       });
//     }
//   };
//
//   // Test stats endpoint
//   const testStatsEndpoint = async () => {
//     try {
//       const response = await imageApi.getStats();
//       setStats(response.data);
//     } catch (error: any) {
//       console.error('Stats endpoint failed:', error);
//     }
//   };
//
//   // Test images endpoint
//   const testImagesEndpoint = async () => {
//     try {
//       const response = await imageApi.getAllImages();
//       setImages(response.data);
//     } catch (error: any) {
//       console.error('Images endpoint failed:', error);
//     }
//   };
//
//   // Test file upload
//   const testFileUpload = async () => {
//     // Create a small test image file
//     const canvas = document.createElement('canvas');
//     canvas.width = 100;
//     canvas.height = 100;
//     const ctx = canvas.getContext('2d');
//     if (ctx) {
//       ctx.fillStyle = '#4CAF50';
//       ctx.fillRect(0, 0, 100, 100);
//       ctx.fillStyle = 'white';
//       ctx.font = '16px Arial';
//       ctx.fillText('TEST', 30, 55);
//     }
//
//     canvas.toBlob(async (blob) => {
//       if (blob) {
//         const testFile = new File([blob], 'test-image.png', { type: 'image/png' });
//         try {
//           const response = await imageApi.uploadImage(testFile);
//           alert(`Upload successful: ${JSON.stringify(response.data.message)}`);
//           // Refresh stats and images after upload
//           await testStatsEndpoint();
//           await testImagesEndpoint();
//         } catch (error: any) {
//           alert(`Upload failed: ${error.response?.data?.error || error.message}`);
//         }
//       }
//     }, 'image/png');
//   };
//
//   useEffect(() => {
//     testBackendConnection();
//     testStatsEndpoint();
//     testImagesEndpoint();
//   }, []);
//
//   const getStatusIcon = (status: string) => {
//     switch (status) {
//       case 'loading': return <CircularProgress size={20} />;
//       case 'success': return <CheckCircle color="success" />;
//       case 'error': return <Error color="error" />;
//       default: return null;
//     }
//   };
//
//   return (
//       <Container maxWidth="md" sx={{ py: 4 }}>
//         <Typography variant="h3" component="h1" gutterBottom align="center">
//           📸 PhotoVault API Test
//         </Typography>
//
//         <Typography variant="subtitle1" align="center" color="textSecondary" sx={{ mb: 4 }}>
//           Testing connection between React frontend and Spring Boot backend
//         </Typography>
//
//         {/* Connection Status */}
//         <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
//           <Box display="flex" alignItems="center" gap={2}>
//             {getStatusIcon(connectionStatus.backend)}
//             <Typography variant="h6">Backend Connection</Typography>
//           </Box>
//           <Alert
//               severity={connectionStatus.backend === 'success' ? 'success' :
//                   connectionStatus.backend === 'error' ? 'error' : 'info'}
//               sx={{ mt: 2 }}
//           >
//             {connectionStatus.message}
//           </Alert>
//         </Paper>
//
//         {/* API Endpoints Test */}
//         <Grid container spacing={3}>
//           <Grid size={{ xs: 12, md: 6 }}>
//             <Paper elevation={2} sx={{ p: 3 }}>
//               <Typography variant="h6" gutterBottom>
//                 📊 Stats Endpoint
//               </Typography>
//               {stats ? (
//                   <Box>
//                     <Typography>Total Images: {stats.totalImages}</Typography>
//                     <Typography>Favorites: {stats.favorites}</Typography>
//                     <Typography>Archived: {stats.archived}</Typography>
//                   </Box>
//               ) : (
//                   <Typography color="textSecondary">Loading stats...</Typography>
//               )}
//               <Button
//                   variant="outlined"
//                   onClick={testStatsEndpoint}
//                   sx={{ mt: 2 }}
//               >
//                 Refresh Stats
//               </Button>
//             </Paper>
//           </Grid>
//
//           <Grid size={{ xs: 12, md: 6 }}>
//             <Paper elevation={2} sx={{ p: 3 }}>
//               <Typography variant="h6" gutterBottom>
//                 🖼️ Images Endpoint
//               </Typography>
//               {images ? (
//                   <Box>
//                     <Typography>
//                       Found: {images.totalElements || images.length || 0} images
//                     </Typography>
//                     <Typography variant="caption" color="textSecondary">
//                       {images.content ? 'Paginated response' : 'Simple array response'}
//                     </Typography>
//                   </Box>
//               ) : (
//                   <Typography color="textSecondary">Loading images...</Typography>
//               )}
//               <Button
//                   variant="outlined"
//                   onClick={testImagesEndpoint}
//                   sx={{ mt: 2 }}
//               >
//                 Refresh Images
//               </Button>
//             </Paper>
//           </Grid>
//
//           <Grid size={{ xs: 12 }}>
//             <Paper elevation={2} sx={{ p: 3 }}>
//               <Typography variant="h6" gutterBottom>
//                 ⬆️ Upload Test
//               </Typography>
//               <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
//                 This will create and upload a small test image to verify the upload endpoint.
//               </Typography>
//               <Button
//                   variant="contained"
//                   onClick={testFileUpload}
//                   startIcon={<Cloud />}
//                   disabled={connectionStatus.backend !== 'success'}
//               >
//                 Test Upload
//               </Button>
//             </Paper>
//           </Grid>
//         </Grid>
//
//         {/* Retry Connection */}
//         <Box textAlign="center" sx={{ mt: 4 }}>
//           <Button
//               variant="outlined"
//               onClick={testBackendConnection}
//               disabled={connectionStatus.backend === 'loading'}
//           >
//             Retry Connection Test
//           </Button>
//         </Box>
//       </Container>
//   );
// }
//
// export default App;
</file>

</files>
