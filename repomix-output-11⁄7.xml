This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
photovault-be/
  .git/
    hooks/
      applypatch-msg.sample
      commit-msg.sample
      fsmonitor-watchman.sample
      post-update.sample
      pre-applypatch.sample
      pre-commit.sample
      pre-merge-commit.sample
      pre-push.sample
      pre-rebase.sample
      pre-receive.sample
      prepare-commit-msg.sample
      push-to-checkout.sample
      sendemail-validate.sample
      update.sample
    info/
      exclude
    logs/
      refs/
        heads/
          master
        remotes/
          origin/
            master
      HEAD
    refs/
      heads/
        master
      remotes/
        origin/
          master
    COMMIT_EDITMSG
    config
    description
    HEAD
  .mvn/
    wrapper/
      maven-wrapper.properties
  src/
    main/
      java/
        com/
          internship/
            photovault/
              config/
                CorsConfig.java
                FileValidationConfig.java
              controller/
                HealthCheckController.java
                ImageController.java
              entity/
                Image.java
              exception/
                ImageNotFoundException.java
                InvalidFileTypeException.java
                RestExceptionHandler.java
              repository/
                ImageRepository.java
              service/
                ImageService.java
              PhotovaultApplication.java
      resources/
        schema.sql
    test/
      java/
        com/
          internship/
            photovault/
              PhotovaultApplicationTests.java
  .directory
  .gitattributes
  .gitignore
  mvnw
  mvnw.cmd
  pom.xml
photovault-fe/
  .idea/
    inspectionProfiles/
      Project_Default.xml
    .gitignore
    modules.xml
    photovault-fe.iml
    vcs.xml
  public/
    index.html
    manifest.json
    robots.txt
  src/
    components/
      ImageCard/
        ImageCard.tsx
      ImageThumbnail/
        ImageThumbnail.tsx
      ImageUploads/
        ImageUploads.tsx
    hooks/
      useThumbnail.ts
    pages/
      Archive.tsx
      Favorites.tsx
      Home.tsx
      Trash.tsx
    services/
      api.ts
    types/
      Image.ts
    App.css
    App.test.tsx
    App.tsx
    index.css
    index.tsx
    logo.svg
    react-app-env.d.ts
    reportWebVitals.ts
    setupTests.ts
  .env
  .gitignore
  package.json
  photovault-fe.iml
  README.md
  repomix-output.xml
  tsconfig.json
.directory
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="photovault-be/.git/hooks/applypatch-msg.sample">
#!/usr/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:
</file>

<file path="photovault-be/.git/hooks/commit-msg.sample">
#!/usr/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}
</file>

<file path="photovault-be/.git/hooks/fsmonitor-watchman.sample">
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}
</file>

<file path="photovault-be/.git/hooks/post-update.sample">
#!/usr/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info
</file>

<file path="photovault-be/.git/hooks/pre-applypatch.sample">
#!/usr/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:
</file>

<file path="photovault-be/.git/hooks/pre-commit.sample">
#!/usr/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
</file>

<file path="photovault-be/.git/hooks/pre-merge-commit.sample">
#!/usr/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:
</file>

<file path="photovault-be/.git/hooks/pre-push.sample">
#!/usr/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0
</file>

<file path="photovault-be/.git/hooks/pre-rebase.sample">
#!/usr/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END
</file>

<file path="photovault-be/.git/hooks/pre-receive.sample">
#!/usr/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi
</file>

<file path="photovault-be/.git/hooks/prepare-commit-msg.sample">
#!/usr/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
</file>

<file path="photovault-be/.git/hooks/push-to-checkout.sample">
#!/usr/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi
</file>

<file path="photovault-be/.git/hooks/sendemail-validate.sample">
#!/usr/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi
</file>

<file path="photovault-be/.git/hooks/update.sample">
#!/usr/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0
</file>

<file path="photovault-be/.git/info/exclude">
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
</file>

<file path="photovault-be/.git/logs/refs/heads/master">
0000000000000000000000000000000000000000 10da9837e8c0368691ac97c0dcbc699214a7f889 HieuNg <hn65563@gmail.com> 1750837954 +0700	commit (initial): Create and Read
10da9837e8c0368691ac97c0dcbc699214a7f889 dc641069b42f32ff199c2f1f0d30cab79afd19d4 HieuNg <hn65563@gmail.com> 1750838737 +0700	commit: Fav flag testing is up
dc641069b42f32ff199c2f1f0d30cab79afd19d4 09c5a8a9dd926acd94ccbda4e1ec04e40eb2a212 HieuNg <hn65563@gmail.com> 1750841111 +0700	commit: adding archive and delete
09c5a8a9dd926acd94ccbda4e1ec04e40eb2a212 9683aa6a30d5b593ae94ef31b3bb2a24259f4fb6 HieuNg <hn65563@gmail.com> 1750843130 +0700	commit: trash and restore function
9683aa6a30d5b593ae94ef31b3bb2a24259f4fb6 6e25fc78df33f9ee95635f9ed404fc13d34ba4f8 HieuNg <hn65563@gmail.com> 1750845116 +0700	commit: Including exception handler for null in Trash
6e25fc78df33f9ee95635f9ed404fc13d34ba4f8 5a9ab8d9b4b4326b6ac5f0aece4fee47df4d9e93 HieuNg <hn65563@gmail.com> 1751217477 +0700	commit: Including exception handler for null in Trash
5a9ab8d9b4b4326b6ac5f0aece4fee47df4d9e93 ad823362172f8760c4d8326c6096d347713ccadb HieuNg <hn65563@gmail.com> 1751268233 +0700	commit: edited out insecure db configs
ad823362172f8760c4d8326c6096d347713ccadb 9ace6613dac31cce19beadaa39c13df4d2779828 HieuNg <hn65563@gmail.com> 1751268446 +0700	commit: excluded insecure stuff
9ace6613dac31cce19beadaa39c13df4d2779828 bc6e60531e4e6693a67fa96712dc553aed9c90a4 HieuNg <hn65563@gmail.com> 1751268552 +0700	commit: excluded insecure stuff
bc6e60531e4e6693a67fa96712dc553aed9c90a4 dda0fe8f5bd79c11fff5640537a0c17b5690cfc2 HieuNg <hn65563@gmail.com> 1751268782 +0700	commit: excluded insecure stuff
dda0fe8f5bd79c11fff5640537a0c17b5690cfc2 a4e1c3121c1f541c1447503c2ba8497b252d5a8b HieuNg <hn65563@gmail.com> 1751274073 +0700	commit: updated a schema and changes to methods, handlers
a4e1c3121c1f541c1447503c2ba8497b252d5a8b cc59d79ec436e0994aacb1d916d5b5abc2db738e HieuNGN <hn65563@gmail.com> 1751824366 +0700	commit: bug in db
cc59d79ec436e0994aacb1d916d5b5abc2db738e 24aea3093246c4561c88b88a50743c0fc0eb441d HieuNGN <hn65563@gmail.com> 1751824451 +0700	commit: bug in db config is not fixed yet
24aea3093246c4561c88b88a50743c0fc0eb441d 51a9f6286fd7f0a077201a6c9c2416b84e17edf2 HieuNGN <hn65563@gmail.com> 1752083011 +0700	commit: updated UI, got rid of the api test
51a9f6286fd7f0a077201a6c9c2416b84e17edf2 ae5cfd956c8997ad44147df7f830273c2a23c684 HieuNGN <hn65563@gmail.com> 1752218352 +0700	commit: Major update before shifting form
</file>

<file path="photovault-be/.git/logs/refs/remotes/origin/master">
0000000000000000000000000000000000000000 10da9837e8c0368691ac97c0dcbc699214a7f889 HieuNg <hn65563@gmail.com> 1750838067 +0700	update by push
10da9837e8c0368691ac97c0dcbc699214a7f889 09c5a8a9dd926acd94ccbda4e1ec04e40eb2a212 HieuNg <hn65563@gmail.com> 1750841124 +0700	update by push
09c5a8a9dd926acd94ccbda4e1ec04e40eb2a212 5a9ab8d9b4b4326b6ac5f0aece4fee47df4d9e93 HieuNg <hn65563@gmail.com> 1751217496 +0700	update by push
5a9ab8d9b4b4326b6ac5f0aece4fee47df4d9e93 ad823362172f8760c4d8326c6096d347713ccadb HieuNg <hn65563@gmail.com> 1751268247 +0700	update by push
ad823362172f8760c4d8326c6096d347713ccadb 9ace6613dac31cce19beadaa39c13df4d2779828 HieuNg <hn65563@gmail.com> 1751268453 +0700	update by push
9ace6613dac31cce19beadaa39c13df4d2779828 bc6e60531e4e6693a67fa96712dc553aed9c90a4 HieuNg <hn65563@gmail.com> 1751268561 +0700	update by push
bc6e60531e4e6693a67fa96712dc553aed9c90a4 dda0fe8f5bd79c11fff5640537a0c17b5690cfc2 HieuNg <hn65563@gmail.com> 1751268789 +0700	update by push
dda0fe8f5bd79c11fff5640537a0c17b5690cfc2 a4e1c3121c1f541c1447503c2ba8497b252d5a8b HieuNg <hn65563@gmail.com> 1751274081 +0700	update by push
a4e1c3121c1f541c1447503c2ba8497b252d5a8b 24aea3093246c4561c88b88a50743c0fc0eb441d HieuNGN <hn65563@gmail.com> 1751824458 +0700	update by push
24aea3093246c4561c88b88a50743c0fc0eb441d 51a9f6286fd7f0a077201a6c9c2416b84e17edf2 HieuNGN <hn65563@gmail.com> 1752083496 +0700	update by push
51a9f6286fd7f0a077201a6c9c2416b84e17edf2 ae5cfd956c8997ad44147df7f830273c2a23c684 HieuNGN <hn65563@gmail.com> 1752218367 +0700	update by push
</file>

<file path="photovault-be/.git/logs/HEAD">
0000000000000000000000000000000000000000 10da9837e8c0368691ac97c0dcbc699214a7f889 HieuNg <hn65563@gmail.com> 1750837954 +0700	commit (initial): Create and Read
10da9837e8c0368691ac97c0dcbc699214a7f889 dc641069b42f32ff199c2f1f0d30cab79afd19d4 HieuNg <hn65563@gmail.com> 1750838737 +0700	commit: Fav flag testing is up
dc641069b42f32ff199c2f1f0d30cab79afd19d4 09c5a8a9dd926acd94ccbda4e1ec04e40eb2a212 HieuNg <hn65563@gmail.com> 1750841111 +0700	commit: adding archive and delete
09c5a8a9dd926acd94ccbda4e1ec04e40eb2a212 9683aa6a30d5b593ae94ef31b3bb2a24259f4fb6 HieuNg <hn65563@gmail.com> 1750843130 +0700	commit: trash and restore function
9683aa6a30d5b593ae94ef31b3bb2a24259f4fb6 6e25fc78df33f9ee95635f9ed404fc13d34ba4f8 HieuNg <hn65563@gmail.com> 1750845116 +0700	commit: Including exception handler for null in Trash
6e25fc78df33f9ee95635f9ed404fc13d34ba4f8 5a9ab8d9b4b4326b6ac5f0aece4fee47df4d9e93 HieuNg <hn65563@gmail.com> 1751217477 +0700	commit: Including exception handler for null in Trash
5a9ab8d9b4b4326b6ac5f0aece4fee47df4d9e93 ad823362172f8760c4d8326c6096d347713ccadb HieuNg <hn65563@gmail.com> 1751268233 +0700	commit: edited out insecure db configs
ad823362172f8760c4d8326c6096d347713ccadb 9ace6613dac31cce19beadaa39c13df4d2779828 HieuNg <hn65563@gmail.com> 1751268446 +0700	commit: excluded insecure stuff
9ace6613dac31cce19beadaa39c13df4d2779828 bc6e60531e4e6693a67fa96712dc553aed9c90a4 HieuNg <hn65563@gmail.com> 1751268552 +0700	commit: excluded insecure stuff
bc6e60531e4e6693a67fa96712dc553aed9c90a4 dda0fe8f5bd79c11fff5640537a0c17b5690cfc2 HieuNg <hn65563@gmail.com> 1751268782 +0700	commit: excluded insecure stuff
dda0fe8f5bd79c11fff5640537a0c17b5690cfc2 a4e1c3121c1f541c1447503c2ba8497b252d5a8b HieuNg <hn65563@gmail.com> 1751274073 +0700	commit: updated a schema and changes to methods, handlers
a4e1c3121c1f541c1447503c2ba8497b252d5a8b cc59d79ec436e0994aacb1d916d5b5abc2db738e HieuNGN <hn65563@gmail.com> 1751824366 +0700	commit: bug in db
cc59d79ec436e0994aacb1d916d5b5abc2db738e 24aea3093246c4561c88b88a50743c0fc0eb441d HieuNGN <hn65563@gmail.com> 1751824451 +0700	commit: bug in db config is not fixed yet
24aea3093246c4561c88b88a50743c0fc0eb441d 51a9f6286fd7f0a077201a6c9c2416b84e17edf2 HieuNGN <hn65563@gmail.com> 1752083011 +0700	commit: updated UI, got rid of the api test
51a9f6286fd7f0a077201a6c9c2416b84e17edf2 ae5cfd956c8997ad44147df7f830273c2a23c684 HieuNGN <hn65563@gmail.com> 1752218352 +0700	commit: Major update before shifting form
</file>

<file path="photovault-be/.git/refs/heads/master">
ae5cfd956c8997ad44147df7f830273c2a23c684
</file>

<file path="photovault-be/.git/refs/remotes/origin/master">
ae5cfd956c8997ad44147df7f830273c2a23c684
</file>

<file path="photovault-be/.git/COMMIT_EDITMSG">
Major update before shifting form
</file>

<file path="photovault-be/.git/config">
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = git@github.com:HieuNGN/photovault.git
	fetch = +refs/heads/*:refs/remotes/origin/*
</file>

<file path="photovault-be/.git/description">
Unnamed repository; edit this file 'description' to name the repository.
</file>

<file path="photovault-be/.git/HEAD">
ref: refs/heads/master
</file>

<file path="photovault-be/.mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/config/CorsConfig.java">
package com.internship.photovault.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebMvc
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:3000")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/config/FileValidationConfig.java">
package com.internship.photovault.config;

import org.springframework.stereotype.Component;
import java.util.Set;

@Component
public class FileValidationConfig {
    private static final Set<String> ALLOWED_TYPES = Set.of(
            "image/jpeg", "image/png", "image/gif", "image/webp"
    );

    public boolean isValidImageType(String contentType) {
        return ALLOWED_TYPES.contains(contentType);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/controller/HealthCheckController.java">
package com.internship.photovault.controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/health")
public class HealthCheckController {

    @GetMapping // This creates GET /health
    public String checkHealth() {
        return "Houston, we are live! API is working";
    }

    @GetMapping("/info")  // Remove the duplicate /api/v1 prefix
    public String getInfo() {
        return "This is the API for the Photovault application";
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/controller/ImageController.java">
package com.internship.photovault.controller;

import com.internship.photovault.entity.Image;
import com.internship.photovault.exception.ImageNotFoundException;
import com.internship.photovault.exception.InvalidFileTypeException;
import com.internship.photovault.service.ImageService;
import jakarta.validation.constraints.NotNull;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/images")
//@CrossOrigin(origins = "*")
@Validated
public class ImageController {

    private final ImageService imageService;

    public ImageController(ImageService imageService) {
        this.imageService = imageService;
    }

    @PostMapping("/upload")
    public ResponseEntity<?> uploadImage(@RequestParam("file") @NotNull MultipartFile file) {
        try {
            if (file.isEmpty()) {
                return ResponseEntity.badRequest()
                        .body(Map.of("error", "File cannot be empty"));
            }

            Image savedImage = imageService.saveImage(file);
            return ResponseEntity.ok(Map.of(
                    "message", "Image uploaded successfully",
                    "image", savedImage
            ));
        } catch (InvalidFileTypeException e) {
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Failed to upload image: " + e.getMessage()));
        }
    }

    @PostMapping("/upload/multiple")
    public ResponseEntity<?> uploadMultipleImages(@RequestParam("files") @NotNull MultipartFile[] files) {
        try {
            if (files.length == 0) {
                return ResponseEntity.badRequest()
                        .body(Map.of("error", "No files uploaded"));
            }


            List<Map<String, Object>> results = new ArrayList<>();
            List<Image> successfulUploads = new ArrayList<>();
            List<Map<String, String>> failedUploads = new ArrayList<>();

            for (int i = 0; i < files.length; i++) {
                MultipartFile file = files[i];
                try {
                    if (!file.isEmpty()) {
                        Image savedImage = imageService.saveImage(file);
                        successfulUploads.add(savedImage);
                        results.add(Map.of(
                                "index", i,
                                "filename", file.getOriginalFilename(),
                                "status", "success",
                                "image", savedImage
                        ));
                    } else {
                        failedUploads.add(Map.of(
                                "index", String.valueOf(i),
                                "filename", file.getOriginalFilename() != null ? file.getOriginalFilename() : "unknown",
                                "error", "File is empty"
                        ));
                    }
                } catch (InvalidFileTypeException e) {
                    failedUploads.add(Map.of(
                            "index", String.valueOf(i),
                            "filename", file.getOriginalFilename() != null ? file.getOriginalFilename() : "unknown",
                            "error", e.getMessage()
                    ));
                } catch (Exception e) {
                    failedUploads.add(Map.of(
                            "index", String.valueOf(i),
                            "filename", file.getOriginalFilename() != null ? file.getOriginalFilename() : "unknown",
                            "error", "Upload failed: " + e.getMessage()
                    ));
                }
            }

            return ResponseEntity.ok(Map.of(
                    "message", String.format("Processed %d files: %d successful, %d failed",
                            files.length, successfulUploads.size(), failedUploads.size()),
                    "successful", successfulUploads.size(),
                    "failed", failedUploads.size(),
                    "results", results,
                    "errors", failedUploads
            ));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Failed to process uploads: " + e.getMessage()));
        }
    }

    @GetMapping
    public ResponseEntity<Page<Image>> getAllImages(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "uploadDate") String sortBy,
            @RequestParam(defaultValue = "desc") String sortDir) {

        Pageable pageable = PageRequest.of(page, size,
                sortDir.equalsIgnoreCase("desc") ?
                        Sort.by(sortBy).descending() : Sort.by(sortBy).ascending());

        Page<Image> images = imageService.getAllImages(pageable);
        return ResponseEntity.ok(images);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getImageById(@PathVariable Long id) {
        try {
            Image image = imageService.getImageById(id);
            return ResponseEntity.ok(image);
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/{id}/download")
    public ResponseEntity<Resource> downloadImage(@PathVariable Long id) {
        try {
            Image image = imageService.getImageById(id);
            Resource resource = imageService.loadImageAsResource(image.getStoredFilename());

            return ResponseEntity.ok()
                    .contentType(MediaType.parseMediaType(image.getContentType()))
                    .header(HttpHeaders.CONTENT_DISPOSITION,
                            "attachment; filename=\"" + image.getOriginalFilename() + "\"")
                    .body(resource);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/{id}/favorite")
    public ResponseEntity<?> toggleFavorite(@PathVariable Long id) {
        try {
            Image image = imageService.toggleFavorite(id);
            return ResponseEntity.ok(Map.of(
                    "message", "Favorite status updated",
                    "isFavorite", image.getIsFavorite()
            ));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/favorites")
    public ResponseEntity<List<Image>> getFavorites() {
        List<Image> favorites = imageService.getFavorites();
        return ResponseEntity.ok(favorites);
    }

    @GetMapping("/search")
    public ResponseEntity<List<Image>> searchImages(@RequestParam String query) {
        List<Image> results = imageService.searchImages(query);
        return ResponseEntity.ok(results);
    }

    @GetMapping("/stats")
    public ResponseEntity<Map<String, Object>> getStats() {
        Map<String, Object> stats = imageService.getImageStats();
        return ResponseEntity.ok(stats);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteImage(@PathVariable Long id) {
        try {
            imageService.moveToTrash(id);
            return ResponseEntity.ok(Map.of("message", "Item moved to trash"));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/{id}/archive")
    public ResponseEntity<?> toggleArchive(@PathVariable Long id) {
        try {
            Image image = imageService.toggleArchive(id);
            return ResponseEntity.ok(Map.of(
                    "message", "Archive status updated",
                    "isArchived", image.getIsArchived()
            ));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/archived")
    public ResponseEntity<List<Image>> getArchivedImages() {
        List<Image> archivedImages = imageService.getArchivedImages();
        return ResponseEntity.ok(archivedImages);
    }

//    adding the backend endpoints for the trash and restore functions
    @GetMapping("/trash")
    public ResponseEntity<List<Image>> getTrashedImages() {
        List<Image> trashedImages = imageService.getTrashedImages();
        return ResponseEntity.ok(trashedImages);
    }
    @PutMapping("/{id}/restore")
    public ResponseEntity<?> restoreImage(@PathVariable Long id) {
        try {
            Image image = imageService.restoreFromTrash(id);
            return ResponseEntity.ok(Map.of(
                    "message", "Item restored from trash",
                    "image", image
            ));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }
    @DeleteMapping("/{id}/permanent")
    public ResponseEntity<?> deletePermanently(@PathVariable Long id) {
        try {
            imageService.deletePermanently(id);
            return ResponseEntity.ok(Map.of("message", "Item permanently deleted"));
        } catch (ImageNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/{id}/thumbnail")
    public ResponseEntity<Resource> getThumbnail(@PathVariable Long id) {
        try {
            // Use internal method to bypass deletion check
            Image image = imageService.getImageByIdInternal(id);
            Resource resource = imageService.loadImageAsResource(image.getStoredFilename());

            return ResponseEntity.ok()
                    .contentType(MediaType.parseMediaType(image.getContentType()))
                    .body(resource);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/entity/Image.java">
package com.internship.photovault.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;

@Setter
@Getter
@Entity
@Table(name = "images")
public class Image {

    // Getters and Setters
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "filename", nullable = false)
    @NotBlank(message = "Filename cannot be blank")
    private String filename;

    @Column(name = "stored_filename", nullable = false)
    @NotBlank(message = "Stored filename cannot be blank")
    private String storedFilename;

    @Column(name = "original_filename", nullable = false)
    @NotBlank(message = "Original filename cannot be blank")
    private String originalFilename;

    @Column(name = "file_path", nullable = false, length = 500)
    @NotBlank(message = "File path cannot be blank")
    private String filePath;

    @Column(name = "file_size", nullable = false)
    @Min(value = 1, message = "File size must be greater than 0")
    private Long fileSize;

    @Column(name = "content_type", nullable = false)
    @NotBlank(message = "Content type cannot be blank")
    private String contentType;

    @Column(name = "upload_date")
    private LocalDateTime uploadDate;

    @Column(name = "is_favorite")
    private Boolean isFavorite = false;

    @Column(name = "is_archived")
    private Boolean isArchived = false;

    @Column(name = "is_deleted")
    private Boolean isDeleted = false;

    @CreationTimestamp
    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    // Constructors
    public Image() {
        this.uploadDate = LocalDateTime.now();
    }

}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/exception/ImageNotFoundException.java">
package com.internship.photovault.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

// This annotation tells Spring to respond with a 404 NOT FOUND status when this exception is thrown
//@ResponseStatus(HttpStatus.NOT_FOUND)
public class ImageNotFoundException extends RuntimeException {
    public ImageNotFoundException(String message) {
        super(message);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/exception/InvalidFileTypeException.java">
package com.internship.photovault.exception;


import java.io.Serial;

public class InvalidFileTypeException extends RuntimeException {
    @Serial
    private static final long serialVersionUID = 1L;

    public InvalidFileTypeException(String message) {
        super(message);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/exception/RestExceptionHandler.java">
package com.internship.photovault.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.multipart.MaxUploadSizeExceededException;

import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

@RestControllerAdvice
public class RestExceptionHandler {

    @ExceptionHandler(ImageNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleImageNotFound(ImageNotFoundException ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.NOT_FOUND.value());
        body.put("error", "Image Not Found");
        body.put("message", ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(InvalidFileTypeException.class)
    public ResponseEntity<Map<String, Object>> handleInvalidFileType(InvalidFileTypeException ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.BAD_REQUEST.value());
        body.put("error", "Invalid File Type");
        body.put("message", ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(MaxUploadSizeExceededException.class)
    public ResponseEntity<Map<String, Object>> handleMaxSizeException(MaxUploadSizeExceededException ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.PAYLOAD_TOO_LARGE.value());
        body.put("error", "File Too Large");
        body.put("message", "File size exceeds maximum allowed size");

        return new ResponseEntity<>(body, HttpStatus.PAYLOAD_TOO_LARGE);
    }

    @ExceptionHandler(IllegalStateException.class)
    public ResponseEntity<Map<String, Object>> handleIllegalStateException(IllegalStateException ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.CONFLICT.value());
        body.put("error", "Conflict");
        body.put("message", ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGenericException(Exception ex) {
        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());
        body.put("error", "Internal Server Error");
        body.put("message", "An unexpected error occurred: " + ex.getMessage());

        return new ResponseEntity<>(body, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/repository/ImageRepository.java">
package com.internship.photovault.repository;

import com.internship.photovault.entity.Image;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.data.domain.Sort;
import java.util.List;
import java.util.Optional;

// Early creation blank test
//@Repository
//public interface ImageRepository extends JpaRepository<Image, Long> {
//    // Spring Data JPA will automatically implement all basic CRUD methods.
//    // We can add custom query methods here later if needed.
//    List<Image> findByIsArchivedAndIsInTrash(boolean isArchived, boolean isInTrash, Sort sort);
//
//}

@Repository
public interface ImageRepository extends JpaRepository<Image, Long> {

    @Query("SELECT i FROM Image i WHERE i.isDeleted = false ORDER BY i.uploadDate DESC")
    Page<Image> findAllActive(Pageable pageable);

    @Query("SELECT i FROM Image i WHERE i.isDeleted = false ORDER BY i.uploadDate DESC")
    List<Image> findAllActive();

// Add proper generics to all methods, update the find all to exclude deleted
//    @Query("SELECT i FROM Image i WHERE i.isDeleted = false")
//    Page<Image> findAllActive(Pageable pageable);

    @Query("SELECT i FROM Image i WHERE i.isFavorite = true AND i.isDeleted = false")
    List<Image> findFavorites();

    @Query("SELECT i FROM Image i WHERE i.isArchived = true AND i.isDeleted = false")
    List<Image> findArchived();

    @Query("SELECT i FROM Image i WHERE i.isDeleted = true")
    List<Image> findTrash();

    Optional<Image> findByFilenameAndIsDeletedFalse(String filename);

    @Query("SELECT i FROM Image i WHERE i.originalFilename ILIKE %:searchTerm% AND i.isDeleted = false")
    List<Image> searchByOriginalFilename(@Param("searchTerm") String searchTerm);

    @Query("SELECT COUNT(i) FROM Image i WHERE i.isDeleted = false")
    long countActiveImages();

    @Query("SELECT COUNT(i) FROM Image i WHERE i.isFavorite = true AND i.isDeleted = false")
    long countFavorites();

    Optional<Object> findByStoredFilename(String filename);
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/service/ImageService.java">
package com.internship.photovault.service;

import com.internship.photovault.config.FileValidationConfig;
import com.internship.photovault.entity.Image;
import com.internship.photovault.exception.ImageNotFoundException;
import com.internship.photovault.exception.InvalidFileTypeException;
import com.internship.photovault.repository.ImageRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MaxUploadSizeExceededException;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Service
public class ImageService {

    private final Path storageLocation;
    private final ImageRepository imageRepository;
    private final FileValidationConfig fileValidationConfig;

    public ImageService(@Value("${photovault.storage.location:./uploads}") String storageLocationPath,
                        ImageRepository imageRepository,
                        FileValidationConfig fileValidationConfig) {
        this.storageLocation = Paths.get(storageLocationPath).toAbsolutePath().normalize();
        this.imageRepository = imageRepository;
        this.fileValidationConfig = fileValidationConfig;

        try {
            Files.createDirectories(this.storageLocation);
        } catch (IOException e) {
            throw new RuntimeException("Could not create the storage directory.", e);
        }
    }

    public Image saveImage(MultipartFile file) throws IOException {
        // File size validation
        long maxFileSize = 10 * 1024 * 1024; // 10MB
        if (file.getSize() > maxFileSize) {
            throw new MaxUploadSizeExceededException(maxFileSize);
        }

        // Validate file type using injected config
        if (!fileValidationConfig.isValidImageType(file.getContentType())) {
            throw new InvalidFileTypeException("Invalid file type. Only JPEG, PNG, GIF, and WebP are allowed.");
        }

        // Generate unique filename
        String originalFileName = file.getOriginalFilename();
        String fileExtension = "";
        if (originalFileName != null && originalFileName.contains(".")) {
            fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
        }
        String storedFilename = UUID.randomUUID() + fileExtension;

        // Store the file
        Path targetLocation = this.storageLocation.resolve(storedFilename);
        Files.copy(file.getInputStream(), targetLocation);

        // Create and save image entity
        Image image = new Image();
        image.setOriginalFilename(originalFileName);
        image.setFilename(originalFileName);
        image.setStoredFilename(storedFilename);
        image.setFilePath(targetLocation.toString());
        image.setFileSize(file.getSize());
        image.setContentType(file.getContentType());
        image.setUploadDate(LocalDateTime.now());

        return imageRepository.save(image);
    }

    // Proper Page filtering for active images only
    public Page<Image> getAllImages(Pageable pageable) {
        Page<Image> allImages = imageRepository.findAll(pageable);
        List<Image> activeImages = allImages.getContent().stream()
                .filter(image -> !image.getIsDeleted() && !image.getIsArchived())
                .toList();

        return new PageImpl<>(activeImages, pageable, getTotalActiveImageCount());
    }

    private long getTotalActiveImageCount() {
        return imageRepository.findAll().stream()
                .filter(image -> !image.getIsDeleted() && !image.getIsArchived())
                .count();
    }

    // return active (non-deleted, non-archived) images
    public List<Image> getAllImages() {
        return imageRepository.findAll(Sort.by(Sort.Direction.DESC, "uploadDate")).stream()
                .filter(image -> !image.getIsDeleted() && !image.getIsArchived())
                .toList();
    }

    // Separate method for getting image by ID without deletion check (for internal use)
    // Make the internal method public for thumbnail access
    public Image getImageByIdInternal(Long id) {
        return imageRepository.findById(id)
                .orElseThrow(() -> new ImageNotFoundException("Image not found with id: " + id));
    }

    // Public method that checks for deletion
    public Image getImageById(Long id) {
        Image image = getImageByIdInternal(id);
        if (image.getIsDeleted()) {
            throw new ImageNotFoundException("Image has been deleted with id: " + id);
        }
        return image;
    }

    // Simplified resource loading without database lookup
    public Resource loadImageAsResource(String filename) {
        if (filename == null || filename.trim().isEmpty()) {
            throw new IllegalArgumentException("Filename cannot be null or empty");
        }

        try {
            Path filePath = this.storageLocation.resolve(filename).normalize();
            Resource resource = new UrlResource(filePath.toUri());

            if (resource.exists() && resource.isReadable()) {
                return resource;
            } else {
                throw new RuntimeException("Could not read the file: " + filename);
            }
        } catch (MalformedURLException e) {
            throw new RuntimeException("Error: " + e.getMessage());
        }
    }

    public Image toggleFavorite(Long id) {
        Image image = getImageById(id);
        image.setIsFavorite(!image.getIsFavorite());
        return imageRepository.save(image);
    }

    public List<Image> getFavorites() {
        return imageRepository.findAll().stream()
                .filter(image -> image.getIsFavorite() && !image.getIsDeleted())
                .sorted((a, b) -> b.getUploadDate().compareTo(a.getUploadDate()))
                .toList();
    }

    // Use getAllImages() method instead of non-existent findAllActive()
    public List<Image> searchImages(String query) {
        return getAllImages().stream()
                .filter(image -> image.getOriginalFilename().toLowerCase().contains(query.toLowerCase()))
                .toList();
    }

    public Map<String, Object> getImageStats() {
        List<Image> allImages = imageRepository.findAll();

        long totalImages = allImages.stream()
                .filter(image -> !image.getIsDeleted())
                .count();

        long favoriteCount = allImages.stream()
                .filter(image -> image.getIsFavorite() && !image.getIsDeleted())
                .count();

        long archivedCount = allImages.stream()
                .filter(image -> image.getIsArchived() && !image.getIsDeleted())
                .count();

        return Map.of(
                "totalImages", totalImages,
                "favorites", favoriteCount,
                "archived", archivedCount
        );
    }

    public Image toggleArchive(Long id) {
        Image image = getImageById(id);
        image.setIsArchived(!image.getIsArchived());
        return imageRepository.save(image);
    }

    public List<Image> getArchivedImages() {
        return imageRepository.findAll().stream()
                .filter(image -> image.getIsArchived() && !image.getIsDeleted())
                .sorted((a, b) -> b.getUpdatedAt().compareTo(a.getUpdatedAt()))
                .toList();
    }

    public List<Image> getTrashedImages() {
        return imageRepository.findAll().stream()
                .filter(Image::getIsDeleted)
                .sorted((a, b) -> b.getUpdatedAt().compareTo(a.getUpdatedAt()))
                .toList();
    }

    public void moveToTrash(Long id) {
        Image image = getImageById(id);
        image.setIsDeleted(true);
        imageRepository.save(image);
    }

    // Fixed: Use internal method to bypass deletion check
    public Image restoreFromTrash(Long id) {
        Image image = getImageByIdInternal(id);
        if (!image.getIsDeleted()) {
            throw new IllegalStateException("Image is not in trash");
        }
        image.setIsDeleted(false);
        return imageRepository.save(image);
    }

    // Fixed: Use internal method and renamed for consistency
    public void deletePermanently(Long id) {
        Image image = getImageByIdInternal(id);

        // Delete the physical file
        try {
            Path filePath = this.storageLocation.resolve(image.getStoredFilename());
            Files.deleteIfExists(filePath);
        } catch (IOException e) {
            // Log the error but don't fail the operation
            System.err.println("Failed to delete physical file: " + e.getMessage());
        }

        // Delete from database
        imageRepository.delete(image);
    }
}
</file>

<file path="photovault-be/src/main/java/com/internship/photovault/PhotovaultApplication.java">
package com.internship.photovault;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
//import jakarta.annotation.PostConstruct;

@SpringBootApplication
public class PhotovaultApplication {

    public static void main(String[] args) {
        SpringApplication.run(PhotovaultApplication.class, args);
    }

//	@PostConstruct
//	public void checkEnvVars() {
//		System.out.println("DB_URL from environment: " + System.getenv("DB_URL"));
//		System.out.println("DB_USERNAME from environment: " + System.getenv("DB_USERNAME"));
//		System.out.println("DB_PASSWORD loaded: " + (System.getenv("DB_PASSWORD") != null ? "YES" : "NO"));
//	}
}
</file>

<file path="photovault-be/src/main/resources/schema.sql">
-- Create the images table if it doesn't exist
CREATE TABLE IF NOT EXISTS images (
    id BIGSERIAL PRIMARY KEY,
    filename VARCHAR(255) NOT NULL,
    stored_filename VARCHAR(255) NOT NULL,
    original_filename VARCHAR(255) NOT NULL,
    file_path VARCHAR(500) NOT NULL,
    file_size BIGINT NOT NULL,
    content_type VARCHAR(100) NOT NULL,
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_favorite BOOLEAN DEFAULT FALSE,
    is_archived BOOLEAN DEFAULT FALSE,
    is_deleted BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_images_filename ON images(filename);
CREATE INDEX IF NOT EXISTS idx_images_upload_date ON images(upload_date);
CREATE INDEX IF NOT EXISTS idx_images_is_deleted ON images(is_deleted);
</file>

<file path="photovault-be/src/test/java/com/internship/photovault/PhotovaultApplicationTests.java">
package com.internship.photovault;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class PhotovaultApplicationTests {

	@Test
	void contextLoads() {
	}

}
</file>

<file path="photovault-be/.directory">
[Desktop Entry]
Icon=folder-green
</file>

<file path="photovault-be/.gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path="photovault-be/.gitignore">
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

#Environment/Config Files
.env
src/main/resources/application.properties

#Codebase Summary
repomix-output-HieuNGN-photovault.xml

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="photovault-be/mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="photovault-be/mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="photovault-be/pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.internship</groupId>
	<artifactId>photovault</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>photovault</name>
	<description>Demo project for Internship</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency> 
			<groupId>org.springframework.boot</groupId> 
			<artifactId>spring-boot-starter</artifactId> 
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-security</artifactId>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>org.springframework.security</groupId>-->
<!--			<artifactId>spring-security-test</artifactId>-->
<!--			<scope>test</scope>-->
<!--		</dependency>-->
		<dependency>
			<groupId>io.github.cdimascio</groupId>
			<artifactId>java-dotenv</artifactId>
			<version>5.2.2</version>
		</dependency>
<!--		<dependency>-->
<!--			<groupId>me.paulschwarz</groupId>-->
<!--			<artifactId>spring-dotenv</artifactId>-->
<!--			<version>4.0.0</version>-->
<!--		</dependency>-->

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
</file>

<file path="photovault-fe/src/components/ImageCard/ImageCard.tsx">
import React from 'react';
import { Card, CardMedia, CardActions, IconButton } from '@mui/material';
import { Favorite, FavoriteBorder, Archive, Download, Delete } from '@mui/icons-material';
import { Image } from '../../types/Image';

interface ImageCardProps {
    image: Image;
    onToggleFavorite: (id: number) => void;
    onToggleArchive: (id: number) => void;
    onDownload: (id: number, filename: string) => void;
    onDelete: (id: number) => void;
}

const ImageCard: React.FC<ImageCardProps> = React.memo(({
                                                            image,
                                                            onToggleFavorite,
                                                            onToggleArchive,
                                                            onDownload,
                                                            onDelete
                                                        }) => {
    return (
        <Card>
            <CardMedia
                component="img"
                height="200"
                image={`http://localhost:8080/images/${image.id}/download`}
                alt={image.originalFilename}
                sx={{ objectFit: 'cover' }}
            />
            <CardActions>
                <IconButton
                    onClick={() => onToggleFavorite(image.id)}
                    color={image.isFavorite ? 'error' : 'default'}
                >
                    {image.isFavorite ? <Favorite /> : <FavoriteBorder />}
                </IconButton>
                <IconButton onClick={() => onToggleArchive(image.id)}>
                    <Archive />
                </IconButton>
                <IconButton onClick={() => onDownload(image.id, image.originalFilename)}>
                    <Download />
                </IconButton>
                <IconButton onClick={() => onDelete(image.id)}>
                    <Delete />
                </IconButton>
            </CardActions>
        </Card>
    );
});

export default ImageCard;
</file>

<file path="photovault-fe/src/components/ImageThumbnail/ImageThumbnail.tsx">
import React, { useState, useEffect } from 'react';
import { Box, CircularProgress, Typography } from '@mui/material';
import { BrokenImage } from '@mui/icons-material';
import { imageApi } from '../../services/api';

interface ImageThumbnailProps {
    imageId: number;
    alt: string;
    width?: number | string;
    height?: number | string;
    sx?: any;
    fallbackToRegular?: boolean; // Whether to fallback to regular download endpoint
}

const ImageThumbnail: React.FC<ImageThumbnailProps> = ({
                                                           imageId,
                                                           alt,
                                                           width = 200,
                                                           height = 200,
                                                           sx = {},
                                                           fallbackToRegular = false
                                                       }) => {
    const [thumbnailUrl, setThumbnailUrl] = useState<string | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(false);

    useEffect(() => {
        const loadThumbnail = async () => {
            try {
                setLoading(true);
                setError(false);

                // Try thumbnail endpoint first
                const response = await imageApi.getThumbnail(imageId);
                const url = window.URL.createObjectURL(new Blob([response.data]));
                setThumbnailUrl(url);
            } catch (err) {
                if (fallbackToRegular) {
                    try {
                        // Fallback to regular download endpoint
                        const response = await imageApi.downloadImage(imageId);
                        const url = window.URL.createObjectURL(new Blob([response.data]));
                        setThumbnailUrl(url);
                    } catch (fallbackErr) {
                        setError(true);
                    }
                } else {
                    setError(true);
                }
            } finally {
                setLoading(false);
            }
        };

        loadThumbnail();

        // Cleanup function to revoke object URL
        return () => {
            if (thumbnailUrl) {
                window.URL.revokeObjectURL(thumbnailUrl);
            }
        };
    }, [imageId, fallbackToRegular]);

    if (loading) {
        return (
            <Box
                sx={{
                    width,
                    height,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    backgroundColor: '#f5f5f5',
                    borderRadius: 1,
                    ...sx
                }}
            >
                <CircularProgress size={24} />
            </Box>
        );
    }

    if (error || !thumbnailUrl) {
        return (
            <Box
                sx={{
                    width,
                    height,
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'center',
                    backgroundColor: '#f5f5f5',
                    borderRadius: 1,
                    color: '#666',
                    ...sx
                }}
            >
                <BrokenImage sx={{ fontSize: 32, mb: 1 }} />
                <Typography variant="caption">Failed to load</Typography>
            </Box>
        );
    }

    return (
        <Box
            component="img"
            src={thumbnailUrl}
            alt={alt}
            sx={{
                width,
                height,
                objectFit: 'cover',
                borderRadius: 1,
                ...sx
            }}
        />
    );
};

export default ImageThumbnail;
</file>

<file path="photovault-fe/src/hooks/useThumbnail.ts">
import { useState, useEffect } from 'react';
import { imageApi } from '../services/api';

export const useThumbnail = (imageId: number, fallbackToRegular = false) => {
    const [thumbnailUrl, setThumbnailUrl] = useState<string | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(false);

    useEffect(() => {
        const loadThumbnail = async () => {
            try {
                setLoading(true);
                setError(false);

                const response = await imageApi.getThumbnail(imageId);
                const url = window.URL.createObjectURL(new Blob([response.data]));
                setThumbnailUrl(url);
            } catch (err) {
                if (fallbackToRegular) {
                    try {
                        const response = await imageApi.downloadImage(imageId);
                        const url = window.URL.createObjectURL(new Blob([response.data]));
                        setThumbnailUrl(url);
                    } catch (fallbackErr) {
                        setError(true);
                    }
                } else {
                    setError(true);
                }
            } finally {
                setLoading(false);
            }
        };

        loadThumbnail();

        return () => {
            if (thumbnailUrl) {
                window.URL.revokeObjectURL(thumbnailUrl);
            }
        };
    }, [imageId, fallbackToRegular]);

    return { thumbnailUrl, loading, error };
};
</file>

<file path="photovault-fe/.idea/inspectionProfiles/Project_Default.xml">
<component name="InspectionProjectProfileManager">
  <profile version="1.0">
    <option name="myName" value="Project Default" />
    <inspection_tool class="Eslint" enabled="true" level="WARNING" enabled_by_default="true" />
  </profile>
</component>
</file>

<file path="photovault-fe/.idea/.gitignore">
# Default ignored files
/shelf/
/workspace.xml
# Editor-based HTTP Client requests
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml
</file>

<file path="photovault-fe/.idea/modules.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/photovault-fe.iml" filepath="$PROJECT_DIR$/.idea/photovault-fe.iml" />
    </modules>
  </component>
</project>
</file>

<file path="photovault-fe/.idea/photovault-fe.iml">
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://$MODULE_DIR$">
      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
      <excludeFolder url="file://$MODULE_DIR$/temp" />
      <excludeFolder url="file://$MODULE_DIR$/tmp" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
</file>

<file path="photovault-fe/.idea/vcs.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
  </component>
</project>
</file>

<file path="photovault-fe/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="photovault-fe/public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="photovault-fe/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="photovault-fe/src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="photovault-fe/src/index.tsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="photovault-fe/src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="photovault-fe/src/react-app-env.d.ts">
/// <reference types="react-scripts" />
</file>

<file path="photovault-fe/src/reportWebVitals.ts">
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="photovault-fe/src/setupTests.ts">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path="photovault-fe/.env">
REACT_APP_API_URL=http://localhost:8080
</file>

<file path="photovault-fe/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="photovault-fe/photovault-fe.iml">
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
</file>

<file path="photovault-fe/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).
</file>

<file path="photovault-fe/repomix-output.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  index.html
  manifest.json
  robots.txt
src/
  components/
    ImageUploads/
      ImageUploads.tsx
  services/
    api.ts
  App.css
  App.test.tsx
  App.tsx
  index.css
  index.tsx
  logo.svg
  react-app-env.d.ts
  reportWebVitals.ts
  setupTests.ts
.gitignore
package.json
photovault-fe.iml
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="src/components/ImageUploads/ImageUploads.tsx">
import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Box, Typography, CircularProgress, Alert } from '@mui/material';
import { CloudUpload } from '@mui/icons-material';
import { imageApi } from '../../services/api';

interface ImageUploadProps {
    onUploadSuccess: () => void;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ onUploadSuccess }) => {
    const [uploading, setUploading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const onDrop = useCallback(async (acceptedFiles: File[]) => {
        const file = acceptedFiles[0];
        if (!file) return;

        setUploading(true);
        setError(null);
        setSuccess(null);

        try {
            await imageApi.uploadImage(file);
            setSuccess(`Successfully uploaded ${file.name}`);
            onUploadSuccess();
        } catch (err: any) {
            setError(err.response?.data?.error || 'Upload failed');
        } finally {
            setUploading(false);
        }
    }, [onUploadSuccess]);

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: {
            'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']
        },
        maxSize: 10 * 3840 * 2160, // 10MB
        multiple: false
    });

    return (
        <Box sx={{ mb: 4 }}>
            <Box
                {...getRootProps()}
                sx={{
                    border: '2px dashed #ccc',
                    borderRadius: 2,
                    p: 4,
                    textAlign: 'center',
                    cursor: 'pointer',
                    backgroundColor: isDragActive ? '#f5f5f5' : 'transparent',
                    '&:hover': {
                        backgroundColor: '#f9f9f9',
                    },
                }}
            >
                <input {...getInputProps()} />
                {uploading ? (
                    <CircularProgress />
                ) : (
                    <>
                        <CloudUpload sx={{ fontSize: 48, color: '#666', mb: 2 }} />
                        <Typography variant="h6" gutterBottom>
                            {isDragActive ? 'Drop the image here' : 'Drag & drop an image here'}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">
                            or click to select a file
                        </Typography>
                        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                            Supports: JPEG, PNG, GIF, WebP (max 10MB)
                        </Typography>
                    </>
                )}
            </Box>

            {error && (
                <Alert severity="error" sx={{ mt: 2 }}>
                    {error}
                </Alert>
            )}

            {success && (
                <Alert severity="success" sx={{ mt: 2 }}>
                    {success}
                </Alert>
            )}
        </Box>
    );
};

export default ImageUpload;
</file>

<file path="src/services/api.ts">
import axios from 'axios';

const API_BASE_URL = 'http://localhost:8080/';

const api = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
});

export interface Image {
    id: number;
    filename: string;
    storedFilename: string;
    originalFilename: string;
    filePath: string;
    fileSize: number;
    contentType: string;
    uploadDate: string;
    isFavorite: boolean;
    isArchived: boolean;
    isDeleted: boolean;
}

export const imageApi = {
    // Test connection
    testConnection: () =>
        api.get('/health'),

    // Upload image
    uploadImage: (file: File) => {
        const formData = new FormData();
        formData.append('file', file);
        return api.post('/images/upload', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    },

    // Get all images with pagination
    getAllImages: (page = 0, size = 10) =>
        api.get(`/images?page=${page}&size=${size}`),

    // Get image by ID
    getImageById: (id: number) =>
        api.get(`/images/${id}`),

    // Download image
    downloadImage: (id: number) =>
        api.get(`/images/${id}/download`, { responseType: 'blob' }),

    // Toggle favorite
    toggleFavorite: (id: number) =>
        api.put(`/images/${id}/favorite`),

    // Get favorites
    getFavorites: () =>
        api.get('/images/favorites'),

    // Search images
    searchImages: (query: string) =>
        api.get(`/images/search?query=${query}`),

    // Delete image (move to trash)
    deleteImage: (id: number) =>
        api.delete(`/images/${id}`),

    // Get stats
    getStats: () =>
        api.get('/images/stats'),
};

export default api;
</file>

<file path="src/App.css">
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="src/App.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders photovault title', () => {
  render(<App />);
  const titleElement = screen.getByText(/Photovault API Test in progress/i);
  expect(titleElement).toBeInTheDocument();
});
</file>

<file path="src/App.tsx">
import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Button,
  Alert,
  CircularProgress,
  Paper,
  Grid
} from '@mui/material';
import { CheckCircle, Error, Cloud } from '@mui/icons-material';
import { imageApi } from './services/api';

interface ConnectionStatus {
  backend: 'loading' | 'success' | 'error';
  message: string;
}

function App() {
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({
    backend: 'loading',
    message: 'Testing connection...'
  });
  const [stats, setStats] = useState<any>(null);
  const [images, setImages] = useState<any>(null);

  // Test backend connection
  const testBackendConnection = async () => {
    try {
      setConnectionStatus({ backend: 'loading', message: 'Testing backend connection...' });
      const response = await imageApi.testConnection();
      setConnectionStatus({
        backend: 'success',
        message: `Backend connected: ${response.data}`
      });
    } catch (error: any) {
      setConnectionStatus({
        backend: 'error',
        message: `Backend connection failed: ${error.message}`
      });
    }
  };

  // Test stats endpoint
  const testStatsEndpoint = async () => {
    try {
      const response = await imageApi.getStats();
      setStats(response.data);
    } catch (error: any) {
      console.error('Stats endpoint failed:', error);
    }
  };

  // Test images endpoint
  const testImagesEndpoint = async () => {
    try {
      const response = await imageApi.getAllImages();
      setImages(response.data);
    } catch (error: any) {
      console.error('Images endpoint failed:', error);
    }
  };

  // Test file upload
  const testFileUpload = async () => {
    // Create a small test image file
    const canvas = document.createElement('canvas');
    canvas.width = 100;
    canvas.height = 100;
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.fillStyle = '#4CAF50';
      ctx.fillRect(0, 0, 100, 100);
      ctx.fillStyle = 'white';
      ctx.font = '16px Arial';
      ctx.fillText('TEST', 30, 55);
    }

    canvas.toBlob(async (blob) => {
      if (blob) {
        const testFile = new File([blob], 'test-image.png', { type: 'image/png' });
        try {
          const response = await imageApi.uploadImage(testFile);
          alert(`Upload successful: ${JSON.stringify(response.data.message)}`);
          // Refresh stats and images after upload
          await testStatsEndpoint();
          await testImagesEndpoint();
        } catch (error: any) {
          alert(`Upload failed: ${error.response?.data?.error || error.message}`);
        }
      }
    }, 'image/png');
  };

  useEffect(() => {
    testBackendConnection();
    testStatsEndpoint();
    testImagesEndpoint();
  }, []);

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'loading': return <CircularProgress size={20} />;
      case 'success': return <CheckCircle color="success" />;
      case 'error': return <Error color="error" />;
      default: return null;
    }
  };

  return (
      <Container maxWidth="md" sx={{ py: 4 }}>
        <Typography variant="h3" component="h1" gutterBottom align="center">
          📸 PhotoVault API Test
        </Typography>

        <Typography variant="subtitle1" align="center" color="textSecondary" sx={{ mb: 4 }}>
          Testing connection between React frontend and Spring Boot backend
        </Typography>

        {/* Connection Status */}
        <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
          <Box display="flex" alignItems="center" gap={2}>
            {getStatusIcon(connectionStatus.backend)}
            <Typography variant="h6">Backend Connection</Typography>
          </Box>
          <Alert
              severity={connectionStatus.backend === 'success' ? 'success' :
                  connectionStatus.backend === 'error' ? 'error' : 'info'}
              sx={{ mt: 2 }}
          >
            {connectionStatus.message}
          </Alert>
        </Paper>

        {/* API Endpoints Test */}
        <Grid container spacing={3}>
          <Grid size={{ xs: 12, md: 6 }}>
            <Paper elevation={2} sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                📊 Stats Endpoint
              </Typography>
              {stats ? (
                  <Box>
                    <Typography>Total Images: {stats.totalImages}</Typography>
                    <Typography>Favorites: {stats.favorites}</Typography>
                    <Typography>Archived: {stats.archived}</Typography>
                  </Box>
              ) : (
                  <Typography color="textSecondary">Loading stats...</Typography>
              )}
              <Button
                  variant="outlined"
                  onClick={testStatsEndpoint}
                  sx={{ mt: 2 }}
              >
                Refresh Stats
              </Button>
            </Paper>
          </Grid>

          <Grid size={{ xs: 12, md: 6 }}>
            <Paper elevation={2} sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                🖼️ Images Endpoint
              </Typography>
              {images ? (
                  <Box>
                    <Typography>
                      Found: {images.totalElements || images.length || 0} images
                    </Typography>
                    <Typography variant="caption" color="textSecondary">
                      {images.content ? 'Paginated response' : 'Simple array response'}
                    </Typography>
                  </Box>
              ) : (
                  <Typography color="textSecondary">Loading images...</Typography>
              )}
              <Button
                  variant="outlined"
                  onClick={testImagesEndpoint}
                  sx={{ mt: 2 }}
              >
                Refresh Images
              </Button>
            </Paper>
          </Grid>

          <Grid size={{ xs: 12 }}>
            <Paper elevation={2} sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                ⬆️ Upload Test
              </Typography>
              <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                This will create and upload a small test image to verify the upload endpoint.
              </Typography>
              <Button
                  variant="contained"
                  onClick={testFileUpload}
                  startIcon={<Cloud />}
                  disabled={connectionStatus.backend !== 'success'}
              >
                Test Upload
              </Button>
            </Paper>
          </Grid>
        </Grid>

        {/* Retry Connection */}
        <Box textAlign="center" sx={{ mt: 4 }}>
          <Button
              variant="outlined"
              onClick={testBackendConnection}
              disabled={connectionStatus.backend === 'loading'}
          >
            Retry Connection Test
          </Button>
        </Box>
      </Container>
  );
}

export default App;
</file>

<file path="src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="src/index.tsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="src/react-app-env.d.ts">
/// <reference types="react-scripts" />
</file>

<file path="src/reportWebVitals.ts">
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="src/setupTests.ts">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="package.json">
{
  "name": "photovault-fe",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@mui/icons-material": "^7.2.0",
    "@mui/material": "^7.2.0",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.126",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.10.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-dropzone": "^14.3.8",
    "react-router-dom": "^7.6.3",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="photovault-fe.iml">
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
</file>

<file path="README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
</file>

</files>
</file>

<file path="photovault-fe/tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
</file>

<file path=".directory">
[Desktop Entry]
Icon=folder-violet
</file>

<file path="photovault-fe/src/components/ImageUploads/ImageUploads.tsx">
import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import {
    Box,
    Typography,
    CircularProgress,
    Alert,
    LinearProgress,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Chip,
    Button
    // FormControlLabel,
    // Switch
} from '@mui/material';
import { CloudUpload, CheckCircle, Error, Image as ImageIcon, Clear } from '@mui/icons-material';
import { imageApi } from '../../services/api';

interface ImageUploadProps {
    onUploadSuccess: () => void;
}

interface FileWithPreview extends File {
    preview?: string;
}

interface UploadResult {
    filename: string;
    status: 'success' | 'error';
    message?: string;
    error?: string;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ onUploadSuccess }) => {
    const [files, setFiles] = useState<FileWithPreview[]>([]);
    const [uploading, setUploading] = useState(false);
    const [uploadResults, setUploadResults] = useState<UploadResult[]>([]);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);
    // const [multipleMode, setMultipleMode] = useState(false);
    // const [uploadProgress, setUploadProgress] = useState(0);

    const onDrop = useCallback(async (acceptedFiles: File[]) => {
        const filesWithPreview = acceptedFiles.map(file =>
            Object.assign(file, {
                preview: URL.createObjectURL(file)
            })
        );

        // making multiple upload default
        // if (multipleMode) {
        //     setFiles(prev => [...prev, ...filesWithPreview]);
        // } else {
        //     setFiles(filesWithPreview.slice(0, 1)); // Only take first file in single mode
        // }
        // if (!file) return;

        setFiles(prev => [...prev, ...filesWithPreview]);
        // setUploading(true);
        setError(null);
        setSuccess(null);
        setUploadResults([]);
    }, []);

    const removeFile = (fileToRemove: FileWithPreview) => {
        setFiles(files => {
            const newFiles = files.filter(file => file !== fileToRemove);
            if (fileToRemove.preview) {
                URL.revokeObjectURL(fileToRemove.preview);
            }
            return newFiles;
        });
    };

    const handleUpload = async () => {
        if (files.length === 0) return;

        setUploading(true);
        setError(null);
        setSuccess(null);
        setUploadResults([]);
        // setUploadProgress(0);

        try {
            if (files.length === 1) {
                const response = await imageApi.uploadImage(files[0]);
                setSuccess(`Successfully uploaded ${files[0].name}`);
                setUploadResults([{
                    filename: files[0].name,
                    status: 'success'
                }]);
            } else {
                // Multiple file upload
                const response = await imageApi.uploadMultipleImagesWithProgress(files);
                const data = response.data;

                setSuccess(data.message);

                // Process results
                const results: UploadResult[] = [];
                data.results?.forEach((result: any) => {
                    results.push({
                        filename: result.filename,
                        status: result.status
                    });
                });

                data.errors?.forEach((error: any) => {
                    results.push({
                        filename: error.filename,
                        status: 'error',
                        error: error.error
                    });
                });

                setUploadResults(results);
            }
            // setting multiple as default
            //     if (data.successful > 0) {
            //         setTimeout(() => {
            //             onUploadSuccess();
            //             clearFiles();
            //         }, 2000);
            //     }
            // } else {
            //     // Single file upload
            //     const response = await imageApi.uploadImage(files[0]);
            //     setSuccess(`Successfully uploaded ${files[0].name}`);
            //     setUploadResults([{
            //         filename: files[0].name,
            //         status: 'success'
            //     }]);

            setTimeout(() => {
                onUploadSuccess();
                clearFiles();
            }, files.length === 1 ? 1000 : 2000);
        } catch (err: any) {
            const errorMessage = err.response?.data?.error || 'Upload failed';
            setError(errorMessage);
            setUploadResults([{
                filename: files[0]?.name || 'Unknown',
                status: 'error',
                error: errorMessage
            }]);
        } finally {
            setUploading(false);
            // setUploadProgress(0);
        }
    };

    const clearFiles = () => {
        files.forEach(file => {
            if (file.preview) {
                URL.revokeObjectURL(file.preview);
            }
        });
        setFiles([]);
        setUploadResults([]);
        setError(null);
        setSuccess(null);
    };

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: {
            'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']
        },
        maxSize: 10 * 1024 * 1024, // 10MB per file
        multiple: true //replace multipleMode with true to set default
    });

    // Cleanup on unmounting
    React.useEffect(() => {
        return () => {
            files.forEach(file => {
                if (file.preview) {
                    URL.revokeObjectURL(file.preview);
                }
            });
        };
    }, [files]);

    // remove to implement multiple files upload
    //     try {
    //         await imageApi.uploadImage(file);
    //         setSuccess(`Successfully uploaded ${file.name}`);
    //         setTimeout(() => {
    //             onUploadSuccess();
    //         }, 1000);
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Upload failed');
    //     } finally {
    //         setUploading(false);
    //     }
    // }, [onUploadSuccess]);
    //
    // const { getRootProps, getInputProps, isDragActive } = useDropzone({
    //     onDrop,
    //     accept: {
    //         'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']
    //     },
    //     maxSize: 10 * 1024 * 1024, // 10MB
    //     multiple: false
    // });

    return (
        <Box sx={{ mb: 2 }}>
            {/* Multiple upload toggle, removed to set multi as default */}
            {/*<FormControlLabel*/}
            {/*    control={*/}
            {/*        <Switch*/}
            {/*            checked={multipleMode}*/}
            {/*            onChange={(e) => {*/}
            {/*                setMultipleMode(e.target.checked);*/}
            {/*                if (!e.target.checked && files.length > 1) {*/}
            {/*                    // Keep only the first file when switching to single mode*/}
            {/*                    const firstFile = files[0];*/}
            {/*                    files.slice(1).forEach(file => {*/}
            {/*                        if (file.preview) URL.revokeObjectURL(file.preview);*/}
            {/*                    });*/}
            {/*                    setFiles([firstFile]);*/}
            {/*                }*/}
            {/*            }}*/}
            {/*        />*/}
            {/*    }*/}
            {/*    label="Multiple file upload"*/}
            {/*    sx={{ mb: 2 }}*/}
            {/*/>*/}

            {/*drop zones*/}
            <Box
                {...getRootProps()}
                sx={{
                    border: '2px dashed #ccc',
                    borderRadius: 2,
                    p: 4,
                    textAlign: 'center',
                    cursor: 'pointer',
                    backgroundColor: isDragActive ? '#f5f5f5' : 'transparent',
                    '&:hover': {
                        backgroundColor: '#f9f9f9',
                    },
                }}
            >
                <input {...getInputProps()} />
                {uploading ? (
                    <Box>
                        <CircularProgress sx={{ mb: 2 }} />
                        <Typography>Uploading...</Typography>
                        <LinearProgress sx={{ mt: 1 }} />
                    </Box>
                ) : (
                    <>
                        <CloudUpload sx={{ fontSize: 48, color: '#666', mb: 2 }} />
                        <Typography variant="h6" gutterBottom>
                            {isDragActive ? 'Drop the image here' : 'Drag & drop an image here'}
                        </Typography>
                        <Typography variant="body2" color="textSecondary">
                            or click to select a file
                        </Typography>
                        <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                            Supports: JPEG, PNG, GIF, WebP (max 10MB)
                        </Typography>
                    </>
                )}
            </Box>

            {/* File preview list */}
            {files.length > 0 && (
                <Box sx={{ mt: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                        Selected Files ({files.length})
                    </Typography>
                    <List dense>
                        {files.map((file, index) => (
                            <ListItem key={index} sx={{ pl: 0 }}>
                                <ListItemIcon>
                                    <ImageIcon />
                                </ListItemIcon>
                                <ListItemText
                                    primary={file.name}
                                    secondary={`${(file.size / 1024 / 1024).toFixed(2)} MB`}
                                />
                                <Chip
                                    label={`${(file.size / 1024 / 1024).toFixed(1)}MB`}
                                    size="small"
                                    sx={{ mr: 1 }}
                                />
                                <Button
                                    size="small"
                                    onClick={() => removeFile(file)}
                                    disabled={uploading}
                                >
                                    <Clear />
                                </Button>
                            </ListItem>
                        ))}
                    </List>

                    <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
                        <Button
                            variant="contained"
                            onClick={handleUpload}
                            disabled={uploading || files.length === 0}
                        >
                            Upload {files.length > 1 ? `${files.length} Files` : 'File'}
                        </Button>
                        <Button
                            variant="outlined"
                            onClick={clearFiles}
                            disabled={uploading}
                        >
                            Clear All
                        </Button>
                    </Box>
                </Box>
            )}

            {/* Upload results */}
            {uploadResults.length > 0 && (
                <Box sx={{ mt: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                        Upload Results
                    </Typography>
                    <List dense>
                        {uploadResults.map((result, index) => (
                            <ListItem key={index} sx={{ pl: 0 }}>
                                <ListItemIcon>
                                    {result.status === 'success' ?
                                        <CheckCircle color="success" /> :
                                        <Error color="error" />
                                    }
                                </ListItemIcon>
                                <ListItemText
                                    primary={result.filename}
                                    secondary={result.error || 'Uploaded successfully'}
                                />
                            </ListItem>
                        ))}
                    </List>
                </Box>
            )}

            {/*errors & success messages*/}
            {error && (
                <Alert severity="error" sx={{ mt: 2 }}>
                    {error}
                </Alert>
            )}

            {success && (
                <Alert severity="success" sx={{ mt: 2 }}>
                    {success}
                </Alert>
            )}
        </Box>
    );
};

export default ImageUpload;

// old blank test
// import React, { useCallback, useState } from 'react';
// import { useDropzone } from 'react-dropzone';
// import { Box, Typography, CircularProgress, Alert } from '@mui/material';
// import { CloudUpload } from '@mui/icons-material';
// import { imageApi } from '../../services/api';
//
// interface ImageUploadProps {
//     onUploadSuccess: () => void;
// }
//
// const ImageUpload: React.FC<ImageUploadProps> = ({ onUploadSuccess }) => {
//     const [uploading, setUploading] = useState(false);
//     const [error, setError] = useState<string | null>(null);
//     const [success, setSuccess] = useState<string | null>(null);
//
//     const onDrop = useCallback(async (acceptedFiles: File[]) => {
//         const file = acceptedFiles[0];
//         if (!file) return;
//
//         setUploading(true);
//         setError(null);
//         setSuccess(null);
//
//         try {
//             await imageApi.uploadImage(file);
//             setSuccess(`Successfully uploaded ${file.name}`);
//             onUploadSuccess();
//         } catch (err: any) {
//             setError(err.response?.data?.error || 'Upload failed');
//         } finally {
//             setUploading(false);
//         }
//     }, [onUploadSuccess]);
//
//     const { getRootProps, getInputProps, isDragActive } = useDropzone({
//         onDrop,
//         accept: {
//             'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']
//         },
//         maxSize: 10 * 1024 * 1024, // 10MB
//         multiple: false
//     });
//
//     return (
//         <Box sx={{ mb: 4 }}>
//             <Box
//                 {...getRootProps()}
//                 sx={{
//                     border: '2px dashed #ccc',
//                     borderRadius: 2,
//                     p: 4,
//                     textAlign: 'center',
//                     cursor: 'pointer',
//                     backgroundColor: isDragActive ? '#f5f5f5' : 'transparent',
//                     '&:hover': {
//                         backgroundColor: '#f9f9f9',
//                     },
//                 }}
//             >
//                 <input {...getInputProps()} />
//                 {uploading ? (
//                     <CircularProgress />
//                 ) : (
//                     <>
//                         <CloudUpload sx={{ fontSize: 48, color: '#666', mb: 2 }} />
//                         <Typography variant="h6" gutterBottom>
//                             {isDragActive ? 'Drop the image here' : 'Drag & drop an image here'}
//                         </Typography>
//                         <Typography variant="body2" color="textSecondary">
//                             or click to select a file
//                         </Typography>
//                         <Typography variant="caption" display="block" sx={{ mt: 1 }}>
//                             Supports: JPEG, PNG, GIF, WebP (max 10MB)
//                         </Typography>
//                     </>
//                 )}
//             </Box>
//
//             {error && (
//                 <Alert severity="error" sx={{ mt: 2 }}>
//                     {error}
//                 </Alert>
//             )}
//
//             {success && (
//                 <Alert severity="success" sx={{ mt: 2 }}>
//                     {success}
//                 </Alert>
//             )}
//         </Box>
//     );
// };
//
// export default ImageUpload;
</file>

<file path="photovault-fe/src/pages/Archive.tsx">
import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Grid,
    Card,
    CardMedia,
    CardActions,
    IconButton,
    Alert,
    CircularProgress
} from '@mui/material';
import { Unarchive, Download, Delete } from '@mui/icons-material';
import { imageApi } from '../services/api';
import { Image } from '../types/Image';

const Archive: React.FC = () => {
    const [archivedImages, setArchivedImages] = useState<Image[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const loadArchivedImages = async () => {
        try {
            setLoading(true);
            const response = await imageApi.getArchivedImages();
            setArchivedImages(response.data);
            setError(null);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to load archived images');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadArchivedImages();
    }, []);

    const handleUnarchiveImage = async (imageId: number) => {
        try {
            await imageApi.toggleArchive(imageId);
            loadArchivedImages(); // Refresh the list
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to unarchive image');
        }
    };

    const handleDeleteImage = async (imageId: number) => {
        try {
            await imageApi.deleteImage(imageId);
            loadArchivedImages(); // Refresh the list
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to delete image');
        }
    };

    const handleDownloadImage = async (imageId: number, filename: string) => {
        try {
            const response = await imageApi.downloadImage(imageId);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(url);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to download image');
        }
    };

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
            </Box>
        );
    }

    return (
        <Box>
            <Typography variant="h4" component="h1" gutterBottom>
                📁 Archived Images
            </Typography>

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {archivedImages.length === 0 ? (
                <Box textAlign="center" py={8}>
                    <Typography variant="h6" color="textSecondary" gutterBottom>
                        No archived images
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Archive images to organize your collection
                    </Typography>
                </Box>
            ) : (
                <Grid container spacing={3}>
                    {archivedImages.map((image) => (
                        <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={image.id}>
                            <Card>
                                <CardMedia
                                    component="img"
                                    height="200"
                                    image={`http://localhost:8080/images/${image.id}/download`}
                                    alt={image.originalFilename}
                                    sx={{ objectFit: 'cover' }}
                                />
                                <CardActions>
                                    <IconButton
                                        onClick={() => handleUnarchiveImage(image.id)}
                                        color="primary"
                                        title="Unarchive"
                                    >
                                        <Unarchive />
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleDownloadImage(image.id, image.originalFilename)}
                                        title="Download"
                                    >
                                        <Download />
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleDeleteImage(image.id)}
                                        title="Delete"
                                    >
                                        <Delete />
                                    </IconButton>
                                </CardActions>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
            )}
        </Box>
    );
};

export default Archive;
</file>

<file path="photovault-fe/src/pages/Favorites.tsx">
import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Grid,
    Card,
    CardMedia,
    CardActions,
    IconButton,
    Alert,
    CircularProgress
} from '@mui/material';
import { Favorite, Download, Delete } from '@mui/icons-material';
import { imageApi } from '../services/api';
import { Image } from '../types/Image';

const Favorites: React.FC = () => {
    const [favorites, setFavorites] = useState<Image[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const loadFavorites = async () => {
        try {
            setLoading(true);
            const response = await imageApi.getFavorites();
            setFavorites(response.data);
            setError(null);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to load favorites');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadFavorites();
    }, []);

    const handleRemoveFromFavorites = async (imageId: number) => {
        try {
            await imageApi.toggleFavorite(imageId);
            loadFavorites(); // Refresh the list
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to remove from favorites');
        }
    };

    const handleDownloadImage = async (imageId: number, filename: string) => {
        try {
            const response = await imageApi.downloadImage(imageId);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(url);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to download image');
        }
    };

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
            </Box>
        );
    }

    return (
        <Box>
            <Typography variant="h4" component="h1" gutterBottom>
                ❤️ Favorite Images
            </Typography>

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {favorites.length === 0 ? (
                <Box textAlign="center" py={8}>
                    <Typography variant="h6" color="textSecondary" gutterBottom>
                        No favorite images yet
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Mark images as favorites from the home page to see them here
                    </Typography>
                </Box>
            ) : (
                <Grid container spacing={3}>
                    {favorites.map((image) => (
                        <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={image.id}>
                            <Card>
                                <CardMedia
                                    component="img"
                                    height="200"
                                    image={`http://localhost:8080/images/${image.id}/download`}
                                    alt={image.originalFilename}
                                    sx={{ objectFit: 'cover' }}
                                />
                                <CardActions>
                                    <IconButton
                                        onClick={() => handleRemoveFromFavorites(image.id)}
                                        color="error"
                                    >
                                        <Favorite />
                                    </IconButton>
                                    <IconButton onClick={() => handleDownloadImage(image.id, image.originalFilename)}>
                                        <Download />
                                    </IconButton>
                                </CardActions>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
            )}
        </Box>
    );
};

export default Favorites;
</file>

<file path="photovault-fe/src/pages/Home.tsx">
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import {
    Box,
    Typography,
    Grid,
    Card,
    // CardMedia,
    CardActions,
    IconButton,
    Fab,
    Dialog,
    DialogTitle,
    DialogContent,
    Alert,
    CircularProgress,
    TextField,
    InputAdornment
} from '@mui/material';
import {
    Favorite,
    FavoriteBorder,
    Delete,
    Archive,
    Add,
    Download,
    Search
} from '@mui/icons-material';
import { imageApi } from '../services/api';
import { Image } from '../types/Image';
import ImageUpload from '../components/ImageUploads/ImageUploads';
import ImageThumbnail from "../components/ImageThumbnail/ImageThumbnail";

const Home: React.FC = () => {
    const [images, setImages] = useState<Image[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');

    // remove unused filter
    // const [filteredImages, setFilteredImages] = useState<Image[]>([]);

    const useDebounce = (value: string, delay: number) => {
        const [debouncedValue, setDebouncedValue] = useState(value);

        useEffect(() => {
            const handler = setTimeout(() => {
                setDebouncedValue(value);
            }, delay);

            return () => {
                clearTimeout(handler);
            };
        }, [value, delay]);

        return debouncedValue;
    };

    // use debounce searchquery
    const debouncedSearchQuery = useDebounce(searchQuery, 300);

    // temp fix for the reloading loop
    // const loadImages = useCallback(async () => {
    //     try {
    //         setLoading(true);
    //         const response = await imageApi.getAllImages();
    //         setImages(response.data.content || response.data);
    //         setError(null);
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to load images');
    //     } finally {
    //         setLoading(false);
    //     }
    // }, []);

    // temp fix for reloading loop
    // const loadImages = async () => {
    //     try {
    //         setLoading(true);
    //         const response = await imageApi.getAllImages();
    //         setImages(response.data.content || response.data);
    //         setError(null);
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to load images');
    //     } finally {
    //         setLoading(false);
    //     }
    // };
    //
    // useEffect(() => {
    //     loadImages();
    // }, []); // Empty dependency array - runs only once on mountw

    // test an alternative way without using loadImages
    useEffect(() => {
        const fetchAllImages = async () => {
            try {
                setLoading(true);
                setError(null);

                let allImages: any[] = [];
                let page = 0;
                const pageSize = 100;
                let hasMore = true;

                while (hasMore) {
                    const response = await imageApi.getAllImages(page, pageSize);
                    const pageData = response.data.content || response.data || [];

                    if (pageData.length === 0 || pageData.length < pageSize) {
                        hasMore = false;
                    }

                    allImages = [...allImages, ...pageData];

                    // Update UI progressively
                    setImages([...allImages]);

                    // Optional: Add delay to prevent overwhelming the server
                    if (hasMore) {
                        await new Promise(resolve => setTimeout(resolve, 100));
                    }

                    page++;
                }

            } catch (err: any) {
                setError(err.response?.data?.error || 'Failed to load images');
            } finally {
                setLoading(false);
            }
        };

        fetchAllImages();
    }, []);



    const filteredImages = useMemo(() => {
        if (debouncedSearchQuery.trim() === '') {
            return images;
        }
        return images.filter(image =>
            image.originalFilename.toLowerCase().includes(debouncedSearchQuery.toLowerCase())
        );
    }, [images, debouncedSearchQuery]);

    // replacing this as it causes flickers
    // useEffect(() => {
    //     loadImages();
    //     if (searchQuery.trim() === '') {
    //         setFilteredImages(images);
    //     } else {
    //         const filtered = images.filter(image =>
    //             image.originalFilename.toLowerCase().includes(searchQuery.toLowerCase())
    //         );
    //         setFilteredImages(filtered);
    //     }
    // }, [images, loadImages, searchQuery]);

    // replacing this to test alternative to loadImages
    // const handleToggleFavorite = useCallback(async (imageId: number) => {
    //     try {
    //         await imageApi.toggleFavorite(imageId);
    //         loadImages(); // Refresh the list
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to update favorite');
    //     }
    // }, [loadImages]);
    //
    // const handleDeleteImage = useCallback(async (imageId: number) => {
    //     try {
    //         await imageApi.deleteImage(imageId);
    //         loadImages(); // Refresh the list
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to delete image');
    //     }
    // }, [loadImages]);
    //
    // const handleUploadSuccess = useCallback(() => {
    //     setUploadDialogOpen(false);
    //     loadImages();
    // }, [loadImages]);
    //
    // const handleToggleArchive = useCallback(async (imageId: number) => {
    //     try {
    //         await imageApi.toggleArchive(imageId);
    //         loadImages(); // Refresh the list
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to archive image');
    //     }
    // }, [loadImages]);

    const handleToggleFavorite = async (imageId: number) => {
        try {
            await imageApi.toggleFavorite(imageId);
            // Refresh images after action
            const response = await imageApi.getAllImages();
            setImages(response.data.content || response.data);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to update favorite');
        }
    };

    const handleDeleteImage = async (imageId: number) => {
        try {
            await imageApi.deleteImage(imageId);
            // Refresh images after action
            const response = await imageApi.getAllImages();
            setImages(response.data.content || response.data);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to delete image');
        }
    };

    const handleToggleArchive = async (imageId: number) => {
        try {
            await imageApi.toggleArchive(imageId);
            // Refresh images after action
            const response = await imageApi.getAllImages();
            setImages(response.data.content || response.data);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to archive image');
        }
    };

    const handleUploadSuccess = () => {
        setUploadDialogOpen(false);
        // Refresh images after upload
        const fetchImages = async () => {
            try {
                const response = await imageApi.getAllImages();
                setImages(response.data.content || response.data);
            } catch (err: any) {
                setError(err.response?.data?.error || 'Failed to refresh images');
            }
        };
        fetchImages();
    };

    // move the download handler for better access to modify the others
    const handleDownloadImage = useCallback(async (imageId: number, filename: string) => {
        try {
            const response = await imageApi.downloadImage(imageId);
            const url = window.URL.createObjectURL(new Blob([response.data]));
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(url);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to download image');
        }
    }, []);

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
            </Box>
        );
    }

    return (
        <Box>
            <Typography variant="h4" component="h1" gutterBottom>
                My Images
            </Typography>

            <TextField
                fullWidth
                placeholder="Search images..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                sx={{ mb: 3 }}
                InputProps={{
                    startAdornment: (
                        <InputAdornment position="start">
                            <Search />
                        </InputAdornment>
                    ),
                }}
            />

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {images.length === 0 ? (
                <Box textAlign="center" py={8}>
                    <Typography variant="h6" color="textSecondary" gutterBottom>
                        No images uploaded yet
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Click the + button to upload your first image
                    </Typography>
                </Box>
            ) : (
                <Grid container spacing={3}>
                    {filteredImages.map((image) => (
                        <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={image.id}>
                            <Card>
                                {/*<CardMedia*/}
                                {/*    component="img"*/}
                                {/*    height="200"*/}
                                {/*    image={`http://localhost:8080/images/${image.id}/download`}*/}
                                {/*    alt={image.originalFilename}*/}
                                {/*    sx={{ objectFit: 'cover' }}*/}
                                {/*/>*/}
                                <ImageThumbnail
                                    imageId={image.id}
                                    alt={image.originalFilename}
                                    width="100%"
                                    height={200}
                                    fallbackToRegular={true} // Fallback to regular download if thumbnail fails
                                />
                                <CardActions>
                                    <IconButton
                                        onClick={() => handleToggleFavorite(image.id)}
                                        color={image.isFavorite ? 'error' : 'default'}
                                    >
                                        {image.isFavorite ? <Favorite /> : <FavoriteBorder />}
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleDownloadImage(image.id, image.originalFilename)}>
                                        <Download />
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleToggleArchive(image.id)}>
                                    <Archive />
                                    </IconButton>
                                    <IconButton
                                        onClick={() => handleDeleteImage(image.id)}>
                                        <Delete />
                                    </IconButton>
                                </CardActions>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
            )}

            {/* Upload FAB */}
            <Fab
                color="primary"
                aria-label="upload"
                sx={{ position: 'fixed', bottom: 16, right: 16 }}
                onClick={() => setUploadDialogOpen(true)}
            >
                <Add />
            </Fab>

            {/* Upload Dialog */}
            <Dialog
                open={uploadDialogOpen}
                onClose={() => setUploadDialogOpen(false)}
                maxWidth="sm"
                fullWidth
            >
                <DialogTitle>Upload New Image</DialogTitle>
                <DialogContent>
                    <ImageUpload onUploadSuccess={handleUploadSuccess} />
                </DialogContent>
            </Dialog>
        </Box>
    );
};

export default Home;

// old post creation test blank page
// import React from 'react';
//
// const Home: React.FC = () => {
//     return (
//         <div>
//             <h1>Home Page</h1>
//             <p>Welcome to PhotoVault</p>
//         </div>
//     );
// };
//
// export default Home;
</file>

<file path="photovault-fe/src/pages/Trash.tsx">
import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Grid,
    Card,
    CardMedia,
    CardActions,
    IconButton,
    Alert,
    CircularProgress,
    Button
} from '@mui/material';
import { Restore, DeleteForever } from '@mui/icons-material';
import { imageApi } from '../services/api';
import { Image } from '../types/Image';
import ImageThumbnail from "../components/ImageThumbnail/ImageThumbnail";

const Trash: React.FC = () => {
    const [trashedImages, setTrashedImages] = useState<Image[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const loadTrashedImages = async () => {
        try {
            setLoading(true);
            // We'll need to add this endpoint to the backend
            const response = await imageApi.getTrashedImages();
            setTrashedImages(response.data);
            setError(null);
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to load trash');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadTrashedImages();
    }, []);

    const handleRestoreImage = async (imageId: number) => {
        try {
            await imageApi.restoreImage(imageId);
            loadTrashedImages(); // Refresh the list
        } catch (err: any) {
            setError(err.response?.data?.error || 'Failed to restore image');
        }
    };

    const handlePermanentDelete = async (imageId: number) => {
        if (window.confirm('Are you sure? This will permanently delete the image and cannot be undone.')) {
            try {
                await imageApi.permanentlyDeleteImage(imageId);
                loadTrashedImages(); // Refresh the list
            } catch (err: any) {
                setError(err.response?.data?.error || 'Failed to permanently delete image');
            }
        }
    };

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
            </Box>
        );
    }
    // might as well delete this function since who the hell wants to download from trash
    // const handleDownloadImage = async (imageId: number, filename: string) => {
    //     try {
    //         const response = await imageApi.downloadImage(imageId);
    //         const url = window.URL.createObjectURL(new Blob([response.data]));
    //         const link = document.createElement('a');
    //         link.href = url;
    //         link.setAttribute('download', filename);
    //         document.body.appendChild(link);
    //         link.click();
    //         link.remove();
    //         window.URL.revokeObjectURL(url);
    //     } catch (err: any) {
    //         setError(err.response?.data?.error || 'Failed to download image');
    //     }
    // };
    //
    // if (loading) {
    //     return (
    //         <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
    //             <CircularProgress />
    //         </Box>
    //     );
    // }

    return (
        <Box>
            <Typography variant="h4" component="h1" gutterBottom>
                🗑️ Trash
            </Typography>

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {trashedImages.length === 0 ? (
                <Box textAlign="center" py={8}>
                    <Typography variant="h6" color="textSecondary" gutterBottom>
                        Trash is empty
                    </Typography>
                    <Typography variant="body2" color="textSecondary">
                        Deleted images will appear here
                    </Typography>
                </Box>
            ) : (
                <>
                    <Alert severity="info" sx={{ mb: 3 }}>
                        Images in trash can be restored or permanently deleted.
                        Permanent deletion cannot be undone.
                    </Alert>

                    <Grid container spacing={3}>
                        {trashedImages.map((image) => (
                            <Grid size={{ xs: 12, sm: 6, md: 4, lg: 3 }} key={image.id}>
                                <Card sx={{ opacity: 0.7 }}>
                                    {/*remove this to use thumbnail*/}
                                    {/*<CardMedia*/}
                                    {/*    component="img"*/}
                                    {/*    height="200"*/}
                                    {/*    image={`http://localhost:8080/images/${image.id}/download`}*/}
                                    {/*    alt={image.originalFilename}*/}
                                    {/*    sx={{ objectFit: 'cover' }}*/}
                                    {/*/>*/}
                                    <ImageThumbnail
                                        imageId={image.id}
                                        alt={image.originalFilename}
                                        width="100%"
                                        height={200}
                                    />
                                    <CardActions>
                                        <IconButton
                                            onClick={() => handleRestoreImage(image.id)}
                                            color="primary"
                                            title="Restore"
                                        >
                                            <Restore />
                                        </IconButton>
                                        {/*<IconButton*/}
                                        {/*    onClick={() => handleDownloadImage(image.id, image.originalFilename)}*/}
                                        {/*    title="Download"*/}
                                        {/*>*/}
                                        {/*    <Download />*/}
                                        {/*</IconButton>*/}
                                        <IconButton
                                            onClick={() => handlePermanentDelete(image.id)}
                                            color="error"
                                            title="Delete Forever"
                                        >
                                            <DeleteForever />
                                        </IconButton>
                                    </CardActions>
                                </Card>
                            </Grid>
                        ))}
                    </Grid>
                </>
            )}
        </Box>
    );
};

export default Trash;
</file>

<file path="photovault-fe/src/services/api.ts">
import axios from 'axios';

// const API_BASE_URL = 'http://localhost:8080/';
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';

const api = axios.create({
    baseURL: API_BASE_URL,
    headers: {
        'Content-Type': 'application/json',
    },
    timeout: 10000,
});

export const MAX_FILE_SIZE = 10 * 1024 * 1024;

// export interface Image {
//     id: number;
//     filename: string;
//     storedFilename: string;
//     originalFilename: string;
//     filePath: string;
//     fileSize: number;
//     contentType: string;
//     uploadDate: string;
//     isFavorite: boolean;
//     isArchived: boolean;
//     isDeleted: boolean;
// }

export const imageApi = {
    // Test connection
    testConnection: () =>
        api.get('/health'),

    // Upload image
    uploadImage: (file: File) => {
        const formData = new FormData();
        formData.append('file', file);
        return api.post('/images/upload', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
        });
    },

    // multiple files upload without progress tracking
    // uploadMultipleImages: (files: File[]) => {
    //     const formData = new FormData();
    //     files.forEach(file => {
    //         formData.append('files', file);
    //     });
    //     return api.post('/images/upload/multiple', formData, {
    //         headers: {
    //             'Content-Type': 'multipart/form-data',
    //         },
    //     });
    // },

    // progress tracking
    uploadMultipleImagesWithProgress: (files: File[], onProgress?: (progress: number) => void) => {
        const formData = new FormData();
        files.forEach(file => {
            formData.append('files', file);
        });

        return api.post('/images/upload/multiple', formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
            onUploadProgress: (progressEvent) => {
                if (onProgress && progressEvent.total) {
                    const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                    onProgress(progress);
                }
            }
        });
    },


    // Get all images with pagination
    getAllImages: (page = 0, size = 10) =>
        api.get(`/images?page=${page}&size=${size}`),

    // Get image by ID
    getImageById: (id: number) =>
        api.get(`/images/${id}`),

    // Download image
    downloadImage: (id: number) =>
        api.get(`/images/${id}/download`, { responseType: 'blob' }),

    // Toggle favorite
    toggleFavorite: (id: number) =>
        api.put(`/images/${id}/favorite`),

    // Get favorites
    getFavorites: () =>
        api.get('/images/favorites'),

    // Search images
    searchImages: (query: string) =>
        api.get(`/images/search?query=${query}`),

    // Delete image (move to trash)
    deleteImage: (id: number) =>
        api.delete(`/images/${id}`),

    // Get stats
    getStats: () =>
        api.get('/images/stats'),

    getTrashedImages: () =>
        api.get('/images/trash'),

    restoreImage: (id: number) =>
        api.put(`/images/${id}/restore`),

    permanentlyDeleteImage: (id: number) =>
        api.delete(`/images/${id}/permanent`),

    toggleArchive: (id: number) =>
        api.put(`/images/${id}/archive`),

    getArchivedImages: () =>
        api.get('/images/archived'),

    getThumbnail: (id: number) =>
        api.get(`/images/${id}/thumbnail`, { responseType: 'blob' }),
};

export default api;
</file>

<file path="photovault-fe/src/types/Image.ts">
export interface Image {
    id: number;
    filename: string;
    storedFilename: string;
    originalFilename: string;
    filePath: string;
    fileSize: number;
    contentType: string;
    uploadDate: string;
    isFavorite: boolean;
    isArchived: boolean;
    isDeleted: boolean;
}
</file>

<file path="photovault-fe/src/App.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders photovault title', () => {
  render(<App />);
  const titleElement = screen.getByText(/Photovault API Test in progress/i);
  expect(titleElement).toBeInTheDocument();
});
</file>

<file path="photovault-fe/package.json">
{
  "name": "photovault-fe",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@mui/icons-material": "^7.2.0",
    "@mui/material": "^7.2.0",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.126",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.10.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-dropzone": "^14.3.8",
    "react-router-dom": "^7.6.3",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="photovault-fe/src/App.css">
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="photovault-fe/src/App.tsx">
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import { AppBar, Toolbar, Typography, Button, Container } from '@mui/material';
import Home from './pages/Home';
import Favorites from './pages/Favorites';
import Archive from './pages/Archive';
import Trash from './pages/Trash';

function App() {
  return (
      <Router>
        <AppBar position="static">
          <Toolbar>
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              📸 PhotoVault
            </Typography>
            <Button color="inherit" component={Link} to="/">Home</Button>
            <Button color="inherit" component={Link} to="/favorites">Favorites</Button>
            <Button color="inherit" component={Link} to="/archive">Archive</Button>
            <Button color="inherit" component={Link} to="/trash">Trash</Button>
          </Toolbar>
        </AppBar>

        <Container maxWidth="lg" sx={{ mt: 4 }}>
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/favorites" element={<Favorites />} />
            <Route path="/archive" element={<Archive />} />
            <Route path="/trash" element={<Trash />} />
          </Routes>
        </Container>
      </Router>
  );
}

export default App;

// import React, { useState, useEffect } from 'react';
// import {
//   Container,
//   Typography,
//   Box,
//   Button,
//   Alert,
//   CircularProgress,
//   Paper,
//   Grid
// } from '@mui/material';
// import { CheckCircle, Error, Cloud } from '@mui/icons-material';
// import { imageApi } from './services/api';
//
//
// interface ConnectionStatus {
//   backend: 'loading' | 'success' | 'error';
//   message: string;
// }
//
// function App() {
//   const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({
//     backend: 'loading',
//     message: 'Testing connection...'
//   });
//   const [stats, setStats] = useState<any>(null);
//   const [images, setImages] = useState<any>(null);
//
//   // Test backend connection
//   const testBackendConnection = async () => {
//     try {
//       setConnectionStatus({ backend: 'loading', message: 'Testing backend connection...' });
//       const response = await imageApi.testConnection();
//       setConnectionStatus({
//         backend: 'success',
//         message: `Backend connected: ${response.data}`
//       });
//     } catch (error: any) {
//       setConnectionStatus({
//         backend: 'error',
//         message: `Backend connection failed: ${error.message}`
//       });
//     }
//   };
//
//   // Test stats endpoint
//   const testStatsEndpoint = async () => {
//     try {
//       const response = await imageApi.getStats();
//       setStats(response.data);
//     } catch (error: any) {
//       console.error('Stats endpoint failed:', error);
//     }
//   };
//
//   // Test images endpoint
//   const testImagesEndpoint = async () => {
//     try {
//       const response = await imageApi.getAllImages();
//       setImages(response.data);
//     } catch (error: any) {
//       console.error('Images endpoint failed:', error);
//     }
//   };
//
//   // Test file upload
//   const testFileUpload = async () => {
//     // Create a small test image file
//     const canvas = document.createElement('canvas');
//     canvas.width = 100;
//     canvas.height = 100;
//     const ctx = canvas.getContext('2d');
//     if (ctx) {
//       ctx.fillStyle = '#4CAF50';
//       ctx.fillRect(0, 0, 100, 100);
//       ctx.fillStyle = 'white';
//       ctx.font = '16px Arial';
//       ctx.fillText('TEST', 30, 55);
//     }
//
//     canvas.toBlob(async (blob) => {
//       if (blob) {
//         const testFile = new File([blob], 'test-image.png', { type: 'image/png' });
//         try {
//           const response = await imageApi.uploadImage(testFile);
//           alert(`Upload successful: ${JSON.stringify(response.data.message)}`);
//           // Refresh stats and images after upload
//           await testStatsEndpoint();
//           await testImagesEndpoint();
//         } catch (error: any) {
//           alert(`Upload failed: ${error.response?.data?.error || error.message}`);
//         }
//       }
//     }, 'image/png');
//   };
//
//   useEffect(() => {
//     testBackendConnection();
//     testStatsEndpoint();
//     testImagesEndpoint();
//   }, []);
//
//   const getStatusIcon = (status: string) => {
//     switch (status) {
//       case 'loading': return <CircularProgress size={20} />;
//       case 'success': return <CheckCircle color="success" />;
//       case 'error': return <Error color="error" />;
//       default: return null;
//     }
//   };
//
//   return (
//       <Container maxWidth="md" sx={{ py: 4 }}>
//         <Typography variant="h3" component="h1" gutterBottom align="center">
//           📸 PhotoVault API Test
//         </Typography>
//
//         <Typography variant="subtitle1" align="center" color="textSecondary" sx={{ mb: 4 }}>
//           Testing connection between React frontend and Spring Boot backend
//         </Typography>
//
//         {/* Connection Status */}
//         <Paper elevation={2} sx={{ p: 3, mb: 3 }}>
//           <Box display="flex" alignItems="center" gap={2}>
//             {getStatusIcon(connectionStatus.backend)}
//             <Typography variant="h6">Backend Connection</Typography>
//           </Box>
//           <Alert
//               severity={connectionStatus.backend === 'success' ? 'success' :
//                   connectionStatus.backend === 'error' ? 'error' : 'info'}
//               sx={{ mt: 2 }}
//           >
//             {connectionStatus.message}
//           </Alert>
//         </Paper>
//
//         {/* API Endpoints Test */}
//         <Grid container spacing={3}>
//           <Grid size={{ xs: 12, md: 6 }}>
//             <Paper elevation={2} sx={{ p: 3 }}>
//               <Typography variant="h6" gutterBottom>
//                 📊 Stats Endpoint
//               </Typography>
//               {stats ? (
//                   <Box>
//                     <Typography>Total Images: {stats.totalImages}</Typography>
//                     <Typography>Favorites: {stats.favorites}</Typography>
//                     <Typography>Archived: {stats.archived}</Typography>
//                   </Box>
//               ) : (
//                   <Typography color="textSecondary">Loading stats...</Typography>
//               )}
//               <Button
//                   variant="outlined"
//                   onClick={testStatsEndpoint}
//                   sx={{ mt: 2 }}
//               >
//                 Refresh Stats
//               </Button>
//             </Paper>
//           </Grid>
//
//           <Grid size={{ xs: 12, md: 6 }}>
//             <Paper elevation={2} sx={{ p: 3 }}>
//               <Typography variant="h6" gutterBottom>
//                 🖼️ Images Endpoint
//               </Typography>
//               {images ? (
//                   <Box>
//                     <Typography>
//                       Found: {images.totalElements || images.length || 0} images
//                     </Typography>
//                     <Typography variant="caption" color="textSecondary">
//                       {images.content ? 'Paginated response' : 'Simple array response'}
//                     </Typography>
//                   </Box>
//               ) : (
//                   <Typography color="textSecondary">Loading images...</Typography>
//               )}
//               <Button
//                   variant="outlined"
//                   onClick={testImagesEndpoint}
//                   sx={{ mt: 2 }}
//               >
//                 Refresh Images
//               </Button>
//             </Paper>
//           </Grid>
//
//           <Grid size={{ xs: 12 }}>
//             <Paper elevation={2} sx={{ p: 3 }}>
//               <Typography variant="h6" gutterBottom>
//                 ⬆️ Upload Test
//               </Typography>
//               <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
//                 This will create and upload a small test image to verify the upload endpoint.
//               </Typography>
//               <Button
//                   variant="contained"
//                   onClick={testFileUpload}
//                   startIcon={<Cloud />}
//                   disabled={connectionStatus.backend !== 'success'}
//               >
//                 Test Upload
//               </Button>
//             </Paper>
//           </Grid>
//         </Grid>
//
//         {/* Retry Connection */}
//         <Box textAlign="center" sx={{ mt: 4 }}>
//           <Button
//               variant="outlined"
//               onClick={testBackendConnection}
//               disabled={connectionStatus.backend === 'loading'}
//           >
//             Retry Connection Test
//           </Button>
//         </Box>
//       </Container>
//   );
// }
//
// export default App;
</file>

</files>
